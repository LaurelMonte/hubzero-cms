<?php

defined( '_JEXEC' ) or die( 'Restricted access' );
 
jimport( 'joomla.application.component.model' );

require_once('base.php');
require_once 'api/org/nees/oracle/Suggest.php';
require_once 'lib/data/MaterialTypePeer.php';
require_once 'lib/data/SpecimenPeer.php';

class ProjectEditorModelExperiment extends ProjectEditorModelBase{
	

  /**
   * Constructor
   *
   * @since 1.5
   */
  function __construct(){
    parent::__construct();
  }
  
  public function getProjectOwner(){
    $oUser =& JFactory::getUser();
    return $oUser;
  }
  
  public function suggestFacilities($p_strName) {
    return OrganizationPeer::suggestFacilities($p_strName);
  }
  
  public function suggestSpecimen($p_strName) {
    return SpecimenPeer::suggestByName($p_strName);
  }
  
  public function findMaterialTypeByDisplayName($p_strName){
    return MaterialTypePeer::findByDisplayName($p_strName);
  }
  
  public function suggestMaterialType($p_strName){
    return MaterialTypePeer::suggestDisplayName($p_strName);
  }
  
  public function getFilmstripHTML($p_strPhotoArray){
  	$strHTML = "<div class=\"sscontainer\">
		          <div id=\"showcase\">
		            <div id=\"showcase-prev\" class=\"\"></div>
		            <div id=\"showcase-window\">
		              <div class=\"showcase-pane\" style=\"left: 0px;\">";
  	
  	foreach($p_strPhotoArray as $strPhoto){
  		$strHTML .= <<< ENDHTML
		            	<a title="RWN, drift levels of 0.2%" href="/components/com_warehouse/images/prototype/film_strip/RWN-Original/5-RWN.jpg" rel="lightbox[filmstrip]">
		              	  <img class="thumbima" alt="thumbnail1" src="/components/com_warehouse/images/prototype/film_strip/RWN-h75/5-RWN.jpg">
		            	</a>
ENDHTML;
  	}
  	$strHTML .= "      </div>
		              </div>
		            <div id=\"showcase-next\" class=\"\"></div>
		          </div>
		        </div>";
  	
    return $strHTML;
  }
  
  
  public function createAuthorization($p_iCreatorId, $p_iProjectId){
  	$perms = new Permissions( Permissions::PERMISSION_ALL );

    $auth  = new Authorization($p_iCreatorId, $p_iProjectId,  DomainEntityType::ENTITY_TYPE_PROJECT, $perms );
    $auth->save();
    
    return $auth;
  }
  
  public function createPersonEntityRole($p_iCreatorId, $p_iProjectId, $p_iRoleId){
  	$oRole = RolePeer::find($p_iRoleId);	
  	
  	$oPersonEntityRole = new PersonEntityRole($p_iCreatorId, $p_iProjectId,  DomainEntityType::ENTITY_TYPE_PROJECT, $oRole);
    $oPersonEntityRole->save();
    
    return $oPersonEntityRole;
  }
  
  /**
   * Creates ProjectOrganization objects for the current project.
   * @param $p_oProject - The current project
   * @param $p_strOrgTextField - The organization name in the text input field
   * @param $p_strOrgArray - The name of organizations added with the (+) button
   */
  public function createProjectOrganizations($p_oProject, $p_strOrgTextField, $p_strOrgArray){
  	//nothing to do if both are empty
  	if(strlen($p_strOrgTextField) === 0 && empty($p_strOrgArray)){
  	  return;
  	}
  	
  	//insert the text field
  	if(strlen($p_strOrgTextField) > 0){
  	  if(!$this->hasProjectOrganization($p_oProject, $p_strOrgTextField)){
  	    $oOrganization = OrganizationPeer::findByName($p_strOrgTextField);
  	    $oProjectOrganization = new ProjectOrganization($p_oProject, $oOrganization);
  	    $oProjectOrganization->save();
  	  }
  	}
  	
  	//insert the array
  	if(!empty($p_strOrgArray)){
  	  while (list ($key,$strOrgName) = @each ($p_strOrgArray)) {
  	  	if(!$this->hasProjectOrganization($p_oProject, $strOrgName)){
		  $oOrganization = OrganizationPeer::findByName($strOrgName);
  	      $oProjectOrganization = new ProjectOrganization($p_oProject, $oOrganization);
  	      $oProjectOrganization->save();
  	  	}
	  } 
  	}
  }
  
  /**
   * Checks to see if a project already has a ProjectOrganization
   * @return true/false
   */
  private function hasProjectOrganization($p_oProject, $p_strNewOrgName){
  	$bReturn = false;
  	
  	$oExistingProjectOrganizationArray = OrganizationPeer::findByProject($p_oProject->getId());
  	foreach($oExistingProjectOrganizationArray as $oThisProjectOrganization){
  	  if($oThisProjectOrganization->getName()==$p_strNewOrgName){
  	  	$bReturn = true;
  	  }	
  	}
  	return $bReturn;
  }
  
  public function createProjectEquipment(){
  	
  }
  
  public function createProjectLinks($p_oProject, $p_iProjectHomePageTypeId, $p_strCaption, $p_strDescription, $p_strUrl, $p_strWebsiteArray=null){
  	if( strlen($p_strUrl) > 0 ){
      $oProjectHomepage = new ProjectHomepage();
      $oProjectHomepage->setProjectHomepageTypeId($p_iProjectHomePageTypeId);
      $oProjectHomepage->setCaption($p_strCaption);
      $oProjectHomepage->setDescription($p_strDescription);
      
      
      if(preg_match('/neeshub.org/warehouse/project/[id]\b/', $p_strUrl)){
      	$p_strUrl="https://neeshub.org/warehouse/project/".$p_oProject->getId();
      }
      $oProjectHomepage->setUrl($p_strUrl);
      $oProjectHomepage->save();
  	}

	if($p_strWebsiteArray != null){
	  foreach($p_strWebsiteArray as $strWebsiteUrl){
	  	$strWebsiteArray = explode("^*", $strWebsiteUrl);
	  	$strText = $strWebsiteArray[0];
	  	$strUrl = $strWebsiteArray[1];
	  	
	  	$oProjectHomepage = new ProjectHomepage();
        $oProjectHomepage->setProjectHomepageTypeId($p_iProjectHomePageTypeId);
        $oProjectHomepage->setCaption($strText);
        $oProjectHomepage->setDescription($strText);
        
	    if(preg_match('/neeshub.org/warehouse/project/[id]\b/', $strUrl)){
      	  $strUrl="https://neeshub.org/warehouse/project/".$p_oProject->getId();
        }
        $oProjectHomepage->setUrl($strUrl);
        $oProjectHomepage->save();
	  }
	}
	  	
  }
}

?>