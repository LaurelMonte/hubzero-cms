<?php
/**
 * @version		$Id: controller.php 13338 2009-10-27 02:15:55Z ian $
 * @package		Joomla
 * @subpackage	Content
 * @copyright	Copyright (C) 2005 - 2008 Open Source Matters. All rights reserved.
 * @license		GNU/GPL, see LICENSE.php
 * Joomla! is free software. This version may have been modified pursuant to the
 * GNU General Public License, and as distributed it includes or is derivative
 * of works licensed under the GNU General Public License or other free or open
 * source software licenses. See COPYRIGHT.php for copyright notices and
 * details.
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die( 'Restricted access' );

jimport('joomla.application.component.controller');
require_once 'api/org/nees/html/UserRequest.php';
require_once 'api/org/nees/util/StringHelper.php';
require_once 'api/org/nees/util/FileHelper.php';
require_once 'api/org/nees/exceptions/ValidationException.php';
require_once 'api/org/nees/static/Files.php';
require_once 'api/org/nees/static/ProjectEditor.php';
require_once 'api/org/nees/lib/filesystem/FileCommandAPI.php';
require_once 'api/org/nees/lib/bulkupload/FileUploadReader.php';
require_once 'lib/data/Person.php';
require_once 'lib/data/Project.php';
require_once 'lib/data/StructuredProject.php';
require_once 'lib/data/ProjectGrant.php';
require_once 'lib/data/ProjectGrantPeer.php';
require_once 'lib/data/Organization.php';
require_once 'lib/data/ProjectOrganization.php';
require_once 'lib/data/ProjectOrganizationPeer.php';
require_once 'lib/data/ProjectHomepagePeer.php';
require_once 'lib/data/ProjectHomepageURL.php';
require_once 'lib/data/StructuredExperiment.php';
require_once 'lib/data/Material.php';
require_once 'lib/data/MaterialType.php';
require_once 'lib/data/MaterialProperty.php';
require_once 'lib/data/MaterialFile.php';
require_once 'lib/data/MeasurementUnitPeer.php';
require_once 'lib/data/ResearcherKeyword.php';
require_once 'lib/data/CoordinateSpace.php';
require_once 'lib/data/CoordinateSpacePeer.php';
require_once 'lib/data/ResearcherKeywordPeer.php';
require_once 'lib/data/SensorType.php';
require_once 'lib/data/LocationPlan.php';
require_once 'lib/data/SensorLocationPlan.php';
require_once 'lib/data/SensorLocation.php';
require_once 'lib/data/Specimen.php';
require_once 'lib/security/Permissions.php';
require_once 'lib/util/DomainEntityType.php';
require_once 'lib/data/Trial.php';
require_once 'lib/data/Repetition.php';
require_once 'util/Tuple.php';



/**
 * Content Component Controller
 *
 * @package		Joomla
 * @subpackage	Content
 * @since 1.5
 */
class ProjectEditorController extends JController{

  /**
   * Constructor
   *
   * @since 1.5
   */
  function __construct(){
    parent::__construct();

    $this->registerTask( 'facilitysearch', 'getFacilityList' );
    $this->registerTask( 'organizationsearch', 'getOrganizationList' );
    $this->registerTask( 'membersearch', 'getMemberList' );
    $this->registerTask( 'sponsorsearch', 'getSponsorList' );
    $this->registerTask( 'equipment', 'getEquipmentList' );
    $this->registerTask( 'add', 'add' );
    $this->registerTask( 'remove', 'remove' );
    $this->registerTask( 'preview', 'previewNewProject' );
    $this->registerTask( 'previewprojectedit', 'previewExistingProject' );
    $this->registerTask( 'previewexp', 'previewNewExperiment' );
    $this->registerTask( 'createproject', 'createNewProject' );
    $this->registerTask( 'editproject', 'editProject' );
    $this->registerTask( 'specimentypesearch', 'getSpecimenTypeList');
    $this->registerTask( 'materialtypesearch', 'getMaterialTypeList' );
    $this->registerTask( 'sensortypesearch', 'getSensorTypeList');
    $this->registerTask( 'locationplansearch', 'getLocationPlanList' );
    $this->registerTask( 'addmaterial', 'addMaterial' );
    $this->registerTask( 'removematerial', 'removeMaterial' );
    $this->registerTask( 'materialpropertytypesearch', 'getMaterialPropertyTypeList' );
    $this->registerTask( 'unitsearch', 'getMeasurementUnitList' );
    $this->registerTask( 'newmember', 'addProjectMember' );
    $this->registerTask( 'savemember', 'saveMember' );
    $this->registerTask( 'removemember', 'removeMember' );
    $this->registerTask( 'saveabout', 'saveAbout' );
    $this->registerTask( 'savematerial', 'saveMaterial' );
    $this->registerTask( 'savesensor', 'saveSensor' );
    $this->registerTask( 'uploadform', 'uploadForm' );
    $this->registerTask( 'upload', 'uploadFile' );
    $this->registerTask( 'removefile', 'removeFile' );
    $this->registerTask( 'makedirectory', 'makeDirectory' );
    $this->registerTask( 'savelocationplan', 'saveLocationPlan' );
    $this->registerTask( 'savesensorfile', 'saveSensorFile' );
    $this->registerTask( 'savedrawing', 'saveDrawing' );
    $this->registerTask( 'savedatafile', 'saveDataFile' );
    $this->registerTask( 'savetrial', 'saveTrial' );
    $this->registerTask( 'saverepetition', 'saveRepetition' );
    $this->registerTask( 'savedatafilecuraterequest', 'saveDataFileCurateRequest');
    $this->registerTask( 'savesecurity', 'saveSecurity' );
    $this->registerTask( 'savefilmstrip', 'saveFilmstrip' );
  }

  /*
     * Return true if user is logged in, false otherwise. Calling the redirect()
     * function on this class after a false return, will redirect to the login
     * form with an appropiately set redirectURL for ferrying client back to
     * the correct place after they login
     */
    function userloggedin()
    {
        $juser =& JFactory::getUser();

        if ($juser->get('guest'))
        {
            // Get current page path and querystring
            $uri  =& JURI::getInstance();
            $redirectUrl = $uri->toString(array('path', 'query'));

            // Code the redirect URL
            $redirectUrl = base64_encode($redirectUrl);
            $redirectUrl = '?return=' . $redirectUrl;
            $joomlaLoginUrl = '/login';
            $finalUrl = $joomlaLoginUrl . $redirectUrl;
            $finalUrl = JRoute::_($finalUrl);
            $this->_redirect = $finalUrl;

            return false;
        }
        else
            return true;
    }
  
  /**
   * Method to display the view
   * 
   * @access    public
   */
  function display(){
  	$sViewName	= JRequest::getVar('view', 'project');
	JRequest::setVar('view', $sViewName );
    parent::display();
  }
  
  /**
   * Gets a list of NEES facilities based upon what the user types.
   * 
   * @return strings separated by line breaks 
   */
  function getFacilityList(){
    $strFacilityList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Project');
    $oOrganizationArray = $oModel->suggestFacilities($strSearchTerm, 10);
    foreach($oOrganizationArray as $iIndex=>$oOrganization){
      $strFacilityList .= $oOrganization->getName();
      if($iIndex < 10){
        $strFacilityList .= "\n";
      }
    }

    echo $strFacilityList;
  }
  
  /**
   * Gets a list of NEES facilities based upon what the user types.
   * 
   * @return strings separated by line breaks 
   */
  function getOrganizationList(){
    $strOrganizationList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Project');
    $oOrganizationArray = $oModel->suggestOrganizations($strSearchTerm, 10);
    foreach($oOrganizationArray as $iIndex=>$oOrganization){
      $strOrganizationList .= $oOrganization->getName();
      if($iIndex < 10){
            $strOrganizationList .= "\n";
      }
    }

    echo $strOrganizationList;
  }

  /**
   * Gets a list of NEES facilities based upon what the user types.
   *
   * @return strings separated by line breaks
   */
  function getMemberList(){
    $strMemberList = "";

    $strSearchTerm	= JRequest::getVar('term');
    $strNameArray = explode(",", $strSearchTerm);

    if(sizeof($strNameArray) > 2){
      $strMemberList = "Enter only one person. Add more people in Members tab.\n";
      return $strMemberList;
    }

    /* @var $oModel ProjectEditorModelMembers */
    $oModel =& $this->getModel('Members');
    $oMemberCollectionArray = $oModel->suggestMembers($strSearchTerm, 10);

    foreach($oMemberCollectionArray as $iIndex=>$oPersonArray){
      $strMemberList .= ucfirst($oPersonArray['LAST_NAME']).", ".ucfirst($oPersonArray['FIRST_NAME'])." (".$oPersonArray['USER_NAME'].")";
      if($iIndex < 10){
        $strMemberList .= "\n";
      }
    }

    echo $strMemberList;
  }
  
  function getSponsorList(){
    $strSponsorList = "";
  	
    $strSearchTerm	= JRequest::getVar('term');
  	
    $oModel =& $this->getModel('Project');
    $oSponsorArray = $oModel->suggestSponsors($strSearchTerm);
    foreach($oSponsorArray as $iIndex=>$oSponsor){
      $strSponsorList .= $oSponsor->getName();
      if($iIndex < 10){
        $strSponsorList .= "\n";
      }
    }

    echo $strSponsorList;
  }
  
  function getEquipmentList(){
    JRequest::setVar("view", "equipment" );
    parent::display();
  }
  
  function getSpecimenTypeList(){
    $strSpecimenList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Experiment');
    $oSpecimentArray = $oModel->suggestSpecimen($strSearchTerm);
    foreach($oSpecimentArray as $iIndex=>$oSpecimen){
      if($oSpecimen != null){
        $strSpecimenList .= $oSpecimen->getName();
        if($iIndex < 10){
              $strSpecimenList .= "\n";
        }
      }
    }

    echo $strSpecimenList;
  }
  
  function getMaterialTypeList(){
    $strMaterialTypeList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Experiment');
    $oMaterialTypetArray = $oModel->suggestMaterialType($strSearchTerm);
    foreach($oMaterialTypetArray as $iIndex=>$oMaterialType){
      if($oMaterialType != null){
        $strMaterialTypeList .= $oMaterialType->getName();
        if($iIndex < 10){
              $strMaterialTypeList .= "\n";
        }
      }
    }

    echo $strMaterialTypeList;
  }
  
  function getMaterialPropertyTypeList(){
    $strMaterialPropertyTypeList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Mproperties');
    $oMaterialPropertyTypetArray = $oModel->findByMaterialTypePropertyDisplayName($strSearchTerm);
    foreach($oMaterialPropertyTypetArray as $iIndex=>$oMaterialPropertyType){
      if($oMaterialPropertyType != null){
        $strMaterialPropertyTypeList .= $oMaterialPropertyType->getName();
        if($iIndex < 10){
              $strMaterialPropertyTypeList .= "\n";
        }
      }
    }

    echo $strMaterialPropertyTypeList;
  }
  
  function getMeasurementUnitList(){
    $strMeasurementUnitList = "";

    $strSearchTerm	= JRequest::getVar('term');

    $oModel =& $this->getModel('Experiment');
    $oMeasurementUnittArray = $oModel->suggestMeasurementUnits($strSearchTerm);
    foreach($oMeasurementUnittArray as $iIndex=>$oMeasurementUnit){
      if($oMeasurementUnit != null){
        $strMeasurementUnitList .= $oMeasurementUnit->getName();
        if($iIndex < 10){
              $strMeasurementUnitList .= "\n";
        }
      }
    }

    echo $strMeasurementUnitList;
  }

  /**
   * @return string
   */
  function getSensorTypeList(){
    $strSensorTypeList = "";

    $strSearchTerm	= JRequest::getVar('term');

    /* @var $oModel ProjectEditorModelSensors */
    $oModel =& $this->getModel('Sensors');
    $oSensorTypeArray = $oModel->suggestSensorTypes($strSearchTerm);

    /* @var $oSensorType SensorType */
    foreach($oSensorTypeArray as $iIndex=>$oSensorType){
      if($oSensorType){
        $strSensorTypeList .= $oSensorType->getName();
        if($iIndex < 10){
          $strSensorTypeList .= "\n";
        }
      }
    }

    echo $strSensorTypeList;
  }

  /**
   * @return string
   */
  function getLocationPlanList(){
    $strLocationPlanList = "";

    $strSearchTerm	= JRequest::getVar('term');
    $iExperimentId      = JRequest::getInt('experimentId',0);
    if(!$iExperimentId){
      echo "Experiment not provided";
      return;
    }

    /* @var $oModel ProjectEditorModelSensors */
    $oModel =& $this->getModel('Sensors');
    $oLocationPlanArray = $oModel->suggestLocationPlans($iExperimentId, $strSearchTerm);

    /* @var $oLocationPlan LocationPlan */
    foreach($oLocationPlanArray as $iIndex=>$oLocationPlan){
      if($oLocationPlan){
        $strLocationPlanList .= $oLocationPlan->getName();
        if($iIndex < 10){
          $strLocationPlanList .= "\n";
        }
      }
    }

    echo $strLocationPlanList;
  }
  
  function addMaterial(){
    $strMaterialName = JRequest::getVar('material');
    $strMaterialType = JRequest::getVar('type');
    $strMaterialDesc = JRequest::getVar('desc');
    
    $oMaterialsModel =& $this->getModel('Materials');
    
    $oMaterial = new Material();
    $oMaterial->setName($strMaterialName);
    $oMaterial->setDescription($strMaterialDesc);
    
    $oMaterialType = null;
    
    //get the material type
    $oMaterialType = $oMaterialsModel->findMaterialTypeByDisplayName($strMaterialType);
    if(!$oMaterialType){
      $oMaterialType = new MaterialType();
      $oMaterialType->setDisplayName($strMaterialType);
      
      $strSystemName = strtolower($strMaterialType);
      $strSystemName = str_replace(" ", "_", $strSystemName);
      $oMaterialType->setSystemName($strSystemName);	
    }
    $oMaterial->setMaterialType($oMaterialType);
    
    $oMaterialArray = null;
    if(isset($_SESSION["materials"])){
      $oMaterialArray = $_SESSION["materials"];
    }else{
      $oMaterialArray = array();
    }
    
    array_push($oMaterialArray, serialize($oMaterial));
    $_SESSION["materials"] = $oMaterialArray;
    
    JRequest::setVar( 'view', 'materials' );
    JRequest::setVar( 'format', 'ajax' );
    parent::display();
  }
  
  function add(){
    $strInputField = JRequest::getVar('name');
    $strInputFieldValue = JRequest::getVar('value');
    
    if(isset($_SESSION[$strInputField])){
      $strInputArray = $_SESSION[$strInputField];
    }else{
      $strInputArray = array();
    }
    
    array_push($strInputArray, $strInputFieldValue);
    $_SESSION[$strInputField] = $strInputArray;
    
    JRequest::setVar( 'view', 'add' );
    JRequest::setVar( 'format', 'ajax' );
    parent::display();
  }
  
  function addPair(){
    $strInputField1 = JRequest::getVar('field1');
    $strInputFieldValue1 = JRequest::getVar('value1');
    
    $strInputField2 = JRequest::getVar('field2');
    $strInputFieldValue2 = JRequest::getVar('value2');
    
    if(isset($_SESSION[$strInputField1])){
      $strInputArray = $_SESSION[$strInputField1];
    }else{
      $strInputArray = array();
    }
    
    $oTuple = new Tuple($strInputFieldValue1, $strInputFieldValue2, $strInputField1, $strInputField2);
    array_push($strInputArray, $oTuple);
    $_SESSION[$strInputField1] = serialize($strInputArray);
    
    JRequest::setVar( 'view', 'addpair' );
    JRequest::setVar( 'format', 'ajax' );
    parent::display();
  }
  
  function remove(){
  	$strInputField = JRequest::getVar('name');
    $iArrayIndex = JRequest::getVar('value');

    //get the current field array
    $strInputArray = $_SESSION[$strInputField];
    
    //remove the selected element
    unset($strInputArray[$iArrayIndex]);
   
    //save the current field array
    $_SESSION[$strInputField] = $strInputArray;
    
    JRequest::setVar( 'view', 'add' );
    JRequest::setVar( 'format', 'ajax' );
    parent::display();
  }
  
  function removeMaterial(){
  	$strInputField = JRequest::getVar('name');
    $iArrayIndex = JRequest::getVar('value');

    //get the current field array
    $strInputArray = $_SESSION[$strInputField];
    
    //remove the selected element
    unset($strInputArray[$iArrayIndex]);
   
    //save the current field array
    $_SESSION[$strInputField] = $strInputArray;
    
    JRequest::setVar( 'view', 'materials' );
    JRequest::setVar( 'format', 'ajax' );
    parent::display();
  }

  /**
   * Creates the required objects for previewing a new Project.
   */
  function previewNewProject(){
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelProject */
    $oModel =& $this->getModel('Project');

    /*
     * Step 1: Create the Project
     */
    $strOwner = JRequest::getVar("owner", "");
    try{
      $strOwner = $oModel->validateText("PI", $strOwner);
    }catch(ValidationException $oException) {
      array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
    }

    $strAdmin = JRequest::getVar("itperson", "");
    try{
      $strAdmin = $oModel->validateText("Administrator", $strAdmin);
    }catch(ValidationException $oException) {
      array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
    }

    if(empty($strErrorArray)){
      /*
       * get the user info
       */

      //extract the username from the pi and admin strings, e.g. lname, fname (myusername)
      $strOwnerArray = explode(" ", $strOwner);
      $strOwnerUsername = end($strOwnerArray);
      $strOwnerUsername = str_replace("(", "", $strOwnerUsername);
      $strOwnerUsername = str_replace(")", "", $strOwnerUsername);
      
      //while testing with jrowley, his user triggered an error.  
      //catch and report the problem.
      $oPiJuser =& JFactory::getUser($strOwnerUsername);
      try{
        if($oPiJuser->id){
          $_SESSION[ProjectEditor::PROJECT_OWNER_USERNAME] = $strOwnerUsername;
        }
      }catch(Exception $e1){
        $strError = "Errors with PI account.  Please submit a ticket.";
        array_push($strErrorArray, $strError);
      }

      $strAdminArray = explode(" ", $strAdmin);
      $strAdminUsername = end($strAdminArray);
      $strAdminUsername = str_replace("(", "", $strAdminUsername);
      $strAdminUsername = str_replace(")", "", $strAdminUsername);

      //while testing with jrowley, his user triggered an error.
      //catch and report the problem.
      $oAdminJuser =& JFactory::getUser($strAdminUsername);
      try{
        if($oAdminJuser->id){
          $_SESSION[ProjectEditor::PROJECT_ADMIN_USERNAME] = $strAdminUsername;
        }
      }catch(Exception $e1){
        $strError = "Errors with Admin account.  Please submit a ticket.";
        array_push($strErrorArray, $strError);
      }
      
      /* @var $oOwnerPerson Person */
      $oOwnerPerson = $oModel->getOracleUserByUsername($strOwnerUsername);
      $strContactName = $oOwnerPerson->getFirstName()." ".$oOwnerPerson->getLastName();
      $strContactEmail = $oOwnerPerson->getEMail();
      $iCreatorId = $oOwnerPerson->getId();

      /* @var $oAdminPerson Person */
      $oAdminPerson = $oModel->getOracleUserByUsername($strAdminUsername);
      $strSysAdminName = $oAdminPerson->getFirstName()." ".$oAdminPerson->getLastName();
      $strSysAdminEmail = $oAdminPerson->getEMail();

      $strTitle = JRequest::getVar("title", "");
      try{
        $strTitle = $oModel->validateText("Title", $strTitle);
      }catch(ValidationException $oException) {
        array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
      }

      if(ProjectPeer::isDuplicatedTitle($strTitle)){
        $oException = new ValidationException("Title is already taken.");
        array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
      }

      $strShortTitle = JRequest::getVar("shortTitle", "");
      try{
        $strShortTitle = $oModel->validateText("Short Title", $strShortTitle);
      }catch(ValidationException $oException) {
        array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
      }

      if(ProjectPeer::isDuplicatedNickname($strShortTitle)){
        $oException = new ValidationException("Short name is already taken.");
        array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
      }

      $strStartDate = JRequest::getVar("startdate", "");
      try{
        $strStartDate = $oModel->validateText("Start Date", $strStartDate);
      }catch(ValidationException $oException) {
        array_push($strErrorArray, $oException->getEntityMessage("Create Project"));
      }

      $strEndDate = $oModel->validateEndDate(JRequest::getVar("enddate"));
      $strDescription = JRequest::getVar("description", "");

      $strAccess = "";
      $iAccess = JRequest::getInt("access", 4);
      switch($iAccess){
        case 0: $strAccess = "PUBLIC"; break;
        case 3: $strAccess = "USERS"; break;
        default: $strAccess = "MEMBERS";
      }

      $strSponsor = "A";
      $strAward = "B";
      $strAcknowledgement = "C";
      $strProjectName = "";

      $iNeesProject = JRequest::getInt("nees", 0);
      $iProjectTypeId = JRequest::getInt("type", ProjectPeer::CLASSKEY_STRUCTUREDPROJECT);

      $oProject = $oModel->createProject($strTitle, $strDescription, $strContactName, $strContactEmail,
                                       $strSysAdminName, $strSysAdminEmail, $strStartDate, $strEndDate,
                                       $strAcknowledgement, $strAccess, $iProjectTypeId, $iNeesProject, $strShortTitle,
                                       $strSponsor, $strAward, $strProjectName, $iCreatorId);
      $_SESSION[ProjectPeer::TABLE_NAME] = serialize($oProject);

      /*
       * Step 2: Add the Organizations
       */
//      $strOrganization = JRequest::getVar("organization", "");
//
//      $strOrganizationArray = array();
//      if(isset($_SESSION["organization"])){
//        $strOrganizationArray = $_SESSION["organization"];
//      }
//      //$oProject = $oModel->setOrganizations($oProject, $strOrganization, $strOrganizationArray);
//      $oProjectOrganizationArray = $oModel->setOrganizations($oProject, $strOrganization, $strOrganizationArray);
//      $_SESSION[ProjectOrganizationPeer::TABLE_NAME] = serialize($oProjectOrganizationArray);

      $oProjectOrganizationArray = array();
      $strOrganizationNameArray = $_POST['organization'];
      while (list ($key,$strOrganizationName) = @each ($strOrganizationNameArray)) {
        if(StringHelper::hasText($strOrganizationName)){
          /* @var $oOrganization Organization */  
          $oOrganization = $oModel->findOrganizationByName($strOrganizationName);
          if(!$oOrganization){
            array_push($strErrorArray, $strOrganizationName. " is not a valid organization.");
          }

          $oProjectOrganization = new ProjectOrganization(null, $oOrganization);
          if(!$oModel->containsProjectOrganization($oProjectOrganization, $oProjectOrganizationArray)){
            array_push($oProjectOrganizationArray, $oProjectOrganization);
          }
        }
      }
      $_SESSION[ProjectOrganizationPeer::TABLE_NAME] = serialize($oProjectOrganizationArray);

      /*
       * Step 3: Add the Sponsors
       */
      $strSponsor = JRequest::getVar("sponsor", "");
      $strAward = JRequest::getVar("award", "");
      $strAwardUrl = JRequest::getVar("awardUrl", "");

      $oSponsorTupleArray = array();
      if(isset($_SESSION["sponsor"])){
        $oSponsorTupleArray = unserialize($_SESSION["sponsor"]);
      }
      $oProjectGrantArray = $oModel->setSponsors($oProject, $strSponsor, $strAward, $strAwardUrl, $oSponsorTupleArray);
      $_SESSION[ProjectGrantPeer::TABLE_NAME] = serialize($oProjectGrantArray);

      /*
       * Step 4: Add the Websites
       */
      $strWebsiteName = JRequest::getVar("website", "");
      $strWebsiteUrl = JRequest::getVar("url", "");
      $oWebsiteArray = array();
      if(isset($_SESSION["website"])){
        $oWebsiteArray = $_SESSION["website"];
      }
      $oProjectUrlArray = $oModel->setWebsites($oProject, $strWebsiteName, $strWebsiteUrl, $oWebsiteArray);
      $_SESSION[ProjectHomepagePeer::TABLE_NAME] = serialize($oProjectUrlArray);

      /*
       * Step 5: Add the Tags
       */
      $oReasearcherKeywordArray = array();

      $strTags = JRequest::getVar("tags", "");
      if(StringHelper::hasText($strTags)){
        $strTagsArray = explode(",", $strTags);
        $oReasearcherKeywordArray = $oModel->setTags($strTagsArray, $strOwnerUsername);
      }
      $_SESSION[ResearcherKeywordPeer::TABLE_NAME] = serialize($oReasearcherKeywordArray);

      //upload project file to temp directory
      $strTmpFileName = $_FILES[ProjectEditor::UPLOAD_FIELD_NAME]['tmp_name'];
      if(empty($strErrorArray) && StringHelper::hasText($strTmpFileName)){
        JPluginHelper::importPlugin( 'project', 'upload' );
        $oDispatcher =& JDispatcher::getInstance();
        $strParamArray = array(0,0);
        $strResultsArray = $oDispatcher->trigger('onPhotoUpload',$strParamArray);
        $strFileName = $strResultsArray[0];
        if(StringHelper::hasText($strFileName)){
          $_SESSION[ProjectEditor::PHOTO_NAME] = $strFileName;

          $strCaption = JRequest::getVar("desc", "");
          if(!StringHelper::hasText($strCaption)){
            $strCaption = StringHelper::neat_trim($oProject->getDescription(), 25);  
          }
          $_SESSION[ProjectEditor::PHOTO_CAPTION] = $strCaption;

          $iUsageTypeId = JRequest::getInt('usageType');
          $_SESSION[ProjectEditor::PHOTO_USAGE_TYPE_ID] = $iUsageTypeId;
        }
      }
    }

    $strView = "preview";
    if(!empty($strErrorArray)){
      $strView = "project";

      $_REQUEST["title"] = $strTitle;
      $_REQUEST["shortTitle"] = $strShortTitle;
      $_REQUEST["startdate"] = (StringHelper::hasText($strStartDate)) ? $strStartDate : date("m/d/Y");
      $_REQUEST["enddate"] = (StringHelper::hasText($strEndDate)) ? $strEndDate : "mm/dd/yyyy";
      $_REQUEST["organization"] = (StringHelper::hasText($strOrganization)) ? $strOrganization : StringHelper::EMPTY_STRING;
      $_REQUEST["sponsor"] = (StringHelper::hasText($strSponsor)) ? $strSponsor : "NSF";
      $_REQUEST["award"] = (StringHelper::hasText($strAward)) ? $strAward : "Award Number";
      $_REQUEST["website"] = (StringHelper::hasText($strWebsiteName)) ? $strWebsiteName : $strShortTitle;
      $_REQUEST["url"] = (StringHelper::hasText($strWebsiteUrl)) ? $strWebsiteUrl : ProjectEditor::DEFAULT_PROJECT_URL;
      $_REQUEST["description"] = (StringHelper::hasText($strDescription)) ? $strDescription : StringHelper::EMPTY_STRING;
      $_REQUEST["access"] = (StringHelper::hasText($strAccess)) ? $iAccess : 4;
      $_REQUEST["nees"] = (StringHelper::hasText($iNeesProject)) ? $iNeesProject : 1;
    }

    $_REQUEST["ERRORS"] = $strErrorArray;
    JRequest::setVar( 'view', $strView );
    parent::display();
  }

  /**
   * Creates the required objects for previewing a new Project.
   */
  function previewExistingProject(){
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelProject */
    $oModel =& $this->getModel('Project');

    $oHubUser = $oModel->getCurrentUser();

    /*
     * Step 1: Create the Project
     */
    $iProjectId = JRequest::getVar("projectId");
    
    /* @var $oProject Project */
    $oProject = $oModel->getProjectById($iProjectId);
    if(!$oProject){
      echo ProjectEditor::PROJECT_ERROR_MESSAGE;
      return;
    }

    $strTitle = JRequest::getVar("title");
    try{
      $strTitle = $oModel->validateText("Title", $strTitle);
    }catch(ValidationException $oException) {
      array_push($strErrorArray, $oException->getEntityMessage("Edit Project"));
    }

    $strShortTitle = JRequest::getVar("shortTitle");
    try{
      $strShortTitle = $oModel->validateText("Short Title", $strShortTitle);
    }catch(ValidationException $oException) {
      array_push($strErrorArray, $oException->getEntityMessage("Edit Project"));
    }

    $strStartDate = JRequest::getVar("startdate");
    try{
      $strStartDate = $oModel->validateText("Start Date", $strStartDate);
    }catch(ValidationException $oException) {
      array_push($strErrorArray, $oException->getEntityMessage("Edit Project"));
    }

    $strEndDate = $oModel->validateEndDate(JRequest::getVar("enddate"));
    $strDescription = JRequest::getVar("description");

    $strAccess = "";
    $iAccess = JRequest::getVar("access");
    switch($iAccess){
      case 0:
        $strAccess = "PUBLIC";
      break;

      case 3:
        $strAccess = "USERS";
      break;

      default:
        $strAccess = "MEMBERS";
    }

    $iNeesProject = JRequest::getVar("nees");

    $iProjectTypeId = JRequest::getVar("type");

    $oProject->setDescription($strDescription);
    $oProject->setView($strAccess);
    $oProject->setNEES($iNeesProject);
    $oProject->setNickname($strShortTitle);
    $oProject->setStartDate($strStartDate);
    if(StringHelper::hasText($strEndDate)){
      $oProject->setEndDate($strEndDate);
    }

    $_SESSION[ProjectPeer::TABLE_NAME] = serialize($oProject);

    /*
     * Step 2: Add the Organizations
     */
    $strOrganization = JRequest::getVar("organization");
    
    $strOrganizationArray = array();
    if(isset($_SESSION["organization"])){
      $strOrganizationArray = $_SESSION["organization"];
    }

    $oProjectOrganizationArray = $oModel->setOrganizations($oProject, $strOrganization, $strOrganizationArray);
    $_SESSION[ProjectOrganizationPeer::TABLE_NAME] = serialize($oProjectOrganizationArray);

    /*
     * Step 3: Add the Sponsors
     */
    $strSponsor = JRequest::getVar("sponsor", "");
    $strAward = JRequest::getVar("award", "");
    $strAwardUrl = JRequest::getVar("awardUrl", "");

    $oSponsorTupleArray = array();
    if(isset($_SESSION["sponsor"])){
      $oSponsorTupleArray = unserialize($_SESSION["sponsor"]);
    }
    $oProjectGrantArray = $oModel->setSponsors($oProject, $strSponsor, $strAward, $strAwardUrl, $oSponsorTupleArray);
    $_SESSION[ProjectGrantPeer::TABLE_NAME] = serialize($oProjectGrantArray);

    /*
     * Step 4: Add the Websites
     */
    $strWebsiteName = JRequest::getVar("website", "");
    $strWebsiteUrl = JRequest::getVar("url", "");
    $oWebsiteArray = array();
    if(isset($_SESSION["website"])){
      $oWebsiteArray = unserialize($_SESSION["website"]);
    }
    $oProjectUrlArray = $oModel->setWebsites($oProject, $strWebsiteName, $strWebsiteUrl, $oWebsiteArray);
    $_SESSION[ProjectHomepagePeer::TABLE_NAME] = serialize($oProjectUrlArray);

    /*
     * Step 5: Add the Tags
     */
    $oReasearcherKeywordArray = array();

    $strTags = JRequest::getVar("tags", "");
    if(StringHelper::hasText($strTags)){
      $strTagsArray = explode(",", $strTags);
      $oReasearcherKeywordArray = $oModel->setTags($strTagsArray, $oHubUser->username);
    }
    $_SESSION[ResearcherKeywordPeer::TABLE_NAME] = serialize($oReasearcherKeywordArray);

    //upload project file and scale
    if(empty($strErrorArray)){

    }

    $strView = "preview";
    if(!empty($strErrorArray)){
      $strView = "project";

      $_REQUEST["title"] = $strTitle;
      $_REQUEST["shortTitle"] = $strShortTitle;
      $_REQUEST["startdate"] = (StringHelper::hasText($strStartDate)) ? $strStartDate : date("m/d/Y");
      $_REQUEST["enddate"] = (StringHelper::hasText($strEndDate)) ? $strEndDate : "mm/dd/yyyy";
      $_REQUEST["organization"] = (StringHelper::hasText($strOrganization)) ? $strOrganization : StringHelper::EMPTY_STRING;
      $_REQUEST["sponsor"] = (StringHelper::hasText($strSponsor)) ? $strSponsor : "NSF";
      $_REQUEST["award"] = (StringHelper::hasText($strAward)) ? $strAward : "Award Number";
      $_REQUEST["website"] = (StringHelper::hasText($strWebsiteName)) ? $strWebsiteName : $strShortTitle;
      $_REQUEST["url"] = (StringHelper::hasText($strWebsiteUrl)) ? $strWebsiteUrl : "https://neeshub.org/warehouse/project/[id]";
      $_REQUEST["description"] = (StringHelper::hasText($strDescription)) ? $strDescription : StringHelper::EMPTY_STRING;
      $_REQUEST["access"] = (StringHelper::hasText($strAccess)) ? $iAccess : 4;
      $_REQUEST["nees"] = (StringHelper::hasText($iNeesProject)) ? $iNeesProject : 1;
    }

    $_REQUEST["ERRORS"] = $strErrorArray;
    JRequest::setVar( 'view', $strView );
    parent::display();
  }

  /**
   *
   */
  function editProject(){
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelProject */
    $oModel =& $this->getModel('Project');

    /* @var $oProject Project */
    $oProject = unserialize($_SESSION[ProjectPeer::TABLE_NAME]);
    if(!$oProject){
      echo ProjectEditor::PROJECT_ERROR_MESSAGE;
      return;
    }

    try{
      $oProject->save();
      $_SESSION[ProjectEditor::ACTIVE_PROJECT] = $oProject->getId();
    }catch(Exception $oSaveProjectException){
      array_push($strErrorArray, "Create Project - Unable to save project.");
    }

    
    if( empty($strErrorArray)){
      /*
       *
       */
      try{
        $oProjectOrganizationArray = unserialize($_SESSION[ProjectOrganizationPeer::TABLE_NAME]);
        if(!empty($oProjectOrganizationArray)){
          $oModel->deleteProjectOrganizationByProject($oProject->getId());
          $oModel->createProjectOrganizations($oProject, $oProjectOrganizationArray);
        }
      }catch(Exception $oCreateProjectOrganizationException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectOrganization.");
      }

      /*
       *
       */
      try{
        $oProjectGrantArray = unserialize($_SESSION[ProjectGrantPeer::TABLE_NAME]);
        if(!empty($oProjectGrantArray)){
          $oModel->deleteGrantsByProject($oProject->getId());
          $oModel->createProjectGrants($oProject, $oProjectGrantArray);
        }
      }catch(Exception $oCreateProjectGrantException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectGrant.");
      }

      /*
       *
       */
      try{
        $oProjectUrlArray = unserialize($_SESSION[ProjectHomepagePeer::TABLE_NAME]);
        if(!empty($oProjectUrlArray)){
          $oModel->deleteWebsitesByProject($oProject->getId());
          $oModel->createProjectHomepages($oProject, $oProjectUrlArray);
        }
      }catch(Exception $oCreateProjectHomepageException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectHomepage.");
      }

      /*
       * 
       */
      $oReasearcherKeywordArray = unserialize($_SESSION[ResearcherKeywordPeer::TABLE_NAME]);
      try{
        if(!empty($oReasearcherKeywordArray)){
          $oModel->deleteTagsByEntity($oProject->getId(), 1);
          $oModel->createResearcherKeywords($oProject, $oReasearcherKeywordArray);
        }
      }catch(Exception $oCreateProjectKeywordsException){
        array_push($strErrorArray, "Create Project - Unable to save ReasearcherKeyword.");
        echo $oCreateProjectKeywordsException->getMessage()."";
      }
    }//end createNewProject

    if(empty($strErrorArray)){
      $this->setRedirect("/warehouse/projecteditor/project/".$oProject->getId()."/experiments");
    }else{
      $strView = "project";
      $_REQUEST["ERRORS"] = $strErrorArray;
      JRequest::setVar( 'view', $strView );
      parent::display();
    }

  }

  /**
   *
   */
  function createNewProject(){
    $strErrorArray = array();

    $strOwnerUsername = $_SESSION[ProjectEditor::PROJECT_OWNER_USERNAME];
    $strAdminUsername = $_SESSION[ProjectEditor::PROJECT_ADMIN_USERNAME];

    /* @var $oModel ProjectEditorModelProject */
    $oModel =& $this->getModel('Project');

    /* @var $oProject Project */
    $oProject = unserialize($_SESSION[ProjectPeer::TABLE_NAME]);
    try{
      $oProject->save();
      $_SESSION[ProjectEditor::ACTIVE_PROJECT] = $oProject->getId();

      //TODO: Figure out why project.fundorg and project.fundorgprojid
      //fails insert on empty string
//      $oProject->setFundorg(StringHelper::EMPTY_STRING);
//      $oProject->setFundorgProjId(StringHelper::EMPTY_STRING);
//      $oProject->save();
    }catch(Exception $oSaveProjectException){
      array_push($strErrorArray, "Create Project - Unable to save project.");
    }

    //get the keywords.  if all goes well, we will use it twice.
    $oReasearcherKeywordArray = unserialize($_SESSION[ResearcherKeywordPeer::TABLE_NAME]);

    $strProjectName = "";
    if( empty($strErrorArray) && $oProject->getId() > 0 ){
      $iProjectId = $oProject->getId();
      $strProjectName = sprintf("NEES-%04s-%04d",date("Y"), $iProjectId);
      $oProject->setName($strProjectName);

      /*@var $oOwnerPerson Person */
      $oOwnerPerson = $oModel->getOracleUserByUsername($strOwnerUsername);

      //create the authorization entry for the pi
      $oPiAuthorization = $oModel->createAuthorization($oOwnerPerson->getId(), $oProject->getId());

      //create the person_entity_role entry for the pi
      $oPersonEntityRole = $oModel->createPersonEntityRole($oOwnerPerson->getId(), $oProject->getId(), "Principal Investigator");

      if($strAdminUsername){
        /*@var $oAdminPerson Person */
        $oAdminPerson = $oModel->getOracleUserByUsername($strAdminUsername);

        //create the authorization entry for the sys admin
        $oAdminAuthorization = $oModel->createAuthorization($oAdminPerson->getId(), $oProject->getId());

        //create the person_entity_role entry for the sys admin
        $oPersonEntityRole = $oModel->createPersonEntityRole($oAdminPerson->getId(), $oProject->getId(), "IT Administrator");
      }

      /*
       *
       */
      try{
        $oProjectOrganizationArray = unserialize($_SESSION[ProjectOrganizationPeer::TABLE_NAME]);
        $oModel->createProjectOrganizations($oProject, $oProjectOrganizationArray);
      }catch(Exception $oCreateProjectOrganizationException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectOrganization.");
      }

      /*
       *
       */
      try{
        $oProjectGrantArray = unserialize($_SESSION[ProjectGrantPeer::TABLE_NAME]);
        $oModel->createProjectGrants($oProject, $oProjectGrantArray);
      }catch(Exception $oCreateProjectGrantException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectGrant.");
      }

      /*
       *
       */
      try{
        $oProjectUrlArray = unserialize($_SESSION[ProjectHomepagePeer::TABLE_NAME]);
        $oModel->createProjectHomepages($oProject, $oProjectUrlArray);
      }catch(Exception $oCreateProjectHomepageException){
        array_push($strErrorArray, "Create Project - Unable to save ProjectHomepage.");
      }

      /*
       *
       */
      try{
        //$oModel->createResearcherKeywords($oProject, $oReasearcherKeywordArray);
        $oModel->createResearcherKeywords($oProject->getId(), 1, $oReasearcherKeywordArray);
      }catch(Exception $oCreateProjectKeywordsException){
        array_push($strErrorArray, "Create Project - Unable to save ReasearcherKeyword.");
        echo $oCreateProjectKeywordsException->getTraceAsString()."<br>";
      }
    }//end createNewProject

    /*
     * Create directories
     */
    if( empty($strErrorArray) && StringHelper::hasText($strProjectName) ){
      $oProjectDir = FileCommandAPI::create("/$strProjectName");
      $oProjectDir->mkdir(TRUE);

      $fileDoc = FileCommandAPI::create("/$strProjectName/Documentation");
      $fileDoc->mkdir(TRUE);

      $filePub = FileCommandAPI::create("/$strProjectName/Public");
      $filePub->mkdir(TRUE);

      $fileAna = FileCommandAPI::create("/$strProjectName/Analysis");
      $fileAna->mkdir(TRUE);
      
      $strProjectPath = "/nees/home/$strProjectName.groups";

      if(isset($_SESSION[ProjectEditor::PHOTO_NAME])){
        $strImageFileName = $_SESSION[ProjectEditor::PHOTO_NAME];
        $strImageCaption = $_SESSION[ProjectEditor::PHOTO_CAPTION];
        $iUsageTypeId = $_SESSION[ProjectEditor::PHOTO_USAGE_TYPE_ID];

        //create the source
        $oHubUser = $oModel->getCurrentUser();
        $strSourcePath = ProjectEditor::PROJECT_UPLOAD_DIR."/".$oHubUser->username."/".$strImageFileName;

        //create the destination
        $strDestinationPath = $strProjectPath.ProjectEditor::PHOTO_DESTINATION_SUFFIX;
        $oFileCommand = FileCommandAPI::create($strDestinationPath);
        $oFileCommand->mkdir(TRUE);

        //if destination file exists, remove original
        $bCopied = copy($strSourcePath, $strDestinationPath."/".$strImageFileName);
        if($bCopied){
          unlink($strSourcePath);
        }

        //setup the plugin
        JRequest::setVar('name', $strImageFileName);
        JRequest::setVar('title', $oProject->getTitle());
        JRequest::setVar('desc', $strImageCaption);
        JRequest::setVar('path', $strDestinationPath);
        JRequest::setVar('usageType', $iUsageTypeId);
        JRequest::setVar('fixPermissions', 0);

        //execute plugin
        JPluginHelper::importPlugin( 'project', 'upload' );
        $oDispatcher =& JDispatcher::getInstance();
        $strParamArray = array(0,0);
        $strResultsArray = $oDispatcher->trigger('onProjectPhotoUpload',$strParamArray);
        
      }


      FileHelper::fixPermissions($strProjectPath);
    }

    if(empty($strErrorArray)){
      /*
       * Create group
       */
      try{
        $bAddAdmin = false;

        $oPiJuser =& JFactory::getUser($strOwnerUsername);
        $oAdminJuser =& JFactory::getUser($strAdminUsername);
        if($oAdminJuser){
          //we have an admin user, make sure that it's not the pi
          if($oPiJuser->id != $oAdminJuser->id){
            $bAddAdmin = true;
          }
        }

        //PI and admin are different users. Add both to group
        if($bAddAdmin){
          $oModel->createNewGroup($oProject, $oReasearcherKeywordArray, $oPiJuser, $oAdminJuser);
        }else{
          //Just add the PI to the group
          $oModel->createNewGroup($oProject, $oReasearcherKeywordArray, $oPiJuser);
        }
      }catch(Exception $oCreateGroupException){
        array_push($strErrorArray, "Create Project - Unable to create project group");
      }
    }

    if(empty($strErrorArray)){
      $this->setRedirect("/warehouse/projecteditor/project/".$iProjectId."/experiments");
    }else{
      $strView = "project";
      $_REQUEST["ERRORS"] = $strErrorArray;
      JRequest::setVar( 'view', $strView );
      parent::display();
    }

  }

  /**
   *
   */
  function previewNewExperiment(){
    $strErrorArray = array();
    $oModel =& $this->getModel('PreviewExp');

    //get the current project
    $iProjectId = JRequest::getVar('projid');
    $oProject = $oModel->getProjectById($iProjectId);

    /*
     * Validate required fields
     */
    $strTitle = null;
    try{
      $strTitle = $oModel->validateText("Title", JRequest::getVar("title"));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create Experiment"));
    }

    $strStartDate = null;
    try{
      $strStartDate = $oModel->validateText("Start Date", JRequest::getVar("startdate"));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create Experiment"));
    }
    
    $strEndDate = $oModel->validateEndDate(JRequest::getVar("enddate"));
    $strDescription = JRequest::getVar("description", StringHelper::EMPTY_STRING);

    $strStatus = "unpublished";
    $oExperimentDomain = null;
    $strCurationStatus = "Uncurated";
    $iDeleted = 0;

    $strAccess = StringHelper::EMPTY_STRING;
    $iAccess = JRequest::getVar("access");
    switch($iAccess){
      case 0:
        $strAccess = "PUBLIC";
      break;
      case 3:
        $strAccess = "MEMBERS";
      break;
      default:
        $strAccess = "PRIVATE";
    }

    $oExperiment = new StructuredExperiment( $oProject, $strTitle,
                            StringHelper::EMPTY_STRING, $strDescription,
                            $strStartDate, $strEndDate, $strStatus, $strAccess,
                            $oExperimentDomain, $strCurationStatus, $iDeleted);

//    $oExperiment->setName(ExperimentPeer::getNextAvailableName($oExperiment));
//    $oExperiment->save();

    //create some Experiment attributes
    if(empty($strErrorArray)){
      try{
        $oSpecimen = $oModel->setSpecimenType($oProject, JRequest::getVar("specimenType"));

        $oEquipmentArray = null;
        if(isset($_REQUEST['equipment'])){
          $oEquipmentArray = $oModel->setEquipmentArray($_REQUEST['equipment']);
        }

        $strFacilityArray = array();
        if(isset($_SESSION["facility"])){
          $strFacilityArray = $_SESSION["facility"];
        }
        $oExperiment = $oModel->setFacility($oExperiment, JRequest::getVar("facility"), $strFacilityArray);

        //TODO: Set Materials

        //save values
        $_SESSION[SpecimenPeer::TABLE_NAME] = serialize($oSpecimen);
        $_SESSION['EQUIPMENT_ARRAY'] = serialize($oEquipmentArray);
        $_SESSION[ExperimentPeer::TABLE_NAME] = serialize($oExperiment);
      }catch(ValidationException $oException){
        array_push($strErrorArray, getEntityMessage("Experiment"));
      }
    }

    //go to the appropriate view
    $strView = "previewexp";
    if(!empty($strErrorArray)){
      $_REQUEST["ERRORS"] = $strErrorArray;

      $strView = "experiment";
      
      JRequest::setVar("strTitle", JRequest::getVar("title"), StringHelper::EMPTY_STRING);
      JRequest::setVar("strDescription", JRequest::getVar("description", StringHelper::EMPTY_STRING));
      JRequest::setVar("strStartDate", JRequest::getVar("startdate", StringHelper::EMPTY_STRING));
      JRequest::setVar("strEndDate", JRequest::getVar("enddate", "mm/dd/yyyy"));
      JRequest::setVar("strFacility", JRequest::getVar("facility", StringHelper::EMPTY_STRING));
      JRequest::setVar("strSpecimenType", JRequest::getVar("specimenType", StringHelper::EMPTY_STRING));
      JRequest::setVar("strMaterial", JRequest::getVar("material", "Material name"));
      JRequest::setVar("strMaterialType", JRequest::getVar("materialType", "Material type"));
      JRequest::setVar("strMaterialDesc", JRequest::getVar("materialDesc", "Material description"));
    }
    JRequest::setVar("view", $strView);
    JRequest::setVar("projid", $iProjectId);
    parent::display();
  }

  /**
   * a) Add a member to a project and experiments or
   * b) Edit information about an existing person.
   *
   * For clean update, first, remove all roles and authorizations.
   * Then, insert new roles and authorizations.
   *
   * Make sure that at least 1 member has full access.
   */
  public function saveMember(){
    $_SESSION["MEMBER_ERRORS"] = null;
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelEditMember */
    $oModel =& $this->getModel('EditMember');

    $iProjectId = JRequest::getInt("projectId",0);
    $iPersonId = JRequest::getInt("personId",0);
    $iRoleId = JRequest::getInt("role",0);

    $oCurrentRoleArray = array();
    if(isset($_SESSION["USER_ROLES"])){
      $oCurrentRoleArray = unserialize($_SESSION["USER_ROLES"]);
    }
    //echo 'current roles: <br>';
    //var_dump($oCurrentRoleArray);
    //echo '<br>';

    /* @var $oProject Project */
    $oProject = $oModel->getProjectById($iProjectId);
    if(!$oProject){
      array_push( $strErrorArray, "Project not provided." );
    }

    /* @var $oEditPerson Person */
    $oEditPerson = $oModel->getPersonById($iPersonId);
    if(!$oEditPerson){
      array_push( $strErrorArray, "Person not provided." );
    }

    $bNewMember = false;
    $oExistingProjectRoleArray = $oEditPerson->getRolesForEntity($oProject);
    //echo 'existing roles: <br>';
    //var_dump($oExistingProjectRoleArray);
    //echo '<br>';
    if(empty($oExistingProjectRoleArray)){
      $bNewMember = true;
    }

    if(empty($strErrorArray)){
      //clean out any previous roles
      $oEditPerson->removeFromEntity($oProject);

      /* @var $oDefaultRole Role */
      $oDefaultRole = null;
      $oRoleArray = array();
      if($iRoleId === 0){
        $oDefaultRole = RolePeer::getDefaultRoleByEntityTypeId($iProjectId);
        array_push( $oRoleArray, $oDefaultRole );
      }else{
        $oDefaultRole = RolePeer::retrieveByPK($iRoleId);
        array_push( $oRoleArray, $oDefaultRole );
      }

      $oInsertRoleArray = array_merge($oCurrentRoleArray, $oRoleArray);
      //echo 'insert roles: <br>';
      //var_dump($oInsertRoleArray);
      //echo '<br>';
      foreach($oInsertRoleArray as $oThisRole){
        /* @var $oThisRole Role */
        if($oThisRole){
          $oEditPerson->addRoleForEntity($oThisRole, $oProject);
        }
      }

      // Make sure that at least one member has all permissions
      $forceGrantall = $oModel->shouldDisableRevocation($oEditPerson, $oProject);

      // Explicitly set permissions, if they're overridden from the Role-based defaults
      // make sure they have at least 'view' access
      $oPermissions = new Permissions(Permissions::PERMISSION_VIEW);

      if ( JRequest::getVar("canEdit") || $forceGrantall) {
        $oPermissions->setPermission(Permissions::PERMISSION_EDIT );
      }
      if ( JRequest::getVar("canDelete") || $forceGrantall) {
        $oPermissions->setPermission(Permissions::PERMISSION_DELETE );
      }
      if ( JRequest::getVar("canCreate") || $forceGrantall) {
        $oPermissions->setPermission(Permissions::PERMISSION_CREATE );
      }
      if ( JRequest::getVar("canGrant") || $forceGrantall) {
        $oPermissions->setPermission(Permissions::PERMISSION_GRANT );
      }

      /* @var $oAuthorization Authorization */
      $oAuthorization = new Authorization($oEditPerson->getId(), $oProject->getId(), 1, $oPermissions);
      $oAuthorization->save();

      // allow the project member has same access to all experiments
      if ( JRequest::getVar("copyToExp") ) {
        $oExperimentArray = $oProject->getExperiments();

        /* @var $oExperiment Experiment */
        foreach ($oExperimentArray as $oExperiment) {
          $oEditPerson->removeFromEntity($oExperiment);
          if(
            ! AuthorizationPeer::insertProjectAuthsForAllExperiments($oProject->getId(), $oExperiment->getId(),$oEditPerson->getId()) ||
            ! PersonEntityRolePeer::insertProjectPERforAllExperiments($oProject->getId(), $oExperiment->getId(),$oEditPerson->getId())){
            array_push($strErrorArray, $oExperiment->getName()." - Authorization and Role errors. ");
          }
        }
      }

      if($bNewMember && empty($strErrorArray)){
        /* $oModel->inviteWarehouseMemberToHubGroup($oProject, $oEditPerson); */
        $oModel->addWarehouseMemberToHubGroup($oProject, $oEditPerson);
      }//end if bNewMember

    }//end if empty

    $_SESSION["MEMBER_ERRORS"] = $strErrorArray;
    $strUrl = "/warehouse/projecteditor/project/".$oProject->getId()."/members";
    $this->setRedirect($strUrl);
  }

  /**
   *
   * @param Project $p_oProject
   * @param Person $p_oEditPerson
   */
  public function removeMember(){
    $strErrorArray = array();

    //Incoming
    $iPersonId = JRequest::getInt('personId', 0);
    if(!$iPersonId){
      echo "<p class='error'>Member not selected.</p>";
      return;
    }

    $iProjectId = JRequest::getInt('projectId', 0);
    if(!$iProjectId){
      echo "<p class='error'>Project not selected.</p>";
      return;
    }

    /* @var $oModel ProjectEditorModelEditMember */
    $oModel =& $this->getModel('EditMember');

    /* @var $p_oEditPerson Person */
    $p_oEditPerson = $oModel->getPersonById($iPersonId);

    /* @var $p_oProject Project */
    $p_oProject = $oModel->getProjectById($iProjectId);

    $oThisUser = $oModel->getCurrentUser();

    /* @var $auth Authorizer */
    $auth = Authorizer::getInstance();
    $auth->setUser($oThisUser->username);
    $can_grant = $auth->canGrant($p_oProject);

    if(!$can_grant) {
      array_push($strErrorArray, "Error: You do not have permission to revoke the membership of members on this project.");
    }

    // remove person from repository (oracle)
    if(!$oModel->shouldDisableRevocation($p_oEditPerson, $p_oProject)) {
      try {

        // First, remove the membership from all experiments in the project
        $oExperiments = $p_oProject->getExperiments();
        foreach ($oExperiments as $e) {
          $p_oEditPerson->removeFromEntity($e);
        }

        // Then remove the membership from this project
        $p_oEditPerson->removeFromEntity($p_oProject);
      }catch (Exception $e) {
        array_push($strErrorArray, "Error: Cannot revoke the membership of this user on the project. Unknown error.");
      }
      //exit($editPersonId);
    } else {
      array_push($strErrorArray, "Error: Cannot revoke the only full-permissions member on this project.");
    }

    // remove perosn from hub group (mysql)
    ximport('xgroup');
    ximport('xuserhelper');

    //get group cn
    $strGroupCn = str_replace("-",  "_",  $p_oProject->getName());
    $strGroupCn = strtolower(trim($strGroupCn));

    // Load the group
    $group = new XGroup();
    $group->select( $strGroupCn );

    //get invitee hub id
    $oMemberJuser =& JFactory::getUser($p_oEditPerson->getUserName());
    if(!$oMemberJuser){
      array_push($strErrorArray, "Error: Selected user is not a member of the group.");
    }
    $oGroupMemberArray = array($oMemberJuser->get('id'));

    // Remove users from members list
    $group->remove('members', $oGroupMemberArray);
    $group->save();

    if(empty($strErrorArray)){
      echo "Person deleted";
      return;
    }else{
      echo "<ul>";
      foreach($strErrorArray as $strError){
        echo "<li>$strError</li>";  
      }
      echo "</ul>";
      return;
    }
//    $_SESSION["MEMBER_ERRORS"] = $strErrorArray;
//    $strUrl = "/warehouse/projecteditor/project/".$p_oProject->getId()."/members";
//    $this->setRedirect($strUrl);
  }

  public function uploadForm(){
    JRequest::setVar("view", "uploadform");
    JRequest::setVar("format", "ajax");
    parent::display();
  }

  public function uploadFile(){
    $oModel =& $this->getModel('Project');

    $strUrl = "";

    //Incoming
    $iUploadType = JRequest::getInt('uploadType', 0);
    $strPath = JRequest::getVar('path');
    if(!$strPath){
      echo "Destination path not found.";
      return;  
    }
    $_REQUEST[Files::CURRENT_DIRECTORY] = $strPath;
    $iProjectId = JRequest::getInt('projId', 0);
    $iExperimentId = JRequest::getInt('experimentId',0);
    if(!$iExperimentId){
      echo "Experiment not found in controller::uploadFile.";
      return;
    }

    //invoke the upload plugin
    JPluginHelper::importPlugin( 'project', 'upload' );
    $oDispatcher =& JDispatcher::getInstance();
    $strParamArray = array(0,0);

    switch ($iUploadType){
      case Files::DRAWING:
        $oResultsArray = $oDispatcher->trigger('onDrawingUpload',$strParamArray);
        $strUrl = "/warehouse/projecteditor/project/$iProjectId/experiment/$iExperimentId/drawings?path=$strFilePath";
	break;
      case Files::DATA:
        $oResultsArray = $oDispatcher->trigger('onDataUpload',$strParamArray);
        if(!empty($oResultsArray)){
          /* @var $oDataFile DataFile */
          $oDataFile = unserialize($oResultsArray[0]);
          if($oDataFile){
            $strFileName = $oDataFile->getName();
            $strFilePath = $oDataFile->getPath();
            $strSource = $strFilePath."/".$strFileName;

            //get the file's extension
            $uploadedFileNameParts = explode('.', $strFileName);
            $uploadedFileExtension = array_pop($uploadedFileNameParts);
            
            //validate extension
            $extOk = false;
            $validFileExts = explode(',', ProjectEditor::VALID_IMAGE_EXTENSIONS);
            foreach($validFileExts as $key => $value){
              if( preg_match("/$value/i", $uploadedFileExtension ) ){
                $extOk = true;
              }
            }

            //check mime type
            if($extOk){
              $okMIMETypes = 'image/jpeg,image/pjpeg,image/png,image/x-png,image/gif';
              $validFileTypes = explode(",", $okMIMETypes);

              //if the source file has a width, height, and ok MIME, scale
              $imageinfo = getimagesize($strSource);
              if( is_int($imageinfo[0]) && is_int($imageinfo[1]) &&  in_array($imageinfo['mime'], $validFileTypes) ){
                $_REQUEST[DataFilePeer::TABLE_NAME] = serialize($oDataFile);
                $oResultsArray = $oDispatcher->trigger('onScaleImageDataFile',$strParamArray);
              }
            }
          }
        }
        $strUrl = "/warehouse/projecteditor/project/$iProjectId/experiment/$iExperimentId/data?path=$strFilePath";
	break;
      case Files::IMAGE:
        break;
      default :
        break;
    }

    $this->setRedirect($strUrl);
  }

  public function saveAbout(){
    $_SESSION["ERRORS"] = null;
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelExperiment */
    $oModel =& $this->getModel('Experiment');

    //get the current project
    $iProjectId = JRequest::getVar('projid');
    $oProject = $oModel->getProjectById($iProjectId);

    $oExperimentDomain = null;
    $iExperimentDomainId = 0;
    try{
      $iExperimentDomainId = $oModel->validateText("Domain", JRequest::getVar("experimentDomainId"));
      $oExperimentDomain = $oModel->getExperimentDomainById($iExperimentDomainId);
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create Experiment"));
    }

    /*
     * Validate required fields
     */
    $strTitle = null;
    try{
      $strTitle = $oModel->validateText("Title", JRequest::getVar("title"));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create Experiment"));
    }

    $strStartDate = null;
    try{
      $strStartDate = $oModel->validateText("Start Date", JRequest::getVar("startdate"));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create Experiment"));
    }

    $strEndDate = $oModel->validateEndDate(JRequest::getVar("enddate"));

    $strDescription = JRequest::getVar("description", StringHelper::EMPTY_STRING);

    $strStatus = "unpublished";
    $strCurationStatus = "Uncurated";
    $iDeleted = 0;
    $strAccess = "MEMBERS";


    $iExperimentId = JRequest::getInt('experimentId');
    if($iExperimentId > 0){
      $oExperiment = $oModel->getExperimentById($iExperimentId);  
    }else{
      $oExperiment = new StructuredExperiment( $oProject, $strTitle,
                            StringHelper::EMPTY_STRING, $strDescription,
                            $strStartDate, $strEndDate, $strStatus, $strAccess,
                            $oExperimentDomain, $strCurationStatus, $iDeleted);
      $oExperiment->setName(ExperimentPeer::getNextAvailableName($oExperiment));
    }

    $oExperiment->save();

    /*
     * save specimen for project.  ellen thinks that this should be for
     * experiments.  we will have to change data modal.
     *
     * both title and description are required by oracle.  display only
     * shows the name.
     */
    $strSpecimenType = JRequest::getVar("specimenType");
    if(StringHelper::hasText($strSpecimenType)){
      $oSpecimenArray = SpecimenPeer::findByProject($oProject->getId());
      $bCreate = true;
      if(!empty($oSpecimenArray)){
        foreach($oSpecimenArray as $oThisSpecimen){
          $strThisSpecimenName = $oThisSpecimen->getName();
          if($strThisSpecimenName){
            if($strThisSpecimenName == $strSpecimenType){
              $bCreate = false;
            }
          }
        }
      }

      if($bCreate){
        $oSpecimen = new Specimen();
        $oSpecimen->setProject($oProject);
        $oSpecimen->setName($strSpecimenType);
        $oSpecimen->setTitle($strSpecimenType);
        $oSpecimen->save();
      }
    }

    //create some Experiment attributes
    $strFacility = JRequest::getVar("facility", StringHelper::EMPTY_STRING);
    if(empty($strErrorArray)){
      try{
        $strFacilityArray = array();
        if(isset($_SESSION["facility"])){
          $strFacilityArray = $_SESSION["facility"];
        }

        // add facilities
        $oExperiment = $oModel->addFacilities($oExperiment, JRequest::getVar("facility"), $strFacilityArray);

        // add equipment
        $oExperimentEquipmentArray = $oModel->addEquipment($oExperiment, $_REQUEST['equipment']);
                
        //save values
        $_SESSION[ExperimentPeer::TABLE_NAME] = serialize($oExperiment);
      }catch(ValidationException $oException){
        array_push($strErrorArray, getEntityMessage("Experiment"));
      }
    }

    $oHubUser = $oModel->getCurrentUser();
    $strTags = JRequest::getVar("tags", "");
    if(StringHelper::hasText($strTags)){
      $strTagsArray = explode(",", $strTags);
      $oReasearcherKeywordArray = $oModel->setTags($strTagsArray, $oHubUser->username);
      try{
        $oModel->createResearcherKeywords($oExperiment->getId(), 3, $oReasearcherKeywordArray);
      }catch(Exception $oCreateProjectKeywordsException){
        array_push($strErrorArray, "Create Project - Unable to save ReasearcherKeyword.");
        echo $oCreateProjectKeywordsException->getTraceAsString();
        return;
      }
    }

    if(empty($strErrorArray)){

      $oHubUser = $oModel->getCurrentUser();

      /* @var $oCreator Person */
      $oCreator = $oModel->getOracleUserByUsername($oHubUser->username);

      $creatorId = $oCreator->getId();
      $entityId = $oExperiment->getId();
      $entityTypeId = DomainEntityType::ENTITY_TYPE_EXPERIMENT;

      $projRoles = $oCreator->getRolesForEntity($oExperiment->getProject());

      // give them a default role to match their project role
      foreach($projRoles as $role) {
        $oCreator->addRoleForEntity($role, $oExperiment);
      }

      // Explicitly set permissions
      $auth = new Authorization($creatorId, $entityId, $entityTypeId, new Permissions(Permissions::PERMISSION_ALL));
      $auth->save();

      $expdir = $oExperiment->getPathname();

      $this->makedir(array(
          $expdir,
          "$expdir/Documentation",
          "$expdir/Public",
          "$expdir/Analysis",
          "$expdir/Setup",
          "$expdir/N3DV",
          "$expdir/Models"));

      $requiredN3DVFiles = array('container1.iv', 'default_behaviors.bhv', 'moment.iv', 'disp.iv');
      $n3dvTarget = FileCommandAPI::create("$expdir/N3DV");

      //upload the photo
      $strImageFileName = $_FILES[ProjectEditor::UPLOAD_FIELD_NAME]['name'];
      if(StringHelper::hasText($strImageFileName)){
        $strDestinationPath = $expdir.ProjectEditor::PHOTO_DESTINATION_SUFFIX;
        $oFileCommand = FileCommandAPI::create($strDestinationPath);
        $oFileCommand->mkdir(TRUE);

        $strCaption = JRequest::getVar("desc", "");
        if(!StringHelper::hasText($strCaption)){
          $strCaption = StringHelper::neat_trim($oExperiment->getDescription(), 25);
        }

        JRequest::setVar('title', $oExperiment->getTitle());
        JRequest::setVar('desc', $strCaption);
        JRequest::setVar('path', $strDestinationPath);
        JRequest::setVar('fixPermissions', 0);

        //execute plugin
        JPluginHelper::importPlugin( 'project', 'upload' );
        $oDispatcher =& JDispatcher::getInstance();
        $strParamArray = array(0,0);

        $strResultsArray = $oDispatcher->trigger('onExperimentPhotoUpload',$strParamArray);
      }

      FileHelper::fixPermissions($expdir);

//      foreach($requiredN3DVFiles as $n3dv_file) {
//        $origin = FileCommandAPI::create('/opt/central/htdocs/downloads/N3DV/' . $n3dv_file);
//        $origin->copy($n3dvTarget);
//      }

      CoordinateSpace::createDefaultCoordSpace($oExperiment);
    }

    $strUrl = "/warehouse/projecteditor/project/".$oProject->getId().
                        "/experiment/".$oExperiment->getId()."/materials";
    if(!empty($strErrorArray)){
      $strUrl = "/warehouse/projecteditor/project/".$oProject->getId().
                        "/experiment/0/about?title=".$strTitle."&description=".$strDescription.
                        "&startdate=".$strStartDate."&enddate=".$strEndDate.
                        "&facility=".$strFacility;
      $_SESSION["ERRORS"] = $strErrorArray;
    }
    $_SESSION[ExperimentPeer::TABLE_NAME] = serialize($oExperiment);
    $this->setRedirect($strUrl);
  }

  public function saveMaterial(){
    $_SESSION["ERRORS"] = null;
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelMaterials */
    $oModel =& $this->getModel('Materials');

    $iProjectId = JRequest::getVar('projid');
    $oProject = $oModel->getProjectById($iProjectId);

    //get the current experiment
    $iExperimentId = JRequest::getVar('experimentId');
    $oExperiment = $oModel->getExperimentById($iExperimentId);
    
    
    //validate incoming
    $iMaterialId = JRequest::getInt('materialId', 0);

    /* @var $oMaterialType MaterialType */
    $oMaterialType = null;
    try{
      $iMaterialTypeId = $oModel->validateMaterialType("Material Type", JRequest::getVar('materialType'));
      $oMaterialType = MaterialTypePeer::retrieveByPK($iMaterialTypeId);
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create/Edit Experiment"));
    }

    $strMaterialName = StringHelper::EMPTY_STRING;
    try{
      $strMaterialName = $oModel->validateMaterial("Material Name", JRequest::getVar('material'));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create/Edit Experiment"));
    }

    $strMaterialDesc = StringHelper::EMPTY_STRING;
    try{
      $strMaterialDesc = $oModel->validateMaterialDescription("Material Description", JRequest::getVar('materialDesc'));
    }catch(ValidationException $oException){
      array_push($strErrorArray, $oException->getEntityMessage("Create/Edit Experiment"));
    }

    // no errors, so manipulate the material objects
    if(empty($strErrorArray)){
      $oMaterial = null;
      if(!$iMaterialId){
        $oMaterial = new Material($oExperiment, $oMaterialType, $strMaterialName, $strMaterialDesc);
      }else{
        $oMaterial = $oModel->getMaterialById($iMaterialId);
        $oMaterial->setName($strMaterialName);
        $oMaterial->setDescription($strMaterialDesc);
        $oMaterial->setMaterialType($oMaterialType);
      }

      // TODO: Attach a prototype
      $oPrototype = null;
      $protofield = 'prototype'.$oMaterialType->getId();

      if( JRequest::getVar($protofield) ) {
        $oPrototype = MaterialPeer::find(JRequest::getVar($protofield));
      }
      $oMaterial->setPrototype($oPrototype);
      $oMaterial->save();

      // Remove old material properties.
      $oOldMaterialProperties = $oMaterial->getMaterialProperties();
      foreach( $oOldMaterialProperties as $oOldMaterialProperty ) {
        $oOldMaterialProperty->delete();
      }

      $newprops = array();

      $TypeProperties = $oMaterialType->getMaterialTypeProperties();

      foreach( $TypeProperties as $TypeProperty ) {
        $propertyValue = null;
        $unit = null;
        $fieldname = 'property' . $TypeProperty->getId();
        if( JRequest::getVar($fieldname) ) {
          $propertyValue = JRequest::getVar($fieldname);
        }
        
        // Handle units.
        $category = $TypeProperty->getUnitCategory();
        if( $category ) {
          $unitid = JRequest::getVar('units' . $TypeProperty->getId());
          if( $unitid ) {
            $unit = MeasurementUnitPeer::find($unitid);
          }
          if( !$unit ) {
            //get default unit from experiment
            if(!($unit = $oExperiment->getUnit($category))){
              $units = $category->getUnits();
              $unit = $unit[0];
            }
          }
        }
        // If they used a prototype for this material, use the prototype's name for 'type'
        if( preg_match('/^Type of/', $TypeProperty->getName()) && $oMaterial->getPrototype() ) {
          $propertyValue = $oMaterial->getPrototype()->getName();
        }
        //$newprops->add( new MaterialProperty($TypeProperty, $oMaterial, $propertyValue, $unit) );
        $newprops[] = new MaterialProperty($TypeProperty, $oMaterial, $propertyValue, $unit);
      }//end foreach

      $oMaterial->setMaterialProperties($newprops);
      $oMaterial->save();

      // Handle File uploads.
      if( isset($_FILES) && count($_FILES) ) {
        //$fileCollection = $this->material->getFiles();
        //$dest = $exp->getPathname() . "/" . "Material" . $this->material->getId();
        $dest = $oMaterial->getPathname();

        foreach( $_FILES as $file ) {
          $newdatafile = DataFile::newDataFileByUpload($file, $dest);
          if( $newdatafile ) {
            $matfile = new MaterialFile($oMaterial, $newdatafile );
            $matfile->save();

            //@todo: Check, if we don't need this any more !!!
            //$fileCollection[] = $matfile;
          }
        }

        FileHelper::fixPermissions($dest);

      }//end if files
    }//end if(empty)

    $_SESSION["ERRORS"] = $strErrorArray;
    $strUrl = "/warehouse/projecteditor/project/".$oProject->getId()."/experiment/".$oExperiment->getId()."/materials";
    $this->setRedirect($strUrl);

  }

  private function makedir($dirs) {
    foreach ($dirs as $dir) {
      echo "$dir<br>";
      $dirObj = FileCommandAPI::create($dir);
      $dirObj->mkdir();
    }
  }

  public function saveSensor(){
    $_SESSION["ERRORS"] = null;
    $strErrorArray = array();

    /* @var $oModel ProjectEditorModelSensors */
    $oModel =& $this->getModel('Sensors');

    /* @var $oHubUser JUser */
    $oHubUser = $oModel->getCurrentUser();

    /* @var $auth Authorizer */
    $auth = $oModel->getAuthorizer();
    $auth->setUser($oHubUser->username);

    $strPlanType = "Sensor";

    $iProjectId = JRequest::getInt("projectId", 0);
    if(!$iProjectId){
      echo "Project not selected";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "Experiment not selected";
      return;
    }

    /* @var $oExperiment Experiment */
    $oExperiment = $oModel->getExperimentById($iExperimentId);

    $iLocationPlanId = JRequest::getInt("locationPlanId", 0);
    if(!$iLocationPlanId){
      echo "Sensor list not selected";
      return;
    }

    /* @var $oLocationPlan LocationPlan */
    $oLocationPlan = $oModel->findLocationPlanById($iLocationPlanId);

    /*
    $targetClass = $this->getTargetClass();

    $lpName = JRequest::getVar('lpName');
    $lpName = trim($lpName);

    // truncate the plan name so that it does not exceed 255 characters
    if(strlen($lpName) > 255){
      array_push($strErrorArray, "Location Plan Name may not exceed 255 characters.");
    }

    if($lpName == ""){
      array_push($strErrorArray, "Location Plan Name cannot be empty.");
    }

    $oLocationPlan = null;
    $lpid = JRequest::getVar('lpid');
    if($lpid){
      //edit
      if( ! $auth->canDelete( $oExperiment) && $request->getProperty('delete')) {
        array_push($strErrorArray, "You don't have permission to delete Location Plan in this experiment");
      }

      if( ! $auth->canEdit( $oExperiment)) {
        array_push($strErrorArray, "You don't have permission to edit Location Plan in this experiment");
      }

      $oLocationPlan = LocationPlanPeer::find($lpid);

      if( !$oLocationPlan){
        array_push($strErrorArray, "Could not find the Location Plan (lpid = $lpid)");
      }
      if($oLocationPlan->getExperimentId() != $iExperimentId) {
        array_push($strErrorArray, "This Location Plan (lpid = $lpid) does not belong to Experiment (expid = $iExperimentId");
      }

      $planTypeId = $oLocationPlan->getPlanTypeId();
      $targetClass = ($planTypeId == LocationPlanPeer::CLASSKEY_SENSORLOCATIONPLAN) ? "SensorLocation" : "SourceLocation";

      $oLocationPlantype = ($planTypeId == LocationPlanPeer::CLASSKEY_SENSORLOCATIONPLAN) ? "Sensor" : "Source";
    }else{
      //new
      if( ! $auth->canCreate( $oExperiment)) {
        array_push($strErrorArray, "You don't have permission to create a new Location Plan in this experiment");
      }

      $oLocationPlan = null;

      $this->targetClass = $request->getProperty('targetClass');
      if(empty($this->targetClass)) {
        array_push($strErrorArray, "Missing parameter: targetClass: either SensorLocation or SourceLocation");
      }
      $oLocationPlantype = ($this->targetClass == "SensorLocation") ? "Sensor" : "Source";
    }

    if(! $oLocationPlan) {
      $oLocationPlan = new SensorLocationPlan($oExperiment, $lpName);
    } else {
      $oLocationPlan->setName($lpName);
    }

    $oLocationPlan->setTrialId($this->trialid);

    try {
      $oLocationPlan->save();
    } catch (Exception $e) {
      array_push($strErrorArray, "Unable to create or save Location Plan.<br/>");
    }
    */

    $lpid = $oLocationPlan->getId();

    $xyzUnitId       = JRequest::getVar('xyzUnits');
    echo "unitsId:$xyzUnitId<br>";
    $xyzUnit = null;
    
    if( $xyzUnitId ) {
      $xyzUnit = MeasurementUnitPeer::find($xyzUnitId);
    }

    $degreeUnit = MeasurementUnitPeer::findByName('degree');

    // Location Info - these should each represent an array
    $locId           = JRequest::getVar('locId');
    $locType         = JRequest::getVar('Type');
    $locLabel        = JRequest::getVar('Label');
    $coordinateSpace = JRequest::getVar('coordinateSpace');
    $comments        = JRequest::getVar('comments');
    $locX            = JRequest::getVar('locX');
    $locY            = JRequest::getVar('locY');
    $locZ            = JRequest::getVar('locZ');
    $orientI         = JRequest::getVar('orientI');
    $orientJ         = JRequest::getVar('orientJ');
    $orientK         = JRequest::getVar('orientK');

    if(!$locId){
      $locId = array();
    }

    // Get the list of existing Locations on this plan
    $locs = $oModel->findLocationsByPlanId($iLocationPlanId);

    // A Map for all of existing Location in this plan with key is Id
    $locIdMap = array();

    // A Map for all of existing Location in this plan with key is Label
    $locLabelMap = array();

    // A map to all available coordinate spaces in this experiment
    $coorMap = array();

    // A map to all available Sensor/Source Types
    $sTypeMap = array();

    foreach ($locs as $k=>$loc) {
      // delete locations that aren't in the form
      if (! in_array($loc->getId(), $locId)) {
        $loc->delete();
        unset($locs[$k]);
        continue;
      }
//      if ($loc->getId() != $locId) {
//        $loc->delete();
//        unset($locs[$k]);
//        continue;
//      }
      $locIdMap[$loc->getId()] = $loc;
      $locLabelMap[$loc->getLabel()] = $loc->getId();
    }

    $coordinateSpaces = $oModel->getCoodinateSpaces($oExperiment);
    foreach($coordinateSpaces as $coor) {
      $coorMap[$coor->getId()] = $coor;
    }

    $sTypes = SensorTypePeer::findAll();
    foreach($sTypes as $type) {
      $sTypeMap[$type->getName()] = $type;
    }

    // for each row in the form, add or update
    // the corresponding location
    for ($i = 0; $i < count($locId); $i++) {
    //for ($i = 0; $i < 1; $i++) {
      $itemId = ($locId[$i] == -1) ? null : $locId[$i];
      //$itemId = ($locId == -1) ? null : $locId;

      if(empty($locLabel[$i])) {
        array_push($strErrorArray, "One of the location label is empty. Please fix and re-submit.");
        return;
      }

      //Ask Lelli how to deal with duplicate Location Label, return error or just ignore
      if(isset($locLabelMap[$locLabel[$i]]) && $locLabelMap[$locLabel[$i]] != $locId[$i]) {
      //if(isset($locLabelMap[$locLabel[$i]]) && $locLabelMap[$locLabel[$i]] != $locId) {
        array_push($strErrorArray, "Cannot update the label (" . $locLabel[$i] . ") because it is duplicated with other label on this Location Plan. If you are trying to swap the labels on existing locations, please try with a temp label.");
        return;
      }

      //existing Location
      if ($itemId) {
        if(isset($locIdMap[$itemId])) {
          $loc = $locIdMap[$itemId];
          $oldlabel = $loc->getlabel();
        }
        else {
          //should not be happen, but just in case.
          continue;
        }
      }
      //new Location will be inserted
      else {
        $loc = new $targetClass();
        $oldlabel = null;
      }

      list($normalI, $normalJ, $normalK) = Location::normalize( array($orientI[$i], $orientJ[$i], $orientK[$i]) );

      if($normalI === "") $normalI = null;
      if($normalJ === "") $normalJ = null;
      if($normalK === "") $normalK = null;

      $cs = $coorMap[$coordinateSpace[$i]];
      //$cs = $coorMap[$coordinateSpace];

//      if ($strPlanType == "Sensor") {
//        $loc->setSensorType($sTypeMap[$locType[$i]]);
//      } else {
//        $loc->setSourceType($sTypeMap[$locType[$i]]);
//      }

//      echo "typemap keys<br>";
//      $t = array_keys($sTypeMap);
//      print_r($t)."<br>";
//      echo "loc type=".$locType[$i]."<br>";
//      echo "type map[loctype]=".$sTypeMap[$locType[$i]]."<br>";
      $loc->setSensorType($sTypeMap[$locType[$i]]);
      $loc->setLocationPlan($oLocationPlan);
      $loc->setLabel($locLabel[$i]);
      $loc->setX($locX[$i]);
      $loc->setY($locY[$i]);
      $loc->setZ($locZ[$i]);
      $loc->setI($normalI);
      $loc->setJ($normalJ);
      $loc->setK($normalK);
      $loc->setCoordinateSpace($cs);

      echo "system name=".$cs->getSystem()->getName()."<br>";
      if($cs->getSystem()->getName() != "Geographic") {
        $loc->setMeasurementUnitRelatedByXUnit($xyzUnit);
        $loc->setMeasurementUnitRelatedByYUnit($xyzUnit);
        echo "cs=good, ".$xyzUnit->getAbbreviation().", ".$xyzUnit->getId()." <br>";
      }
      else {
        $loc->setMeasurementUnitRelatedByXUnit($degreeUnit);
        $loc->setMeasurementUnitRelatedByYUnit($degreeUnit);
        echo "cs=bad<br>";
      }

      $loc->setMeasurementUnitRelatedByZUnit($xyzUnit);
      $loc->setComment($comments[$i]);

      $loc->save();

      // Add label to the array-key to check duplicate Label for the next Loc
      if($oldlabel) unset($locLabelMap[$oldlabel]);
      $locLabelMap[$locLabel[$i]] = $loc->getId();
    }

//    // A special case in which we are saving the location plan AND uploading sensor locations.
//    if( JRequest::getVar('uploadLocations') == 'true' ) {
//      $redirect = "/?" . $this->query . "lpid=$lpid&action=Upload" . $this->trialAction . "Locations";
//    }
//    else {
//      $redirect = "/?" . $this->query . "lpid=$lpid&action=Display" . $this->trialAction . $this->targetClass . "Plan";
//    }

    $strView = "sensorlist";
    JRequest::setVar( 'view', $strView );
    JRequest::setVar( 'projid', $oExperiment->getProject()->getId() );
    JRequest::setVar( 'experimentId', $iExperimentId );
    JRequest::setVar('locationPlanId', $iLocationPlanId);
    parent::display();

    exit;

  }

  public function removeFile(){
      
  }

  public function makeDirectory(){
    /* @var $oModel ProjectEditorModelMkDir */
    $oModel =& $this->getModel('MkDir');

    //incoming
    $iProjectId = JRequest::getVar("projId");
    $iExperimentId = JRequest::getVar("experimentId");
    $strPath = JRequest::getVar("path");
    $strReferer = JRequest::getVar("referer");
    $strNewDirectory = JRequest::getVar("newdirectory");

    $_REQUEST[Files::PROJECT_NAME] = "";
    
    $oProject = $oModel->getProjectById($iProjectId);
    if($oProject){
      $_REQUEST[Files::PROJECT_NAME] = $oProject->getName();
    }

    $strAbsolutePathofNewDirectory = $strPath."/".$strNewDirectory;

    $_REQUEST[Files::WAREHOUSE] = false;
    $_REQUEST[Files::ABSOLUTE_DIRECTORY_PATH_LIST] = array($strAbsolutePathofNewDirectory);
    if(preg_match("/\/nees\/home/", $strAbsolutePathofNewDirectory)){
      $_REQUEST[Files::WAREHOUSE] = true;
    }
    
    $oModel->makeDirectory(array(0,0));

    $strServerName = $_SERVER['SERVER_NAME'];
    $strTemp = $strReferer."?path=".$strAbsolutePathofNewDirectory;

    $strUrl = str_replace("https://".$strServerName, "", $strTemp);
    $this->setRedirect($strUrl);
  }

  public function saveLocationPlan(){
    $strLocationPlanName = JRequest::getVar('lpName', '');
    $iUnitId = JRequest::getInt('unit', 0);
    $iExperimentId = JRequest::getInt('experimentId', 0);

    if(!$strLocationPlanName || $strLocationPlanName==""){
      echo "Please enter sensor list name.";
      return;
    }

    if(!$iUnitId){
      echo "Please select units.";
      return;
    }
    
    if(!$iExperimentId){
      echo "Please select an experiment.";
      return;  
    }
    
    /* @var $oModel ProjectEditorModelCreateLocationPlan */
    $oModel =& $this->getModel('CreateLocationPlan');
    $oExperiment = $oModel->getExperimentById($iExperimentId);

    try{
      $oLocationPlan = new SensorLocationPlan($oExperiment, $strLocationPlanName);
      $oLocationPlan->save();
    }catch(Exception $e){
      echo "Unable to create or save Sensor List.";
      return;
    }

    echo "Sensor List Created.";
    exit;
  }

  /**
   * Uploads Excel spreadsheets that represent sensors
   * for Sensor Location Plans.  Source Location Plans
   * were removed.
   * 
   */
  public function saveSensorFile(){
    //Incoming
    $strPlanType = "Sensor";
    $iExperimentId = JRequest::getInt('experimentId', 0);
    $iLocationPlanId = JRequest::getInt('locationPlanId', 0);

    if(!$iExperimentId){
      echo "Experiment not provided.";
      return;
    }

    if(!$iLocationPlanId){
      echo "Sensor list not provided.";
      return;
    }

    /* @var $oModel ProjectEditorModelSensors */
    $oModel =& $this->getModel('Sensors');

    /* @var $oExperiment Experiment */
    $oExperiment = $oModel->getExperimentById($iExperimentId);

    /* @var $oLocationPlan LocationPlan */
    $oLocationPlan = $oModel->findLocationPlanById($iLocationPlanId);

    // Keep an array of all of the objects we're creating
    $objectsArray = array();

    if(!isset($_FILES["uploadFile"]['name']) || empty($_FILES["uploadFile"]['name'])) {
      return;
    }

    $newFilePath = "/tmp/" . $_FILES["uploadFile"]["name"];
    move_uploaded_file($_FILES["uploadFile"]["tmp_name"], $newFilePath);

    $reader = new FileUploadReader($newFilePath);

    $cells = $reader->getData();

    if(!is_array($cells)) {
      echo "Unable to parse your uploaded data file. Make sure you are uploading a valid document.<br/>Remember, the accepted formats are Excel (95, 97, 2000, 2003) (*.xls), and comma-delimited text files (*.csv), and tab-delimited text files (*.txt), and XML Speadsheet (*.xml)";
      return;
    }

    $columns = array(1=>"Label",	2=>$strPlanType . "Type",	3=>"Comment",	4=>"X",	5=>"Y",	6=>"Z",	7=>"I",	8=>"J",	9=>"K",	10=>"CoordinateSpace");

    $numRows = count($cells);
    $numCols = isset($cells[1]) ? count($cells[1]) : 0;

    $msg = "Either, the file does not have correct number of columns or column labels are not correct. <br/>These column labels must be: " . implode(", ", $columns) . " <br/>and must be in the same of this order";

    //print_r($columns)."<br>";
    //echo $numCols." vs ".count($columns)."<br>";
    if( $numCols != count($columns)) {
      echo $msg;
      return;
    }

    for ($col = 1; $col <= count($columns); $col++) {
      if( $cells[1][$col] != $columns[$col]) {
        echo $msg;
        return;
      }
    }

    $degreeUnit = MeasurementUnitPeer::findByName('degree');

    $oLocationArray = LocationPeer::findByLocationPlan($oLocationPlan->getId());
    $locLabelMap = array();

    foreach($oLocationArray as $loc) {
      $locLabelMap[$loc->getLabel()] = $loc;
    }

    $defaultUnit = $oModel->findDefaultUnit($oLocationArray, $oExperiment);

    $sTypes = SensorTypePeer::findAll();
    $sTypeNames = array();
    foreach($sTypes as $st) {
      $sTypeNames[strtolower($st->getName())] = $st;
    }


    $coordinateSpaces = CoordinateSpacePeer::findByExperiment($oExperiment->getId());
    $coorNames = array();
    foreach($coordinateSpaces as $coor) {
      $coorNames[strtolower($coor->getName())] = $coor;
    }

    // Start from Line 2, as Line 1 is the header
    for ($row = 2; $row <= $numRows; $row++) {

      $locLabel = $cells[$row][1];

      $sTypeName = $cells[$row][2];

      if( ! isset($sTypeNames[strtolower($sTypeName)])) {
        echo "Error Line $row: " . $strPlanType . "Type cannot be found in database.";
        return;
      }

      $sType = $sTypeNames[strtolower($sTypeName)];

      $comment = $cells[$row][3];
      $locX = $cells[$row][4];
      $locY = $cells[$row][5];
      $locZ = $cells[$row][6];

      $orientI = $cells[$row][7];
      $orientJ = $cells[$row][8];
      $orientK = $cells[$row][9];

      list($normalI, $normalJ, $normalK) = Location::normalize( array($orientI, $orientJ, $orientK) );

      if($normalI === "") $normalI = null;
      if($normalJ === "") $normalJ = null;
      if($normalK === "") $normalK = null;

      if( !is_numeric($locX) || !is_numeric($locY) || !is_numeric($locZ)) {
        echo "Error Line $row: X, Y, Z is required and must be a number.";
        return;
      }

      $coorName = $cells[$row][10];

      if( ! isset($coorNames[strtolower($coorName)])) {
        echo "Error Line $row: CoordinateSpace: '$coorName' associated with this Experiment cannot be found in database.";
        return;
      }
      $coordinateSpace = $coorNames[strtolower($coorName)];

      if(isset($locLabelMap[$locLabel])) {
        $loc = $locLabelMap[$locLabel];
      }
      else {
        $loc = new SensorLocation();
      }

      $loc->setLocationPlan($oLocationPlan);
//      $this->planType == "Sensor" ? $loc->setSensorType($sType) : $loc->setSourceType($sType);
//      $this->planType == "Sensor" ? $loc->setSourceType(null) : $loc->setSensorType(null);
      $loc->setSensorType($sType);
      $loc->setLabel($locLabel);
      $loc->setX($locX);
      $loc->setY($locY);
      $loc->setZ($locZ);
      $loc->setI($normalI);
      $loc->setJ($normalJ);
      $loc->setK($normalK);
      $loc->setCoordinateSpace($coordinateSpace);
      $loc->setComment($comment);

      if($coordinateSpace->getSystem()->getName() != "Geographic") {
        $loc->setMeasurementUnitRelatedByXUnit($defaultUnit);
        $loc->setMeasurementUnitRelatedByYUnit($defaultUnit);
      }
      else {
        $loc->setMeasurementUnitRelatedByXUnit($degreeUnit);
        $loc->setMeasurementUnitRelatedByYUnit($degreeUnit);
      }
      $loc->setMeasurementUnitRelatedByZUnit($defaultUnit);

      if( ! $loc->validate()) {
        $fArray = $loc->getValidationFailures();

        $m = "<ul>";
        foreach($fArray as $v) {
          $m .= "<li>" . $v->getMessage() . "</li>";
        }
        $m .= "</ul>";
        echo "Error Line $row: " . $m;
        return;
      }

      if( is_null($locX)) {
        echo "Error Line $row: X can not be NULL";
        return;
      }

      $objectsArray[] = $loc;
    }

    foreach($objectsArray as $obj) {
      $obj->save();
    }

    $strView = "sensorlist";
    JRequest::setVar( 'view', $strView );
    JRequest::setVar( 'projid', $oExperiment->getProject()->getId() );
    JRequest::setVar( 'experimentId', $iExperimentId );
    JRequest::setVar('locationPlanId', $iLocationPlanId);
    parent::display();
  }

  public function saveDataFile(){
    $iProjectId = JRequest::getInt("projectId" ,0);
    if(!$iProjectId){
      echo "Project not selected.";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "Experiment not selected.";
      return;
    }

    $iDataFileId = JRequest::getInt("dataFileId", 0);
    if(!$iDataFileId){
      echo "Data file not selected.";
      return;
    }

    /* @var $oModel ProjectEditorModelEditDataFile */
    $oModel =& $this->getModel('EditDataFile');

    //edit the data file
    $strTitle = JRequest::getVar("title", "");
    $strDescription = JRequest::getVar("desc","");

    $oDataFile = DataFilePeer::retrieveByPK($iDataFileId);
    $oDataFile->setTitle($strTitle);
    $oDataFile->setDescription($strDescription);
    try{
      $oDataFile->save();
    }catch(Exception $e){
      echo "Unable to save data file.";
      return;
    }

    $strPath = JRequest::getVar("path", "");
    $strUrl = "/warehouse/projecteditor/project/".$iProjectId
                        ."/experiment/".$iExperimentId
                        ."/data";

    if(StringHelper::hasText($strPath)){
      $strUrl .= "?path=".$strPath;
    }

    $this->setRedirect($strUrl);
  }

  public function saveDrawing(){
    $iProjectId = JRequest::getInt("projectId" ,0);
    if(!$iProjectId){
      echo "Project not selected.";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "Experiment not selected.";
      return;
    }

    /* @var $oModel ProjectEditorModelEditDrawing */
    $oModel =& $this->getModel('EditDrawing');

    /* @var $oExperiment Experiment */
    $oExperiment = $oModel->getExperimentById($iExperimentId);

    $iDataFileId = JRequest::getInt("dataFileId", 0);
    
    //use upload plugin
    if($iDataFileId===0){
      JPluginHelper::importPlugin( 'project', 'upload' );
      $oDispatcher =& JDispatcher::getInstance();
      $strParamArray = array(0,0);
      $bResultsArray = $oDispatcher->trigger('onDrawingUpload',$strParamArray);
    }else{
      $strTitle = JRequest::getVar("title", "");
      $strDescription = JRequest::getVar("desc","");
      $iEntityTypeId = JRequest::getVar("usageType","");

      $oDataFile = DataFilePeer::retrieveByPK($iDataFileId);
      $oDataFile->setTitle($strTitle);
      $oDataFile->setDescription($strDescription);
      $oDataFile->setUsageTypeId($iEntityTypeId);
      try{
        $oDataFile->save();
      }catch(Exception $e){
        echo "Unable to save drawing.";
        return;
      }
    }

//    $strView = "drawings";
//    JRequest::setVar( 'view', $strView );
//    JRequest::setVar( 'projid', $oExperiment->getProject()->getId() );
//    JRequest::setVar( 'experimentId', $iExperimentId );
//    parent::display();

    $strUrl = "/warehouse/projecteditor/project/"
                        .$oExperiment->getProject()->getId()
                        ."/experiment/".$oExperiment->getId()
                        ."/drawings";

    $this->setRedirect($strUrl);
  }

  public function saveTrial(){
    //incoming
    $iExperimentId = JRequest::getVar('experimentId','');
    $iTrialId = JRequest::getVar('trialId','');

    $trtitle = trim(JRequest::getVar('title',''));
    $trobj   = trim(JRequest::getVar('objective',''));
    $trdesc  = trim(JRequest::getVar('description',''));
    $startDate = trim(JRequest::getVar('startDate','') );
    $endDate   = trim(JRequest::getVar('endDate',''));
    $s_epoch = $e_epoch = 0;

    //validation
    if (!StringHelper::hasText($trtitle)) {
      $alert = "Please enter a valid Trial Title";
      echo $alert;
      return;
    }

    require_once 'api/org/nees/lib/ui/FormValidator.php';

    if( empty($startDate) ) $startDate = null;
    else {
      $s_epoch = FormValidator::getHubEpochFromString($startDate);

      if($s_epoch == -1) {
        echo "Start date is out of range. NEEShub does not support this date.";
        return;
      }
      elseif($s_epoch == false) {
        echo "Please enter a valid start date. (MM-DD-YYYY)";
        return;
      }
      else {
        $startDate = date("Y-m-d", $s_epoch);
      }
    }

    if( empty($endDate) ) $endDate = null;
    else {
      $e_epoch = FormValidator::getHubEpochFromString($endDate);

      if($e_epoch == -1) {
        $this->setAlertmsg("End date is out of range. NEEShub does not support this date."); return;
      }
      elseif($e_epoch == false) {
        $this->setAlertmsg("Please enter a valid end date. (MM-DD-YYYY)"); return;
      }
      elseif($startDate && $s_epoch > $e_epoch) {
        $this->setAlertmsg("Start date must be before or same as end date"); return;
      }
      else {
        $endDate = date("Y-m-d", $e_epoch);
      }
    }

    /* @var $oModel ProjectEditorModelCreateTrial */
    $oModel =& $this->getModel('CreateTrial');

    /* @var $oExperiment Experiment */
    $oExperiment = $oModel->getExperimentById($iExperimentId);
    if(!$oExperiment){
      echo "Experiment not selected";
      return;
    }

    /* @var $oTrial Trial */
    $oTrial = $oModel->getTrialById($iTrialId);
    if($oTrial){
      $oTrial->setDescription($trdesc);
      $oTrial->setObjective($trobj);
      $oTrial->setTitle($trtitle);
      $oTrial->setStartDate($startDate);
      $oTrial->setEndDate($endDate);

      $oTrial->save();
    }else{
      $oTrial = new Trial(
        $oExperiment,
        TrialPeer::getNextAvailableName($oExperiment),
        $trtitle,
        $trobj,
        $trdesc,
        $startDate,
        $endDate
      );

      $oTrial->save();

      $trialdir = $oTrial->getPathname();

      FileCommandAPI::create("$trialdir")->mkdir();
      FileCommandAPI::create("$trialdir/Configuration")->mkdir();
      FileCommandAPI::create("$trialdir/Analysis")->mkdir();
      FileCommandAPI::create("$trialdir/Documentation")->mkdir();
      FileCommandAPI::create("$trialdir/InputMotion")->mkdir();


      $repetition = new Repetition(
        $oTrial,
        RepetitionPeer::getNextRepetitionName($oTrial),
        $startDate,
        $endDate
      );

      $repetition->save();

      $repdir = $repetition->getPathname();

      FileCommandAPI::create($repdir)->mkdir();
      FileCommandAPI::create("$repdir/Unprocessed_Data")->mkdir();
      FileCommandAPI::create("$repdir/Converted_Data")->mkdir();
      FileCommandAPI::create("$repdir/Corrected_Data")->mkdir();
      FileCommandAPI::create("$repdir/Derived_Data")->mkdir();

      FileHelper::fixPermissions($trialdir);
    }

    $strUrl = "/warehouse/projecteditor/project/"
                        .$oExperiment->getProject()->getId()
                        ."/experiment/".$oExperiment->getId()
                        ."/data";
    $this->setRedirect($strUrl);
  }

  public function saveRepetition(){
    //Incoming
    $iTrialId = JRequest::getInt("trial",0);
    $iRepetitionId = JRequest::getInt("repetition",0);
    $startDate = trim(JRequest::getVar('startDate','') );
    $endDate   = trim(JRequest::getVar('endDate',''));
    $s_epoch = $e_epoch = 0;

    /* @var $oModel ProjectEditorModelCreateRepetition */
    $oModel =& $this->getModel('CreateRepetition');

    /* @var $trial Trial */
    $trial = $oModel->getTrialById($iTrialId);
    if(!trial){
      echo "<p class='error'>Please select or create a Trial.</p>";
      return;
    }

    /* @var $repetition Repetition */
    $repetition = $oModel->getRepetitionById($iRepetitionId);

    ##
    ## form validation
    $alert = "";

    require_once 'api/org/nees/lib/ui/FormValidator.php';

    if( empty($startDate) ) $startDate = null;
    else {
      $s_epoch = FormValidator::getHubEpochFromString($startDate);

      if($s_epoch == -1) {
        echo "Start date is out of range. NEEShub does not support this date.";
        return;
      }
      elseif($s_epoch == false) {
        echo "Please enter a valid start date. (MM/DD/YYYY)";
        return;
      }
      else {
        $startDate = date("Y-m-d", $s_epoch);
      }
    }

    if( empty($endDate) ) $endDate = null;
    else {
      $e_epoch = FormValidator::getHubEpochFromString($endDate);

      if($e_epoch == -1) {
        echo "End date is out of range. NEEShub does not support this date.";
        return;
      }
      elseif($e_epoch == false) {
        echo "Please enter a valid end date. (MM/DD/YYYY)";
        return;
      }
      elseif($startDate && $s_epoch > $e_epoch) {
        echo "Start date must be before or same as end date";
        return;
      }
      else {
        $endDate = date("Y-m-d", $e_epoch);
      }
    }


    if($repetition) {
      $repetition->setStartDate($startDate);
      $repetition->setEndDate($endDate);
    }else {
      $repetition = new Repetition(
        $trial,
        RepetitionPeer::getNextRepetitionName($trial),
        $startDate,
        $endDate
      );
    }
    $repetition->save();

    $repdir = $repetition->getPathname();

    FileCommandAPI::create($repdir)->mkdir(true);
    FileCommandAPI::create("$repdir/Unprocessed_Data")->mkdir();
    FileCommandAPI::create("$repdir/Converted_Data")->mkdir();
    FileCommandAPI::create("$repdir/Corrected_Data")->mkdir();
    FileCommandAPI::create("$repdir/Derived_Data")->mkdir();

    FileHelper::fixPermissions($repdir);

    $strUrl = "/warehouse/projecteditor/project/"
                        .$trial->getExperiment()->getProject()->getId()
                        ."/experiment/".$trial->getExperiment()->getId()
                        ."/data";
    $this->setRedirect($strUrl);
  }

  public function saveDataFileCurateRequest(){
    $iProjectId = JRequest::getInt("projid" ,0);
    if(!$iProjectId){
      echo "<p class='error'>Project not selected.</p>";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "<p class='error'>Experiment not selected.</p>";
      return;
    }

    $iDataFileIdArray = null;
    if(!isset($_POST['dataFile'])){
      echo "<p class='error'>Please select at least 1 directory or file.</p>";
      return;
    }else{
      $iDataFileIdArray=$_POST['dataFile'];
    }

    /* @var $oModel ProjectEditorModelEditDataFile */
    $oModel =& $this->getModel('EditDataFile');

    while (list ($key,$iDataFileId) = @each ($iDataFileIdArray)) {
      /* @var $oDataFile DataFile */
      $oDataFile = $oModel->getDataFileById($iDataFileId);
      $oDataFile->setCurationStatus(ProjectEditor::CURATION_REQUEST);
      $oDataFile->save();

      if($oDataFile->getDirectory()==1){
        $dfs = DataFilePeer::findAllInDir($oDataFile->getFullPath());
        foreach($dfs as $df) {
          /* @var $df DataFile */
          $fullPath = $df->getFullPath();
          if(file_exists($fullPath)) {
            $df->setCurationStatus(ProjectEditor::CURATION_REQUEST);
            $df->save();
          }
        }//end foreach
      }//end if directory
    }//end while

    $strUrl = "/warehouse/projecteditor/project/".$iProjectId
                        ."/experiment/".$iExperimentId
                        ."/data";

    $strPath = JRequest::getVar('path', '');
    if(StringHelper::hasText($strPath)){
      $strUrl .= "?path=".$strPath;
    }
    
    $this->setRedirect($strUrl);
  }

  public function saveSecurity(){
    $iProjectId = JRequest::getInt("projectId" ,0);
    if(!$iProjectId){
      echo "<p class='error'>Project not selected.</p>";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "<p class='error'>Experiment not selected.</p>";
      return;
    }

    /* @var $oModel ProjectEditorModelExperiment */
    $oModel =& $this->getModel('Experiment');

    /* @var $oExperiment Experiment */
    $oExperiment = $oModel->getExperimentById($iExperimentId);
    if(!$oExperiment){
      echo "<p class='error'>Experiment not selected.</p>";
      return;
    }

    $strAccess = "";
    $iAccess = JRequest::getInt("access", 4);
    switch($iAccess){
      case 0: $strAccess = "PUBLIC"; break;
      case 3: $strAccess = "USERS"; break;
      default: $strAccess = "MEMBERS";
    }

    $oExperiment->setView($strAccess);
    $oExperiment->save();

    $strUrl = "/warehouse/projecteditor/project/".$iProjectId
                        ."/experiment/".$iExperimentId
                        ."/security";
    $this->setRedirect($strUrl);
  }

  /**
   *
   * @return <type>
   */
  public function saveFilmstrip(){
    $iProjectId = JRequest::getInt("projid" ,0);
    if(!$iProjectId){
      echo "<p class='error'>Project not selected.</p>";
      return;
    }

    $iExperimentId = JRequest::getInt("experimentId", 0);
    if(!$iExperimentId){
      echo "<p class='error'>Experiment not selected.</p>";
      return;
    }

    $iDataFileIdArray = null;
    if(!isset($_POST['dataFile'])){
      echo "<p class='error'>Please select at least 1 directory or file.</p>";
      return;
    }else{
      $iDataFileIdArray=$_POST['dataFile'];
    }

    /* @var $oModel ProjectEditorModelEditDataFile */
    $oModel =& $this->getModel('EditDataFile');

    //validate extensions
    $strInvalidFileArray = array();
    while (list ($key,$iDataFileId) = @each ($iDataFileIdArray)) {
      /* @var $oDataFile DataFile */
      $oDataFile = $oModel->getDataFileById($iDataFileId);
      $strFileName = $oDataFile->getName();

      //get the file's extension
      $uploadedFileNameParts = explode('.', $strFileName);
      if(count($uploadedFileNameParts) <= 1){
        array_push($strInvalidFileArray, $strFileName);
      }
      $uploadedFileExtension = array_pop($uploadedFileNameParts);

      //validate extension
      $validFileExts = explode(',', ProjectEditor::VALID_IMAGE_EXTENSIONS);
      foreach($validFileExts as $key => $value){
        if( !preg_match("/$value/i", $uploadedFileExtension ) ){
          array_push($strInvalidFileArray, $strFileName);
        }
      }
    }

    if(!empty($strInvalidFileArray)){
      $strInvalidFiles = explode(",", $strInvalidFileArray);
      echo "<p>Invalid file types: $strInvalidFiles</p>";
      return;
    }

    //update and scale
    $iCount = 0;
    while (list ($key,$iDataFileId) = @each ($iDataFileIdArray)) {
      /* @var $oDataFile DataFile */
      $oDataFile = $oModel->getDataFileById($iDataFileId);
      $iEntityTypeId = $oDataFile->getUsageTypeId();
      $oEntityType = EntityTypePeer::retrieveByPK($iEntityTypeId);
      if($oEntityType){
        if($oEntityType->getDatabaseTableName()==ProjectEditor::FILMSTRIP_IMAGE){
          $oDataFile->setUsageTypeId(null);
        }else{
          $oDataFile->setUsageTypeId($iEntityTypeId);

          //invoke the upload plugin
          JPluginHelper::importPlugin( 'project', 'upload' );
          $oDispatcher =& JDispatcher::getInstance();
          $strParamArray = array(0,0);

          $_REQUEST["fixPermissionsLater"] = true;
          $_REQUEST[DataFilePeer::TABLE_NAME] = serialize($oDataFile);
          $oResultsArray = $oDispatcher->trigger('onScaleImageDataFile',$strParamArray);

          ++$iCount;
        }
        $oDataFile->save();
      }
    }//end while

    $strPath = JRequest::getVar('path');
    if($iCount > 0){
      FileHelper::fixPermissions($strPath);
    }

    $strUrl = "/warehouse/projecteditor/project/".$iProjectId
                        ."/experiment/".$iExperimentId
                        ."/data?path=".$strPath;

    $this->setRedirect($strUrl);
  }
	
}

?>