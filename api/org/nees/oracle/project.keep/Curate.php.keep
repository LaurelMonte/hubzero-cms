<?php 

  require_once('api/org/nees/oracle/util/DbHelper.php');
  require_once('api/org/nees/oracle/util/DbParameter.php');
  require_once('api/org/nees/oracle/util/DbStatement.php');
  require_once('api/org/nees/html/CurateHtml.php');
  require_once('neesconfiguration.php');

  class Curate{
  	
  	/**
     * Find all of the documents related to a specified project.
     * There are not any foreign keys that link the project to 
     * its rescpective data file.  The query is performed using 
     * a like clause to find all documents under the directory:
     * /nees/home/<project_name>.groups
     * @param $p_sProjectName - name of the given project
     * @param $p_nDeleted - 0 or 1 for not deleted or removed files.
     * @return collection of rows (array)
     */
    public static function getProjectDocumentsAll($p_sProjectName, $p_nDeleted, $p_oCurationObjectTypeArray, $p_sCurated){
      $sProjectFilePath = "/nees/home/".$p_sProjectName.".groups%";
      $sHasExtension = "%.%";
      
      $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  $sQuery = "select df.id, df.name, SUBSTR(df.path, 33, 100) as path, df.created, to_char(df.DESCRIPTION) as DESCRIPTION, ".
  	  			"df.filesize, df.mime_type, df.thumb_id, co.object_type, co.object_id ".
  		  	    "from ".NeesConfig::ORACLE_SCHEMA.".data_file df, ".
  	  			"     ".NeesConfig::ORACLE_SCHEMA.".curated_objects co ".
  			    "where df.path like :sPath ".
  	  			"  and df.deleted = :nDeleted ".
  	  			"  and df.name like :hasExtension ".
  	  			"  and co.name (+)= df.name ".
  	  			"order by df.path, df.name";
  	  
  	  #bind query and variables
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	  $oDbStatement->bind(":sPath", $sProjectFilePath);
  	  $oDbStatement->bind(":nDeleted", $p_nDeleted);
  	  $oDbStatement->bind(":hasExtension", $sHasExtension);
  	  
  	  #execute query
	  $rowArray = array();
  	  $oResultSet = DbHelper::executeStatement($oConnection, $oDbStatement);
      while ($oResultArray = oci_fetch_array($oResultSet,OCI_BOTH)) {
      	$sFileName = $oResultArray['NAME'];
      	$oResultArray['EXTENTION'] = substr($sFileName, strlen($sFileName)-3, strlen($sFileName));
      	
      	/*
      	 * If the project is uncurated, just display 
      	 * all of the possible object types.  Otherwise, 
      	 * find the selected object type.
      	 */
      	if(strtoupper($p_sCurated)=="UNCURATED"){
      	  $sFileCategoryHtml = CurateHtml::getCurationObjectTypesAsHtml($p_oCurationObjectTypeArray);
      	}else{
      	  $sFileCategoryHtml = CurateHtml::getSelectedCurationObjectTypesAsHtml($p_oCurationObjectTypeArray, $oResultArray['OBJECT_TYPE'], $oResultArray['OBJECT_ID']);
      	}
      	$oResultArray['OBJECT_TYPE'] = $sFileCategoryHtml;
      	
        array_push($rowArray, $oResultArray);
      }
      
  	  DbHelper::close($oConnection);
  	  return $rowArray;
    }//end getProjectDocumentsAll
  
  
    /**
     * Find all of the curation object types
     * @return array of curation object types
     */
    public static function getCurationObjectTypes(){
  	  $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  $sQuery = "select distinct object_type from ".NeesConfig::ORACLE_SCHEMA.".curated_objects";
  	 
  	
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	
  	  #execute query
  	  $rowArray = DbHelper::executeQuery($oConnection, $oDbStatement);
  	  DbHelper::close($oConnection);
  	  return $rowArray;
    }//end getCurationObjectTypes
  
    /**
     * Returns an HTML dropdown string of curation object types
     */
    public static function getSelectedCurationObjectTypesAsHtml($p_oCurationObjectTypeArray, $p_sFoundCurationObjectType, $p_nCurationObjectId){
  	  $sReturn = "<select id=cboCurationObjectId-".$p_nCurationObjectId." name=nCurationObjectId-".$p_nCurationObjectId."  class=\"spreadsheetInput\">";
  	  $sReturn = $sReturn . "<option value=''>-Select-</option>";
  	  
  	  /*
  	   * if we have a found curation object type, compare it to
  	   * the values in the list.  if a match, mark the option 
  	   * object as selected.  
  	   */ 
  	  foreach($p_oCurationObjectTypeArray as $oCurationObjectType){
  	    $sCurationObjectType = $oCurationObjectType['OBJECT_TYPE'];
  	    
  	    $sSelected = "";
  	    if($sCurationObjectType==$p_sFoundCurationObjectType &&
  	       !empty($p_sFoundCurationObjectType)){
  	  	  $sSelected = "selected";
  	    }
  	    $sReturn = $sReturn . "<option ".$sSelected.">".$sCurationObjectType."</option>";
  	  }
  	  $sReturn = $sReturn."</select>";
  	  return $sReturn;
    }//end getCurationObjectTypesAsHtml
    
    /**
     * Returns an HTML dropdown string of curation object types
     */
    public static function getCurationObjectTypesAsHtml($p_oCurationObjectTypeArray){
  	  $sReturn = "<select id=\"cboCurationObjectId\" name=\"nCurationObjectId\"  class=\"spreadsheetInput\">";
  	  $sReturn = $sReturn . "<option value=''>-Select-</option>";
  	  
  	  /*
  	   * if we have a found curation object type, compare it to
  	   * the values in the list.  if a match, mark the option 
  	   * object as selected.  
  	   */ 
  	  foreach($p_oCurationObjectTypeArray as $oCurationObjectType){
  	    $sCurationObjectType = $oCurationObjectType['OBJECT_TYPE'];
  	    $sReturn = $sReturn . "<option>".$sCurationObjectType."</option>";
  	  }
  	  $sReturn = $sReturn."</select>";
  	  return $sReturn;
    }//end getCurationObjectTypesAsHtml
    
    /*
    public static function getHeaders(){
      $sReturn = <<< ENDHTML
        <thead>
          <tr>
            <th>Icon</th>
            <th>Curate</th>
            <th>Done</th>
            <th>Path</th>
            <th>File Name</th>
            <th>Title</th>
            <th>Description</th>
            <th>File Category</th>
            <th>Extension</th>
          </tr>
        </thead>
ENDHTML;
	  return $sReturn;      
    }
    */
    
    /**
     * 
     *
     */
    /*
    public static function getAjaxHandler($p_sLabel, $p_sValue, $p_sEditLink, $p_sSaveLink, $p_sResultDivId){
      $sReturn = "";
      if(!empty($p_sValue)){
        $sReturn = $sReturn . <<< ENDHTML
        $p_sLabel: $p_sValue
        <a href="javascript:void(0);" 
      	   onClick="javascript:getMootools('$p_sEditLink','$p_sResultDivId');">Edit</a>
ENDHTML;
      }else{
      	$sReturn = $sReturn . <<< ENDHTML
        $p_sLabel: 
        <a href="javascript:void(0);" 
      	   onClick="javascript:getMootools('$p_sSaveLink','$p_sResultDivId');">Add</a>
ENDHTML;
      }
      return $sReturn;
    }
    */
    
    /**
     * 
     *
     */
    /*
    public static function getAjaxTextAreaHandler($p_sLabel, $p_sValue, $p_sEditLink, $p_sSaveLink, $p_sResultDivId){
      $sReturn = "";
      if(!empty($p_sValue)){
        $sReturn = $sReturn . <<< ENDHTML
        $p_sLabel: 
        <a href="javascript:void(0);" 
      	   onClick="javascript:getMootools('$p_sEditLink','$p_sResultDivId');">Edit</a>
      	<br>
        $p_sValue   
ENDHTML;
      }else{
      	$sReturn = $sReturn . <<< ENDHTML
        $p_sLabel: 
        <a href="javascript:void(0);" 
      	   onClick="javascript:getMootools('$p_sSaveLink','$p_sResultDivId');">Add</a>
ENDHTML;
      }
      return $sReturn;
    }
    */
    
    /**
     * Find a list of projects by visibility and curation status.
     *
     */
    public static function getProjectsCount($p_nDeleted){
  	  $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  
  	  $sQuery =	"SELECT count(p.projid) as num ". 
  				"from ".NeesConfig::ORACLE_SCHEMA.".project p, ". 
  	  					NeesConfig::ORACLE_SCHEMA.".curatedncidcross_ref cr ". 
  				"WHERE p.deleted=:nDeleted ".
    			"  and cr.neescentral_objectid (+)= p.projid ".
  	  			"  and cr.neescentral_objectid is null";
  	  
  	  #bind query and variables
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	  $oDbStatement->bind(":nDeleted", $p_nDeleted);

	  #execute query
  	  $rowArray = DbHelper::executeQuery($oConnection, $oDbStatement);
  	  DbHelper::close($oConnection);
  	  
  	  if(empty($rowArray[0]['NUM']))
  	    return 0;
  	  
  	  return $rowArray[0]['NUM'];
    }//end getProjectsByCurationStatus
    
    public static function getProjectsWithPagination($p_nDeleted, $p_nCurrentIndex, $p_nDisplaySize){
  	  $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  
  	  #computer lower and upper limits
  	  $nLowerLimit = $p_nCurrentIndex * $p_nDisplaySize;
  	  $nUpperLimit = ($p_nCurrentIndex+1) * $p_nDisplaySize;

	  /* 	
	   * NOTE:
	   * If the display size is 0, the user wants ALL rows.
	   * Thus, the upper limit will be zero, and we can't 	
	   * use the BETWEEN clause.  The search must use  the 
       * greater than row number clause. 	  
	   */
  	  $sQuery =	"SELECT * ". 
				"FROM( ". 
  				"  SELECT p.projid, p.name, p.title, p.viewable, p.curation_status, ".
  	  			"         p.contact_name, p.contact_email, row_number() ". 
  				"  OVER (order by p.name desc) rn ". 
  				"from ".NeesConfig::ORACLE_SCHEMA.".project p, ".
  	  					NeesConfig::ORACLE_SCHEMA.".curatedncidcross_ref cr ". 
  				"WHERE p.deleted=:nDeleted ".
    			"  and cr.neescentral_objectid (+)= p.projid ".
  	  			"  and cr.neescentral_objectid is null".
				") ";
	  if($nUpperLimit != 0){ 
	    $sQuery = $sQuery . "WHERE rn BETWEEN :nLowerLimit and :nUpperLimit "; 
	  }else{
	    $sQuery = $sQuery . "WHERE rn > :nUpperLimit ";            
	  }
	  $sQuery = $sQuery .	"order by name desc";
	  
  	  #bind query and variables
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	  $oDbStatement->bind(":nDeleted", $p_nDeleted);
  	  //$oDbStatement->bind(":sCurationStatus", $p_sCurationStatus);

	  /*
       * See note above about setting search boundaries.
       */
	  if($nUpperLimit != 0)$oDbStatement->bind(":nLowerLimit", $nLowerLimit);
  	  $oDbStatement->bind(":nUpperLimit", $nUpperLimit);
  	  
	  #execute query
  	  $rowArray = DbHelper::executeQuery($oConnection, $oDbStatement);
  	  DbHelper::close($oConnection);
  	  return $rowArray;
    }//end getProjectsByCurationStatusWithPagination
    
    /**
     * Find a list of projects by deleted and curation name.
     *
     */
    public static function getProjectsCountByName($p_nDeleted, $p_sName){
  	  $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  
  	  $sQuery =	"SELECT count(p.projid) as num ". 
  				"from ".NeesConfig::ORACLE_SCHEMA.".project p, ". 
  	  					NeesConfig::ORACLE_SCHEMA.".curatedncidcross_ref cr ". 
  				"WHERE p.deleted=:nDeleted ".
    			"  and upper(p.name) like :sName ".
  	  			"  and cr.neescentral_objectid (+)= p.projid ";
  	  
  	  #bind query and variables
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	  $oDbStatement->bind(":nDeleted", $p_nDeleted);
  	  $oDbStatement->bind(":sName", "%".strtoupper($p_sName)."%");

	  #execute query
  	  $rowArray = DbHelper::executeQuery($oConnection, $oDbStatement);
  	  DbHelper::close($oConnection);
  	  
  	  if(empty($rowArray[0]['NUM']))
  	    return 0;
  	  
  	  return $rowArray[0]['NUM'];
    }//end getProjectsByCurationStatus
    
    /**
     * 
     *
     */
    public static function getProjectsByNameWithPagination($p_sName, $p_nDeleted, $p_nCurrentIndex, $p_nDisplaySize){
      $oConnection = DbHelper::getConnection(NeesConfig::ORACLE_USERNAME, NeesConfig::ORACLE_PASSWORD, NeesConfig::ORACLE_SERVER);
  	  
  	  #computer lower and upper limits
  	  $nLowerLimit = $p_nCurrentIndex * $p_nDisplaySize;
  	  $nUpperLimit = ($p_nCurrentIndex+1) * $p_nDisplaySize;
  	  
  	  $firephp = FirePHP::getInstance(true);
  	  $firephp->log('CurateModelProject(ajax)::getProjectsByNameWithPagination',$p_sName);
  	  $firephp->log('CurateModelProject(ajax)::getProjectsByNameWithPagination-display',$p_nDisplaySize);
  	  $firephp->log('CurateModelProject(ajax)::getProjectsByNameWithPagination-upper',$nUpperLimit);

	  /* 	
	   * NOTE:
	   * If the display size is 0, the user wants ALL rows.
	   * Thus, the upper limit will be zero, and we can't 	
	   * use the BETWEEN clause.  The search must use  the 
       * greater than row number clause. 	  
	   */
  	  $sQuery =	"SELECT * ". 
				"FROM( ". 
  				"  SELECT p.projid, p.name, p.title, p.viewable, p.curation_status, ".
  	  			"         p.contact_name, p.contact_email, cr.neescentral_objectid, row_number() ". 
  				"  OVER (order by p.name desc) rn ". 
  				"from ".NeesConfig::ORACLE_SCHEMA.".project p, ". 
  	  					NeesConfig::ORACLE_SCHEMA.".curatedncidcross_ref cr ". 
  				"WHERE p.deleted=:nDeleted ".
    			"  and upper(p.name) like :sName ".
  	  			"  and cr.neescentral_objectid (+)= p.projid ".
				") ";
	  if($nUpperLimit != 0){ 
	    $sQuery = $sQuery . "WHERE rn BETWEEN :nLowerLimit and :nUpperLimit "; 
	  }else{
	    $sQuery = $sQuery . "WHERE rn > :nUpperLimit ";            
	  }
	  $sQuery = $sQuery .	"order by name desc";
  	  
  	  #bind query and variables
  	  $oDbStatement = new DbStatement();
  	  $oDbStatement->prepareStatement($sQuery);
  	  $oDbStatement->bind(":nDeleted", $p_nDeleted);
  	  $oDbStatement->bind(":sName", "%".$p_sName."%");

	  /*
       * See note above about setting search boundaries.
       */
	  if($nUpperLimit != 0)$oDbStatement->bind(":nLowerLimit", $nLowerLimit);
  	  $oDbStatement->bind(":nUpperLimit", $nUpperLimit);
  	  
	  #execute query
  	  $rowArray = DbHelper::executeQuery($oConnection, $oDbStatement);
  	  DbHelper::close($oConnection);
  	  return $rowArray;	
    }//getProjectsByNameWithPagination
    
    
  }//end class
?>  