<?php

  // include base peer class
  require_once 'lib/data/om/BasePersonEntityRolePeer.php';

  // include object class
  include_once 'lib/data/PersonEntityRole.php';

  require_once 'lib/util/DomainEntityType.php';

/**
 * Skeleton subclass for performing query and update operations on the 'PersonEntityRole' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:06 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class PersonEntityRolePeer extends BasePersonEntityRolePeer {

  /**
   * Find a PersonEntityRole object based on its ID
   *
   * @param int $id
   * @return PersonEntityRole
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all PersonEntityRole Objects
   *
   * @return array <PersonEntityRole>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  /**
   * Find all the PersonEntityRole Objects given by PersonID
   *
   * @param int $person_id
   * @return array of PER Objects
   */
  public static function findByUid($person_id) {

    return self::findByPerson($person_id);
  }



  /**
   * Find all the PersonEntityRole Objects given by PersonID
   *
   * @param int $person_id
   * @return array of PER Objects
   */
  public static function findByPerson($person_id) {

    $c = new Criteria();
    $c->add(self::PERSON_ID, $person_id);

    return self::doSelect($c);
  }



  /**
   * Find all the PersonEntityRole Objects given by PersonID, EntityID, EntityTypeID
   *
   * @param int $person_id
   * @param int $entity_id
   * @param int $entity_type_id
   * @return array of PER Objects
   */
  public static function findByPersonEntityEntityType($person_id, $entity_id, $entity_type_id) {

    $c = new Criteria();
    $c->add(self::PERSON_ID, $person_id);
    $c->add(self::ENTITY_ID, $entity_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);

    return self::doSelect($c);
  }



  /**
   * Find all the PersonEntityRole Objects given by an Entiry (EntityID, EntityTypeID)
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @return array of PER Objects
   */
  public static function findByEntityEntityType($entity_id, $entity_type_id) {

    $c = new Criteria();
    $c->add(self::ENTITY_ID, $entity_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);

    return self::doSelect($c);
  }


  /**
   * Find all the PersonEntityRole Objects given by EntityID, EntityTypeID, and RoleID
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @param int $roleId
   * @return array of PER Objects
   */
  public static function findByEntityEntityTypeRole($entity_id, $entity_type_id, $roleId) {

    $c = new Criteria();
    $c->add(self::ENTITY_ID, $entity_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);
    $c->add(self::ROLE_ID, $roleId);

    return self::doSelect($c);
  }


  /**
   * Find the super PersonEntityRole Object given by PersonID, who has supperRoles (Role 33, 34)
   *
   * @param int $person_id
   * @return PersonEntityRole SuperPER
   */
  public static function findSuperPERsByPerson($person_id) {

    require_once 'lib/data/RolePeer.php';

    $c = new Criteria();
    $c->addJoin(self::ROLE_ID, RolePeer::ID);
    $c->add(self::PERSON_ID, $person_id);
    $c->add(RolePeer::ENTITY_TYPE_ID, 0);
    $c->add(RolePeer::SUPER_ROLE, 1);

    return self::doSelectOne($c);
  }



  /**
   * Find all the PersonEntityRole Objects given by EntityTypeID and PersonID
   * This is really just for use in finding the person's primary organization
   *
   * @param int $person_id
   * @param int $entity_type_id
   * @return array of PER Objects
   */
  public static function findByPersonEntityType($person_id, $entity_type_id) {

    $c = new Criteria();
    $c->add(self::PERSON_ID, $person_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);

    return self::doSelect($c);
  }



  /**
   * Find the PersonEntityRole Object given by PersonID, EntityID, EntityTypeID and RoleID
   *
   * @param int $person_id
   * @param int $entity_id
   * @param int $entity_type_id
   * @param int $roleId
   * @return PersonEntityRole
   */
  public static function findByPersonEntityRole($person_id, $entity_id, $entity_type_id, $roleId) {

    $c = new Criteria();
    $c->add(self::PERSON_ID, $person_id);
    $c->add(self::ENTITY_ID, $entity_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);
    $c->add(self::ROLE_ID, $roleId);

    return self::doSelectOne($c);
  }


  /**
   * Find all the PersonEntityRole Objects given by a Person Object and Entity Object
   *
   * @param Person $person
   * @param BaseObject $entity
   * @return array of PER Objects
   */
  public static function findByPersonEntity(Person $person, BaseObject $entity) {
    return self::findByPersonEntityEntityType($person->getId(), $entity->getId(), DomainEntityType::getEntityTypeId($entity));
  }


  /**
   * Find all the PersonEntityRole Objects given by a Person Object and a Project Object
   *
   * @param Person $person
   * @param Project $project
   * @return array of PER Objects
   */
  public static function findByPersonProject(Person $person, Project $project)  {
    return self::findByPersonEntityEntityType($person->getId(), $project->getId(), DomainEntityType::ENTITY_TYPE_PROJECT);
  }


  /**
   * Find all the PersonEntityRole Objects given by an Entity Object
   *
   * @param BaseObject $entity
   * @return array of PER Objects
   */
  public static function findByEntity(BaseObject $entity) {
    return self::findByEntityEntityType($entity->getId(), DomainEntityType::getEntityTypeId($entity));
  }


  /**
   * Find all the PersonEntityRole Objects given by an Entity Object and a Role Object
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @param int $roleId
   * @return array of PER Objects
   */
  public static function findByEntityRole(BaseObject $entity, Role $role) {
    return self::findByEntityEntityTypeRole($entity->getId(), DomainEntityType::getEntityTypeId($entity), $role->getId());
  }



  /**
   * Insert PersonEntityRoles for all experiments for all other Project members in current Project
   *
   * @param int $projid
   * @param int $expid
   * @param int $person_id
   * @return boolean value: true if successed, flase if failed
   */
  public static function insertExperimentPERforAllProjectMembers($projid, $expid, $person_id) {

    $sql = "INSERT
              INTO person_entity_role (person_id, entity_type_id, entity_id, role_id)
            SELECT
              person_id,
              3 AS entity_type_id,
              ? AS entity_id,
              role_id
            FROM
              PersonEntityRole
            WHERE
              entity_id=? AND
              entity_type_id=1 AND
              person_id<>?";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $expid);
      $stmt->setInt(2, $projid);
      $stmt->setInt(3, $person_id);
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }


  /**
   * Check if the Person is a member of this entity or not
   *
   * @param Person $person
   * @param BaseObject $entity
   * @return Boolean
   */
  public static function isMember($person, $entity) {

    if(is_null($person) || is_null($entity)) return false;

    $entity_id = $entity->getId();
    $entity_type_id = DomainEntityType::getEntityTypeId($entity);

    $c = new Criteria();
    $c->add(self::PERSON_ID, $person->getId());
    $c->add(self::ENTITY_ID, $entity_id);
    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);

    return (self::doCount($c) > 0);
  }


  /**
   * Insert PersonEntityRoles for all experiments for current user in current Project
   *
   * @param int $projid
   * @param int $expid
   * @param int $person_id
   * @return boolean value: true if successed, flase if failed
   */
  public static function insertProjectPERforAllExperiments($projid, $expid, $person_id){

    $sql = "INSERT INTO
              Person_Entity_Role (id, person_id, entity_type_id, entity_id, role_id)
            SELECT
              PERSON_ENTITY_ROLE_SEQ.NEXTVAL,
              per.person_id,
              3 AS entity_type_id,
              ? AS entity_id,
              R2.id
            FROM
              Person_Entity_Role per,
              Role R1,
              Role R2
            WHERE
              R1.entity_type_id = 1 AND
              R2.entity_type_id = 3 AND
              per.Role_id = R1.id AND
              R1.display_name = R2.display_Name AND
              per.entity_id = ? AND
              per.entity_type_id = 1 AND
              per.person_id = ?";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $expid);
      $stmt->setInt(2, $projid);
      $stmt->setInt(3, $person_id);
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }


  /**
   * Clone the Experiment PersonEntityRole to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentPER(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              PERSON_ENTITY_ROLE (ID, PERSON_ID, ROLE_ID, ENTITY_TYPE_ID, ENTITY_ID)
            SELECT
              PERSON_ENTITY_ROLE_SEQ.NEXTVAL,
              PERSON_ID,
              ROLE_ID,
              ENTITY_TYPE_ID,
              ?
            FROM
              PERSON_ENTITY_ROLE
            WHERE
              ENTITY_ID = ? AND
              ENTITY_TYPE_ID = 3 AND
              PERSON_ID IN (SELECT PERSON_ID FROM PERSON_ENTITY_ROLE WHERE ENTITY_ID = ? AND ENTITY_TYPE_ID = 1)";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->setInt(3, $new_exp->getProjectId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }


  /**
   * Cloning PER from Project to Project
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean
   */
  public static function cloneProjectPER(Project $old_proj, Project $new_proj, $members){

    if(is_null($old_proj) || is_null($new_proj)) return false;
    if(!is_array($members) || count($members) == 0) return false;

    $membersStr = implode("," , $members);

    $sql = "INSERT INTO
              PERSON_ENTITY_ROLE (ID, PERSON_ID, ROLE_ID, ENTITY_TYPE_ID, ENTITY_ID)
            SELECT
              PERSON_ENTITY_ROLE_SEQ.NEXTVAL,
              PERSON_ID,
              ROLE_ID,
              ENTITY_TYPE_ID,
              ?
            FROM
              PERSON_ENTITY_ROLE
            WHERE
              ENTITY_ID = ? AND
              ENTITY_TYPE_ID = 1 AND
              PERSON_ID IN ( " . $membersStr . " )";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->set(1, $new_proj->getId());
      $stmt->set(2, $old_proj->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }


} // PersonEntityRolePeer
?>
