<?php

// include base peer class
require_once 'lib/data/om/BaseExperimentFacilityPeer.php';

// include object class
include_once 'lib/data/ExperimentFacility.php';


/**
 * Skeleton subclass for performing query and update operations on the 'ExperimentFacility' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:58 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class ExperimentFacilityPeer extends BaseExperimentFacilityPeer {

  /**
   * Find an ExperimentFacility object based on its ID
   *
   * @param int $id
   * @return ExperimentFacility
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all ExperimentFacilities
   *
   * @return array <ExperimentFacility>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find all ExperimentFacility by an Experiment
   *
   * @param int $expid
   * @return array <ExperimentFacility>
   */
  public static function findByExperiment($expid) {
    $c = new Criteria();
    $c->add(self::EXPID, $expid);

    return self::doSelect($c);
  }


  /**
   * Find all ExperimentFacility given by Facility ID
   *
   * @param int $facilityid
   * @return array <ExperimentFacility>
   */
  public static function findByFacility($facilityid) {
    $c = new Criteria();
    $c->add(self::FACILITYID, $facilityid);

    return self::doSelect($c);
  }


  /**
   * Find ONE ExperimentFacility that matched Experiment ID and Facility ID
   *
   * @param int $expid
   * @param int $facilityid
   * @return ExperimentFacility
   */
  public static function findByExperimentFacility($expid, $facilityid) {
    $c = new Criteria();
    $c->add(self::EXPID, $expid);
    $c->add(self::FACILITYID, $facilityid);

    return self::doSelectOne($c);
  }


  /**
   * Clone the ExperimentFacility to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentFacility(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              Experiment_Facility (ID, FACILITYID, EXPID)
            SELECT
              EXPERIMENT_FACILITY_SEQ.NEXTVAL,
              FACILITYID,
              ?
            FROM
              Experiment_Facility
            WHERE
              EXPID = ?";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }




} // ExperimentFacilityPeer
?>
