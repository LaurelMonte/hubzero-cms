<?php

require_once 'lib/data/om/BaseAuthorization.php';
require_once 'lib/security/Permissions.php';

/**
 * Authorization
 *
 * Authorizations control access to Entities based on explicit Permissions
 *
 * {@link PersonEntityRole} for role-based permissions
 *
 * This class was autogenerated by Propel on: Sat Feb  9 00:02:45 2008
 *
 * @package    lib.data
 * @uses Permissions
 *
 * @todo write test class
 * @todo use Propel API
 *
 */

class Authorization extends BaseAuthorization {

  /**
   * Initializes internal state of Authorization object.
   */

  public function __construct($uid = null,
                              $entity_id = null,
                              $entity_type_id = null,
                              Permissions $permissions = null)
  {
    if ($permissions == null) {
      $permissions = new Permissions(Permissions::PERMISSION_NONE );
    }
    $this->setUid($uid);
    $this->setEntityId($entity_id);
    $this->setEntityTypeId($entity_type_id);
    $this->setPermissions($permissions);
  }


  /**
   * the parent class BaseAuthorization::getPermissionsStr() return a String.
   * We need a function that return the Permissions Object
   *
   * This function will return a Permissions Object
   * @return Permissions Object
   */
  public function getPermissions() {
    $permissionstr = $this->getPermissionsStr();
    return new Permissions(is_null($permissionstr) ? Permissions::PERMISSION_NONE : $permissionstr);
  }


  /**
   * the parent class BaseAuthorization::setPermissionsStr($str) passing a String.
   * We need a function that passing the Permissions Object
   *
   * @param The Permissions Object
   */
  public function setPermissions(Permissions $perm) {
    return $this->setPermissionsStr(is_null($perm) ? Permissions::PERMISSION_NONE : $perm->toString());
  }

  /**
   * if the create permission has been set for this authorization.
   * return TRUE else return FALSE
   *
   * @return boolean
   */
  public function canCreate() {
    if (!$this->getPermissions()) {
      return false;
    }
    return $this->getPermissions()->isPermissionSet(Permissions::PERMISSION_CREATE );
  }

  /**
   * The canView method indicates if the view permission has been set for this authorization.
   *
   * @return boolean
   */

  public function canView() {
    if (!$this->getPermissions()) {
      return false;
    }
    return $this->getPermissions()->isPermissionSet(Permissions::PERMISSION_VIEW );
  }

  /**
   * The canEdit method indicates if the edit permission has been set for this authorization.
   *
   * @return boolean
   * @todo use Propel API
   */

  public function canEdit() {
    if (!$this->getPermissions()) {
      return false;
    }
    return $this->getPermissions()->isPermissionSet(Permissions::PERMISSION_EDIT );
  }

  /**
   * The canDelete method indicates if the delete permission has been set for this authorization.
   *
   * @return boolean
   * @todo use Propel API
   */

  public function canDelete() {
    if (!$this->getPermissions()) {
      return false;
    }
    return $this->getPermissions()->isPermissionSet(Permissions::PERMISSION_DELETE );
  }

  /**
   * The canGrant method indicates if the grant permission has been set for this authorization.
   *
   * @return boolean
   * @todo use Propel API
   */

  public function canGrant() {
    if (!$this->getPermissions()) {
      return false;
    }
    return $this->getPermissions()->isPermissionSet(Permissions::PERMISSION_GRANT );
  }

  /**
   * Test whether the this user has a role with this entity.
   *
   **/
  public function hasRole() {
    $results = PersonEntityRolePeer::findByPersonEntityEntityType($this->getUid(), $this->getEntityId(), $this->getEntityTypeId());
    return count($results) > 0;
  }

  /**
   * Return the Web-Services URL that this instance is accessible at
   *
   * @return String RESTURI
   */
  function getRESTURI() {
    return "/Authorization/{$this->getId()}";
  }

} // Authorization
?>
