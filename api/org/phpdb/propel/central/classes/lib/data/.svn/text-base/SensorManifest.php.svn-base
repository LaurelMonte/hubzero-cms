<?php

require_once 'lib/data/om/BaseSensorManifest.php';
require_once 'lib/data/SensorSensorManifest.php';
require_once 'lib/data/Sensor.php';


/**
 * Skeleton subclass for representing a row from the 'SensorManifest' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:08 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorManifest extends BaseSensorManifest {

  /**
   * Constructs a new SensorManifest instance,
   *
   */
  public function __construct($name="") {
    $this->setName($name);
  }


  /**
   * Return the Web-Services URL that this instance is accessible at
   *
   * @return String RESTURI
   */
  function getRESTURI() {
    return "/SensorManifest/{$this->getId()}";
  }


  /**
   * Add a Sensor to a SensorManifest
   *
   * @param Sensor $sensor
   */
  public function addSensor(Sensor $sensor) {
     $ssmObj = new SensorSensorManifest($sensor, $this);
     $ssmObj->save();
  }


  /**
   * Get the list of Sensors for this SensorManifest
   *
   * @return array[Sensor]
   */
  public function getSensors() {
    return SensorPeer::findByManifest($this->getId());
  }


  /**
   * Check if a Sensor belong to this SensorManifest
   *
   * @param Sensor $sensor
   * @return boolean value
   */
  public function hasSensor(Sensor $sensor) {
    $ssms = SensorSensorManifestPeer::findBySensor($sensor->getId());

    foreach($ssms as $ssm) {
      if ($ssm->getSensorManifestId() == $this->getId()) return true;
    }
    return false;
  }

} // SensorManifest
?>
