<?php

  // include base peer class
  require_once 'lib/data/om/BaseProjectOrganizationPeer.php';

  // include object class
  include_once 'lib/data/ProjectOrganization.php';


/**
 * Skeleton subclass for performing query and update operations on the 'ProjectOrganization' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:06 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class ProjectOrganizationPeer extends BaseProjectOrganizationPeer {

  /**
   * Find a ProjectOrganization object based on its ID
   *
   * @param int $id
   * @return ProjectOrganization
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all ProjectOrganizations
   *
   * @return array <ProjectOrganization>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find a list of ProjectOrganization given by Project ID
   *
   * @param int $projid
   * @return array <ProjectOrganization>
   */
  public static function findByProject($projid) {

    $c = new Criteria();
    $c->add(self::PROJID, $projid);

    return self::doSelect($c);
  }



  /**
   * Find a list of ProjectOrganization given by Organization ID
   *
   * @param int $orgid
   * @return array <ProjectOrganization>
   */
  public static function findByOrganization($orgid) {

    $c = new Criteria();
    $c->add(self::ORGID, $orgid);

    return self::doSelect($c);
  }



  /**
   * Find ONE ProjectOrganization that matched with an Project ID and Organization ID
   *
   * @param int $projid
   * @param int $orgid
   * @return ProjectOrganization
   */
  public static function findByProjectOrganization($projid, $orgid) {

    $c = new Criteria();
    $c->add(self::PROJID, $projid);
    $c->add(self::ORGID, $orgid);

    return self::doSelectOne($c);
  }

  public static function deleteByProject($p_iProjectId, $p_oConnection=null){
    if(!$p_oConnection){
      $oConnection = Propel::getConnection();
    }else{
      $oConnection = $p_oConnection;
    }

    $strQuery = "delete from project_organization
                 where projid=?";
    
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setInt(1, $p_iProjectId);
    $oStatement->executeUpdate();
  }

} // ProjectOrganizationPeer
?>
