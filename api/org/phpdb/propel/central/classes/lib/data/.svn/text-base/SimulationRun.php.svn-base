<?php

require_once 'lib/data/Trial.php';

require_once 'lib/data/om/BaseTrial.php';


/**
 * Skeleton subclass for representing a row from one of the subclasses of the 'Trial' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb 25 06:55:10 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SimulationRun extends Trial {

  private $datafiles = array();
  /**
   * Constructs a new SimulationRun object, setting the trial_type_id column to TrialPeer::CLASSKEY_1.
   */

  function __construct( Experiment $experiment = null,
                        $name = "",
                        $title = "",
                        $objective = "",
                        $description = "",
                        $startDate = null,
                        $endDate = null,
                        $status = "",
                        $acceleration = null,
                        $baseAcceleration = null,
                        MeasurementUnit $baseAccelerationUnit = null,
                        $motionName = "",
                        $station = "",
                        $component = "",
                        DataFile $motionFile = null ,
                        $curationstatus = "Uncurated",
                        $deleted = false) {

    parent::__construct($experiment,
                        $name,
                        $title,
                        $objective,
                        $description,
                        $startDate,
                        $endDate,
                        $status,
                        $acceleration,
                        $baseAcceleration,
                        $baseAccelerationUnit,
                        $motionName,
                        $station,
                        $component,
                        $motionFile,
                        $curationstatus,
                        $deleted);

    $this->setTrialTypeId(TrialPeer::CLASSKEY_SIMULATIONRUN);

  }


  /**
   * Get all the input, output datafiles
   *
   * @return array <DataFile>
   */
  public function getDataFiles() {
    return $this->datafiles;
  }


  /**
   * Set all the input, output datafiles
   *
   * @param array <DataFile>
   */
  public function setDataFiles($dfs) {
    $this->datafiles = $dfs;
  }


  /**
   * Get the Simulation of which this Run is a component
   * Wrap {@link Trial::getExperiment()}
   *
   * @return Simulation
   */
  public function getSimulation() {
    return $this->getExperiment();
  }


  /**
   * Set the Simulation of which this Run is a component
   * Wrap {@link Trial::setExperiment()}
   *
   * @param Simulation
   */
  public function setSimulation(Simulation $s) {
    return $this->setExperiment($s);
  }


  /**
   * It's so nasty ! We merged Trial and SimulationRun by matching Trial->Status === SimulationRun->Type !!!!
   * @todo Fix these
   *
   * @return String type
   */
  public function getSimulationType() {
    return $this->getStatus();
  }

  /**
   * It's so nasty ! We merged Trial and SimulationRun by matching Trial->Status === SimulationRun->Type !!!!
   * @todo Fix these
   *
   * @param String
   */

  public function setSimulationType($type) {
    $this->setStatus($type);
  }


  /**
   * Same thing urgly here Simulation->ElementType === Trial->Component
   *
   * @param String $elemType
   */
  public function setSimulationElementType($elemType) {
    $this->setComponent($elemType);
  }


  /**
   * Same thing urgly here Simulation->ElementType === Trial->Component
   *
   * @return String $elemType
   */
  public function getSimulationElementType() {
    return $this->getComponent();
  }


  /**
   * Same thing urgly here Simulation->LoadType === Trial->MotionName
   *
   * @param String LoadType
   */
  public function setSimulationLoadType($loadType) {
    $this->setMotionName($loadType);
  }


  /**
   * Same thing urgly here Simulation->LoadType === Trial->MotionName
   *
   * @return String LoadType
   */
  public function getSimulationLoadType() {
    return $this->getMotionName();
  }


  /**
   * add a convenience method for getting the main input file
   *
   * @return array <DataFile>
   */
  public function getMainInputFile() {
    return $this->getRunFiles('InMain');
  }


  /**
   * add a convenience method for getting the output file
   *
   * @return array <DataFile>
   */
  public function getOutputFiles() {
    return $this->getRunFiles('Output');
  }


  /**
   * add a convenience method for getting the input file
   *
   * @return array <DataFile>
   */
  public function getInputFiles() {
    return $this->getRunFiles('Input');
  }



  /**
   * Need a special getter that allows us to specify the type of file
   *
   * @return array <DataFile>
   */
  public function getRunFiles($type = null) {
    $path = $this->buildPath($type);

    if($type) {
      return DataFilePeer::findByDirectory($path);
    } else {
      return DataFilePeer::findFilesInDirs($path);
    }
  }


  /**
   * Add input files into the list
   *
   * @param DataFile $item
   */
  public function addInputFile( DataFile $item ) {
    if ($item) {
      $this->datafiles[] = $item;
    }
  }


  /**
   * Add output files into the list
   *
   * @param DataFile $item
   */
  public function addOutputFile( DataFile $item ) {
    if ($item) {
      $this->datafiles[] = $item;
    }
  }


  /**
   * Setting a new Main Input file replace to old file
   * Note: There is only one MainInput file
   *
   * @param DataFile $item
   */
  public function setMainInputFile( DataFile $item ) {

    if($this->hasDataFiles('MainInput')) {
      // get rid of the old file(s)
      $oldfiles = $this->getMainInputFile(); //returns a Collection, although there should only be one
      foreach($oldfiles as $file) {
        if( $file->getName() == $item->getName() ) {
          continue;
        }
        else {
          $file->fullDeleteSingleFile();
        }
      }
    }
  }


  /**
   * provide a way to indicate a specific type of DataFile
   *
   * @param String $type - ('MainInput' | 'Output' | 'Input' | '')
   * @return boolean
   */
  public function hasDataFiles( $type = '' ) {
    switch ($type) {
      case 'MainInput':
        return ($this->getMainInputFile() && count($this->getMainInputFile()) > 0) ? true : false;
      case 'Output':
        return ($this->getOutputFiles() && count($this->getOutputFiles()) > 0) ? true : false;
      case 'Input':
        return ($this->getInputFiles() && count($this->getInputFiles()) > 0) ? true : false;
      default:
        return ($this->getRunFiles('') && count($this->getRunFiles('')) > 0) ? true : false;
    }
  }


  /**
   * Get the built path for inpuut-output data files
   *
   * @param String $type - ('MainInput' | 'Output' | 'Input' | '')
   * @return String path
   */
  private function buildPath($type='') {
    /* result will look like: /nees/home/NEES-2006-0203.groups/Simulation-1/Run-1/[InMain|Output|Input] */
    $path = $this->getPathname() . "/" . $type;
    return rtrim($path, '/');
  }


  /**
   * Return the Web-Services URL that this instance is accessible at
   *
   * @return String RESTURI
   */
  function getRESTURI() {
    $sim = $this->getSimulation();
    return $sim->getRESTURI() . "/SimulationRun/{$this->getId()}";
  }


} // SimulationRun
