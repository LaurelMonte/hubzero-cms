<?php

  // include base peer class
  require_once 'lib/data/om/BaseSensorPeer.php';

  // include object class
  include_once 'lib/data/Sensor.php';
  require_once 'lib/data/SensorSensorManifest.php';
  require_once 'lib/data/SensorManifest.php';
  require_once 'lib/data/Organization.php';
  require_once 'lib/data/FacilityPeer.php';
  require_once 'lib/data/SensorPool.php';
  require_once 'lib/data/SensorModel.php';

/**
 * Skeleton subclass for performing query and update operations on the 'Sensor' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:07 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorPeer extends BaseSensorPeer {

  /**
   * Find a Sensor object based on its ID
   *
   * @param int $id
   * @return Sensor
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all Sensors
   *
   * @return array <Sensor>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  //case "findByManifest":
  //SELECT s.* FROM sensor_sensor_manifest m INNER JOIN Sensor s ON m.sensor_id = s.sensor_Id WHERE m.manifest_Id=?
  public static function findByManifest($manifestId) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, self::SENSOR_ID, Criteria::INNER_JOIN);
    $c->add(SensorSensorManifestPeer::MANIFEST_ID, $manifestId);

    return self::doSelect($c);
  }


/*
      case "findAllInSensorPool":
        return new Finder($finderName, "
            SELECT S.* FROM Sensor S
                       JOIN sensor_sensor_manifest SSM
                         ON SSM.sensorId = S.sensorId
                       WHERE SSM.manifestId IN
                         (SELECT DISTINCT manifestId FROM SensorPool WHERE expid=?)");
*/
  public static function findAllInSensorPool($expid) {

    $c = new Criteria();
    $c->addJoin(self::SENSOR_ID, SensorSensorManifestPeer::SENSOR_ID);
    $c->add(SensorSensorManifestPeer::MANIFEST_ID, "sensor_sensor_manifest.manifest_id IN (SELECT DISTINCT manifest_id FROM SensorPool WHERE expid= $expid)", Criteria::CUSTOM);

    return self::doSelect($c);
  }


/*
      case "findAllInSensorPoolByManifest":
        return new Finder($finderName, "
            SELECT S.* FROM Sensor S
                       JOIN sensor_sensor_manifest SSM
                         ON SSM.sensorId = S.sensorId
                       JOIN SensorPool SP
                         on SP.manifestId = SSM.manifestId
                       WHERE SSM.manifestId = ?
                       AND SP.expid=?");
*/
  public static function findAllInSensorPoolByManifest($manifestId, $expid) {

    $c = new Criteria();
    $c->addJoin(self::SENSOR_ID, SensorSensorManifestPeer::SENSOR_ID);
    $c->addJoin(SensorPoolPeer::MANIFEST_ID, SensorSensorManifestPeer::MANIFEST_ID);
    $c->add(SensorSensorManifestPeer::MANIFEST_ID, $manifestId);
    $c->add(SensorPoolPeer::EXPID, $expid);

    return self::doSelect($c);
  }


/*
      case "findTypeInSensorPoolByManifest":
        return new Finder($finderName, "
            SELECT S.* FROM Sensor S
                       JOIN sensor_sensor_manifest SSM
                         ON SSM.sensorId = S.sensorId
                       JOIN SensorPool SP
                         on SP.manifestId = SSM.manifestId
                       JOIN sensor_model SM
                         ON SM.sensor_model_id = S.sensor_model_id
                       WHERE SSM.manifestId = ?
                       AND SP.expid=?
                       AND SM.sensorTypeId=?
          ");
*/
  public static function findTypeInSensorPoolByManifest($manifestId, $expid, $sensorTypeId) {

    $c = new Criteria();
    $c->addJoin(self::SENSOR_ID, SensorSensorManifestPeer::SENSOR_ID);
    $c->addJoin(SensorPoolPeer::MANIFEST_ID, SensorSensorManifestPeer::MANIFEST_ID);
    $c->addJoin(self::SENSOR_MODEL_ID, SensorModelPeer::SENSOR_MODEL_ID);
    $c->add(SensorSensorManifestPeer::MANIFEST_ID, $manifestId);
    $c->add(SensorPoolPeer::EXPID, $expid);
    $c->add(SensorModelPeer::SENSORTYPEID, $sensorTypeId);

    return self::doSelect($c);
  }



  //case "findBySensorModel":
  //return new Finder($finderName, "SELECT * FROM Sensor WHERE sensor_model_id=?");
  public static function findBySensorModel($sensor_model_id) {

    $c = new Criteria();
    $c->add(self::SENSOR_MODEL_ID, $sensor_model_id);

    return self::doSelect($c);
  }


  /**
   * Find the list of Sensor that belong to a facility (or Organization)
   *
   * @param int $orgid
   * @return array(Sensor)
   */
  public static function findByFacility($orgid) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, self::SENSOR_ID);
    $c->addJoin(SensorSensorManifestPeer::MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(OrganizationPeer::SENSOR_MANIFEST_ID, SensorManifestPeer::ID);
    $c->add(OrganizationPeer::ORGID, $orgid);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn(self::SENSOR_MODEL_ID);
    $c->addAscendingOrderByColumn(self::SENSOR_ID);

    return self::doSelect($c);
  }


  /**
   * Check if a sensor_id that belong to a facility or not
   *
   * @param int $sensor_id
   * @param int $facid
   * @return boolean value, true id yes, false if no
   */
  public static function isSensorBelongToFacility($sensor_id, $facid) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, self::SENSOR_ID);
    $c->addJoin(SensorSensorManifestPeer::MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(OrganizationPeer::SENSOR_MANIFEST_ID, SensorManifestPeer::ID);
    $c->add(OrganizationPeer::FACILITYID, $facid);
    $c->add(self::SENSOR_ID, $sensor_id);
    $c->add(self::DELETED, 0);

    return self::doCount($c) == 1;
  }


/*
      case "findByFacilityAndSensorModel":
        return new Finder($finderName, "
            SELECT s.*
            FROM
              Sensor s,
              sensor_manifest sm,
              Organization O,
              Facility F,
              sensor_model smod,
              sensor_sensor_manifest ssm
            WHERE
              ssm.sensorId=s.sensorId AND
              ssm.manifestId=sm.id AND
              O.orgid = F.facilityid AND
              O.sensorManifestId=sm.id AND
              s.sensor_model_id = smod.sensor_model_id AND
              O.orgid=? AND
              s.sensor_model_id = ? AND
              s.deleted = 0");
*/
  public static function findByFacilityAndSensorModel($facid, $sensor_model_id) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, self::SENSOR_ID);
    $c->addJoin(SensorSensorManifestPeer::MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(OrganizationPeer::SENSOR_MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(self::SENSOR_MODEL_ID, SensorModelPeer::SENSOR_MODEL_ID);
    $c->add(OrganizationPeer::ORGID, $facid);
    $c->add(self::SENSOR_MODEL_ID, $sensor_model_id);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }



/*
      case "findByOrganization":
        return new Finder($finderName, "
            SELECT s.* FROM Sensor s, sensor_manifest sm, Organization O, sensor_sensor_manifest ssm
              WHERE ssm.sensorId=s.sensorId  AND
                    ssm.manifestId=sm.id AND
                    O.sensorManifestId=sm.id AND
                    O.orgid=?  AND s.deleted = 0");
*/
  public static function findByOrganization($orgid) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, self::SENSOR_ID);
    $c->addJoin(SensorSensorManifestPeer::MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(OrganizationPeer::SENSOR_MANIFEST_ID, SensorManifestPeer::ID);
    $c->add(OrganizationPeer::ORGID, $orgid);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }



  public static function findSensorsGroupBySensorModel($facid) {

    $sql = "SELECT
              st.name as st_name,
              smod.name as smod_name,
              smod.sensor_model_id,
              smod.min_measured_value,
              smod.max_measured_value,
              smod.model,
              smod.manufacturer,
              smod.description,
              smod.signal_type,
              smod.sensitivity,
              smod.min_op_temp,
              smod.max_op_temp,
              smod.temp_units_id,
              smod.note,
              u.abbreviation,
              count(*) as quantity
            FROM
              sensor s,
              sensor_manifest sm,
              organization O,
              sensor_sensor_manifest ssm,
              sensor_model smod LEFT JOIN measurement_unit u ON u.id = smod.measured_value_units_id,
              sensor_type st
            WHERE
              ssm.sensor_id=s.sensor_id AND
              st.id = smod.sensor_type_id AND
              s.sensor_model_id = smod.sensor_model_id AND
              ssm.manifest_id=sm.id AND
              O.sensor_manifest_id=sm.id AND
              s.deleted = 0 AND
              O.orgid = ?
            GROUP BY
              st.name,
              smod.name,
              smod.sensor_model_id,
              smod.min_measured_value,
              smod.max_measured_value,
              smod.model,
              smod.manufacturer,
              smod.description,
              smod.signal_type,
              smod.sensitivity,
              smod.min_op_temp,
              smod.max_op_temp,
              smod.temp_units_id,
              smod.note,
              u.abbreviation
            ORDER BY
              smod.name";

    $conn = Propel::getConnection(self::DATABASE_NAME);
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $facid);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    return $rs;
  }

} // SensorPeer


?>
