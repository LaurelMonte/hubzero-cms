<?php

  // include base peer class
  require_once 'lib/data/om/BaseMeasurementUnitConversionPeer.php';

  // include object class
  include_once 'lib/data/MeasurementUnitConversion.php';


/**
 * Skeleton subclass for performing query and update operations on the 'MeasurementUnitConversion' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:03 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 *
 * @uses BaseMeasurementUnitPeer
 * @uses MeasurementUnit
 *
 */
class MeasurementUnitConversionPeer extends BaseMeasurementUnitConversionPeer {

  /**
   * Find a MeasurementUnitConversion object based on its ID
   *
   * @param int $id
   * @return MeasurementUnitConversion
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all MeasurementUnitConversions
   *
   * @return array <MeasurementUnitConversion>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find all MeasurementUnitConversion by Form ID
   *
   * @param int $fromId
   * @return array <MeasurementUnitConversion>
   */
  public static function findByFrom($fromId) {
    $c = new Criteria();
    $c->add(self::FROM_ID, $fromId);

    return self::doSelect($c);
  }


  /**
   * Find all MeasurementUnitConversion by To ID
   *
   * @param int $toId
   * @return array <MeasurementUnitConversion>
   */
  public static function findByTo($toId) {
    $c = new Criteria();
    $c->add(self::TO_ID, $toId);

    return self::doSelect($c);
  }


  /**
   * Find ONE MeasurementUnitConversion by From ID and To ID
   *
   * @param int $fromId
   * @param int $toId
   * @return MeasurementUnitConversion
   */
  public static function findByFromTo($fromId, $toId) {
    $c = new Criteria();
    $c->add(self::FROM_ID, $fromId);
    $c->add(self::TO_ID, $toId);

    return self::doSelectOne($c);
  }


  /**
   * Find ONE MeasurementUnitConversion by From Name and To Name
   *
   * @param String $fromName
   * @param String $toName
   * @return MeasurementUnitConversion
   */
  public static function findByFromToName($fromName, $toName) {

    include_once 'lib/data/MeasurementUnit.php';

    $fromUnit = MeasurementUnitPeer::findByName($fromName);
    $toUnit   = MeasurementUnitPeer::findByName($toName);

    return self::findByFromTo($fromUnit->getId(), $toUnit->getId() );
  }


} // MeasurementUnitConversionPeer
?>
