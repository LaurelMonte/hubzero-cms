<?php

require_once 'lib/data/om/BaseSensorModel.php';
require_once 'lib/data/MeasurementUnit.php';


/**
 * Skeleton subclass for representing a row from the 'Sensor_Model' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:07 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorModel extends BaseSensorModel {

  /**
   * Constructs a new SensorModel object
   */
  function __construct( $name = "",
                        SensorType $sensorType = null,
                        $model = "",
                        $manufacturer = "",
                        $description = "",
                        $signalType = "",
                        $minMeasuredValue = null,
                        $maxMeasuredValue = null,
                        $measuredValueUnits = null,
                        $sensitivity = null,
                        $sensitivityUnits = null,
                        $minOpTemp = null,
                        $maxOpTemp = null,
                        $tempUnits = null,
                        $note = "",
                        $deleted = 0)
  {
    $this->setName($name);
    $this->setSensorType($sensorType);
    $this->setModel($model);
    $this->setManufacturer($manufacturer);
    $this->setDescription($description);
    $this->setSignalType($signalType);
    $this->setMinMeasuredValue($minMeasuredValue);
    $this->setMaxMeasuredValue($maxMeasuredValue);
    $this->setMeasuredValueUnits($measuredValueUnits);
    $this->setSensitivity($sensitivity);
    $this->setSensitivityUnits($sensitivityUnits);
    $this->setMinOpTemp($minOpTemp);
    $this->setMaxOpTemp($maxOpTemp);
    $this->setTempUnits($tempUnits);
    $this->setNote($note);
    $this->setDeleted($deleted);
  }


  /**
   * Return the Web-Services URL that this instance is accessible at
   *
   * @return String RESTURI
   */
  function getRESTURI() {
    return "/SensorModel/{$this->getId()}";
  }


  /**
   * Bad location for this but convenient.  SensorModel permissions are based on Facility permissions
   *
   * @param String $perm (canView | canCreate | canEdit | canDelete | canGrant)
   * For example: getPermission('canView')
   *
   * @return boolean value
   */
  public static function getPermission($perm){
    $auth = Authorizer::getInstance();
    $facilities = FacilityPeer::findAll();

    foreach ($facilities as $facility){
      if ($auth->$perm($facility)) return true;
    }
    return false;
  }



  /**
   * Each SensorModel is associated with a directory on disk. This function returns the path of that directory for this SensorModel.
   *
   * @return String $path
   */
  public function getPathname() {
    return "/nees/home/facility.groups/sensorModels/" . $this->getId();
  }


  /**
   * Make directories to store data that belong to this SensorModel
   *
   */
  public function makeSensorModelDirs() {
    $modelDir = $this->getPathname();

    if( ! file_exists($modelDir)) {
      FileCommandAPI::create($modelDir)->mkdir(true);
      FileCommandAPI::create($modelDir . "/Documentation")->mkdir();
    }
    elseif( ! file_exists($modelDir . "/Documentation")) {
      FileCommandAPI::create($modelDir . "/Documentation")->mkdir();
    }
  }


  /**
   * Set the MeasurementUnit that related by the MeasuredValueUnitsId
   *
   * @param MeasurementUnit
   */
  public function setMeasuredValueUnits($u) {
    //if (is_string($u)){
    //  $u = MeasurementUnitPeer::findByName($u);
    //}
    $this->setMeasurementUnitRelatedByMeasuredValueUnitsId($u);
  }


  /**
   * Overide function to make sure an empty value will be set as NULL
   *
   * @param int $unitId
   */
  public function setMeasuredValueUnitsId($unitId) {
    BaseSensorModel::setMeasuredValueUnitsId(empty($unitId) ? null : $unitId);
  }


  /**
   * Get the MeasurementUnit that related by the MeasuredValueUnitsId
   *
   * @return MeasurementUnit
   */
  public function getMeasuredValueUnits() {
    return $this->getMeasurementUnitRelatedByMeasuredValueUnitsId();
  }



  /**
   * Set the MeasurementUnit that related by the SensitivityUnitsId
   *
   * @param MeasurementUnit
   */
  public function setSensitivityUnits($u) {
    //if (is_string($u)){
    //  $u = MeasurementUnitPeer::retrieveByPK($u);
    //}
    $this->setMeasurementUnitRelatedBySensitivityUnitsId($u);
  }


  /**
   * Overide function to make sure an empty value will be set as NULL
   *
   * @param int $unitId
   */
  public function setSensitivityUnitsId($unitId) {
    BaseSensorModel::setSensitivityUnitsId(empty($unitId) ? null : $unitId);
  }


  /**
   * Get the MeasurementUnit that related by the SensitivityUnitsId
   *
   * @return MeasurementUnit
   */
  public function getSensitivityUnits() {
    return $this->getMeasurementUnitRelatedBySensitivityUnitsId();
  }


  /**
   * Set the MeasurementUnit that related by the TempUnitsId
   *
   * @param MeasurementUnit
   */
  public function setTempUnits($u) {
    //if (is_string($u)){
    //  $u = MeasurementUnitPeer::findByName($u);
    //}
    $this->setMeasurementUnitRelatedByTempUnitsId($u);
  }

  /**
   * Overide function to make sure an empty value will be set as NULL
   *
   * @param int $unitId
   */
  public function setTempUnitsId($unitId) {
    BaseSensorModel::setTempUnitsId(empty($unitId) ? null : $unitId);
  }


  /**
   * Get the MeasurementUnit that related by the TempUnitsId
   *
   * @return MeasurementUnit
   */
  public function getTempUnits() {
    return $this->getMeasurementUnitRelatedByTempUnitsId();
  }


  /**
   * Return the Excel columns that supported for Export or Upload by excel spreadsheet
   *
   * @return array(String)
   */
  function getExcelColumnNames() {
    return array(
      1=>"Name",
      2=>"Type",
      3=>"Manufacturer",
      4=>"Model",
      5=>"Description",
      6=>"Signal Type",
      7=>"Min Measured Value",
      8=>"Max Measured Value",
      9=>"Measured Value Unit",
      10=>"Sensitivity",
      11=>"Sensitivity Unit",
      12=>"Min Operating Temperature",
      13=>"Max Operating Temperature",
      14=>"Operating Temperature Unit",
      15=>"Note");
  }


  public function toString() {
    $r = "SensorModel: " . $this->getId() . "\n";
    foreach ($this->toArray() as $k=>$v) {
      $r .= sprintf("\t%s: %s\n", $k, $v);
    }
    return $r;
  }

} // SensorModel
?>
