<?php

  // include base peer class
  require_once 'lib/data/om/BaseSimilitudeLawGroupPeer.php';

  // include object class
  include_once 'lib/data/SimilitudeLawGroup.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SimilitudeLawGroup' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:11 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SimilitudeLawGroupPeer extends BaseSimilitudeLawGroupPeer {

  /**
   * Find a SimilitudeLawGroup object based on its ID
   *
   * @param int $id
   * @return SimilitudeLawGroup
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SimilitudeLawGroups
   *
   * @return array <SimilitudeLawGroup>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  private $selectByDomSQL      = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id = ?";
  private $selectByIndSQL      = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id = ? AND system_name LIKE '%independent%'";
  private $selectByDepSQL      = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id = ? AND system_name NOT LIKE '%independent%'";
  private $selectByNullDomSQL  = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id IS NULL";
  private $selectByNullIndSQL  = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id IS NULL AND system_name LIKE '%independent%'";
  private $selectByNullDepSQL  = "SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id IS NULL AND system_name NOT LIKE '%independent%'";


  public static function getKeywordSearchColumns() {
	  return array();
  }


  public static function findByExperimentDomain(ExperimentDomain $dom) {

    $c = new Criteria();
    $c->add(self::EXPERIMENT_DOMAIN_ID, $dom->getId());

    if(self::doCount($c) == 0) {
      $c = new Criteria();
      $c->add(self::EXPERIMENT_DOMAIN_ID, null, Criteria::ISNULL);
    }

    return self::doSelect($c);
  }

  public static function findByDependence(ExperimentDomain $dom, $dep) {

    //SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id = ? AND system_name NOT LIKE '%independent%'
    if( $dep == 'dependent' ) {
      $c = new Criteria();
      $c->add(self::EXPERIMENT_DOMAIN_ID, $dom->getId());
      $c->add(self::SYSTEM_NAME, "%independent%", Criteria::NOT_LIKE );
    }
    //SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id = ? AND system_name LIKE '%independent%'
    else {
      $c = new Criteria();
      $c->add(self::EXPERIMENT_DOMAIN_ID, $dom->getId());
      $c->add(self::SYSTEM_NAME, "%independent%", Criteria::LIKE );
    }

    // If we don't have any groups for this specific domain, get default groups.
    if( self::doCount($c) == 0 ) {
      //SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id IS NULL AND system_name NOT LIKE '%independent%'
      if( $dep == 'dependent' ) {
        $c = new Criteria();
        $c->add(self::EXPERIMENT_DOMAIN_ID, null, Criteria::ISNULL);
        $c->add(self::SYSTEM_NAME, "%independent%", Criteria::NOT_LIKE );
      }
      //SELECT * FROM SimilitudeLawGroup WHERE ExperimentDomain_id IS NULL AND system_name LIKE '%independent%'
      else {
        $c = new Criteria();
        $c->add(self::EXPERIMENT_DOMAIN_ID, null, Criteria::ISNULL);
        $c->add(self::SYSTEM_NAME, "%independent%", Criteria::LIKE );
      }
    }

    return self::doSelect($c);
  }

} // SimilitudeLawGroupPeer
?>
