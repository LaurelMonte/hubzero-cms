<?php

// include base peer class
require_once 'lib/data/tsunami/om/BaseTsunamiDocLibPeer.php';

// include object class
include_once 'lib/data/tsunami/TsunamiDocLib.php';
include_once 'lib/data/tsunami/TsunamiSiteDocRelationship.php';


/**
 * Skeleton subclass for performing query and update operations on the 'TsunamiDocLib' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:14 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data.tsunami
 */
class TsunamiDocLibPeer extends BaseTsunamiDocLibPeer {

  /**
   * Find a TsunamiDocLib object based on its ID
   *
   * @param int $id
   * @return TsunamiDocLib
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }

  /**
   * Find all TsunamiBiologicalDatas
   *
   * @return array <TsunamiBiologicalData>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }

  #-------------
  #   getTsunamiDocLib
  #
  function getTsunamiDocLib($id=null){
    return self::find($id);
  }


  function getTsunamiDocSiteId($id=null) {
    return TsunamiSiteDocRelationshipPeer::getTsunamiDocSiteId($id);
  }


  #-------------
  #   newTsunamiDocLib
  #
  function newTsunamiDocLib(){
    $obj = new TsunamiDocLib();
    return $obj;
  }


  #-----------
  #   list
  #
  function listTsunamiDocLibs( &$filter = null, $expanded = false, $order = false){

    $meta = $this->metadata;

    if ($filter) {

      if($filter->setMetaData($this->metadata)==false)
      return($this->setError($filter->getError()));
      if(($str = $filter->getFilterString())==false)
      return($this->setError($filter->getError()));

      $where = " WHERE ".$str;
    }
    else $where = "";

    if(!$order) $order = "TsunamiDocLibId";

    $sql = "SELECT * FROM TsunamiDocLib $where ORDER BY $order";

    $ret = $this->queryMyDAO($sql);
    if (!$ret) return false;

    $results = array();

    if (count($ret) == 0) return ($results);

    if ($expanded){
      foreach($ret as $row){
        $results[$row["TsunamiDocLibId"]] = $this->getTsunamiDocLib($row["TsunamiDocLibId"]);
      }
    }else{
      foreach($ret as $row){
        $results[$row["TsunamiDocLibId"]] = $row["TsunamiDocLibId"];
      }
    }

    return $results;
  }

  #========================================================================
  #   Special DAO Methods
  #========================================================================


  function linkDocToSite($dObj=null,$sId=null)
  {
    if(is_null($dObj) || is_null($sId)) return false;

    $docRelationship = new TsunamiSiteDocRelationship();
    $docRelationship->setTsunamiDocLib($dObj);
    $docRelationship->setTsunamiSiteId($sId);
    $docRelationship->save();
    return true;
  }

} // TsunamiDocLibPeer
