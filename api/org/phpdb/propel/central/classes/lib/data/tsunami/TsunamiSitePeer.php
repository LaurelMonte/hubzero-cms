<?php

  // include base peer class
  require_once 'lib/data/tsunami/om/BaseTsunamiSitePeer.php';

  // include object class
  include_once 'lib/data/tsunami/TsunamiSite.php';


/**
 * Skeleton subclass for performing query and update operations on the 'TsunamiSite' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:16 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data.tsunami
 */
class TsunamiSitePeer extends BaseTsunamiSitePeer {

  /**
   * Find a TsunamiSite object based on its ID
   *
   * @param int $id
   * @return TsunamiSite
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }

  /**
   * Find all TsunamiSites
   *
   * @return array <TsunamiSite>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }

  /**
   * Find all TsunamiSites given by a TsunamiProjectId
   * @param TsunamiProjectId $pid
   * @return array <TsunamiSite>
   */
  public static function findByTsunamiProjectId($pid) {
    $c = new Criteria();
    $c->add(self::TSUNAMI_PROJECT_ID, $pid);

    return self::doSelect($c);
  }


  /**
   * Find all TsunamiSiteConfiguration given by a condition
   * @param String $field_name
   * @return (int ???) $field_value
   */
  public static function findByColumnValue($field_name, $field_value) {
    $c = new Criteria();
    $field_name = self::getTableMap()->getName() . "." . strtoupper($field_name);
    $c->add($field_name, $field_value);

    return self::doSelect($c);
  }


  /**
   * List Tsunami Sites by given conditions
   *
   * @param Strinf $filter
   * @param boolean $expanded
   * @param boolean $order
   * @return mix
   */
  function listTsunamiSites( &$filter = null, $expanded = false, $order = false){

    $meta = $this->metadata;

    if ($filter) {

      if($filter->setMetaData($this->metadata)==false)
      return($this->setError($filter->getError()));
      if(($str = $filter->getFilterString())==false)
      return($this->setError($filter->getError()));

      $where = " WHERE ".$str;
    }
    else $where = "";

    if(!$order) $order = "TsunamiSiteId";

    $sql = "SELECT * FROM TsunamiSite $where ORDER BY $order";


    $ret = $this->queryMyDAO($sql);
    if (!$ret) return false;

    $results = array();

    if (count($ret) == 0) return ($results);

    if ($expanded){
      foreach($ret as $row){
        $results[$row["TsunamiSiteId"]] = $this->getTsunamiSite($row["TsunamiSiteId"]);
      }
    }else{
      foreach($ret as $row){
        $results[$row["TsunamiSiteId"]] = $row["TsunamiSiteId"];
      }
    }

    return $results;
  }

} // TsunamiSitePeer
