<?php

  // include base peer class
  require_once 'lib/data/om/BaseSensorPoolPeer.php';

  // include object class
  include_once 'lib/data/SensorPool.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SensorPool' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:09 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorPoolPeer extends BaseSensorPoolPeer {

  /**
   * Find a SensorPool object based on its ID
   *
   * @param int $id
   * @return SensorPool
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SensorPools
   *
   * @return array <SensorPool>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find all SensorPool belongs to an Experiment
   *
   * @param int $expId
   * @return array <SensorPool>
   */
  public static function findByExperiment($expid) {

    $c = new Criteria();
    $c->add(self::EXP_ID, $expid);

    return self::doSelect($c);
  }


  /**
   * Find all SensorPool given by Experiment ID and SensorManifest ID
   *
   * @param int $expId
   * @param int $manifestId
   * @return array <SensorPool>
   */
  public static function findByExperimentManifest($expId, $manifestId) {

    $c = new Criteria();
    $c->add(self::EXP_ID, $expId);
    $c->add(self::MANIFEST_ID, $manifestId);

    return self::doSelect($c);
  }



  /**
   * Clone the Experiment SensorPool to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentSensorPool(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              Sensor_Pool (ID, MANIFEST_ID, EXP_ID)
            SELECT
              SENSOR_POOL_SEQ.NEXTVAL,
              MANIFEST_ID,
              ?
            FROM
              Sensor_Pool
            WHERE
              EXP_ID = ?";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }



} // SensorPoolPeer
?>
