<?php

// include base peer class
require_once 'lib/data/om/BaseExperimentPeer.php';

// include object class
include_once 'lib/data/Experiment.php';
include_once 'lib/data/AuthorizationPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Experiment' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:57 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class ExperimentPeer extends BaseExperimentPeer {

  public static function getKeywordSearchColumns() {
    return array(self::NAME, self::TITLE, self::DESCRIPTION, self::OBJECTIVE);
  }



  /**
   * Find an Experiment (not deleted) object based on its ID
   *
   * @param int $id
   * @return Experiment
   */
  public static function find($id) {
    $exp = self::retrieveByPK($id);
    if($exp && $exp->getDeleted()) return null;
    return $exp;
  }

  /**
   * Find a Simulation by id
   * @param int id
   * @return Simulation
   * @todo make this type safe
   */
  public static function findSimulation($id) {
    return self::find($id);
  }



  /**
   * Find all Experiment that is not deleted
   *
   * @param Criteria $c
   * @param Connection $conn
   * @return array<Experiment>
   */
  public static function findAll(Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::DELETED, 0);

    return self::doSelect($c,$conn);
  }


  /**
   * Find all Simulations
   *
   * @param Criteria $c
   * @param Connection $conn
   * @return array <Simulation>
   */
  public static function findAllSimulations(Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::EXP_TYPE_ID,self::CLASSKEY_SIMULATION);

    return self::findAll($c,$conn);
  }


  /**
   * Find all Experiments belongs to a Project with an Order By option
   *
   * @param int $projid
   * @param String $orderby
   * @return array <Experiment>
   */
  public static function findByProject($projid, $orderby = null) {

    if($orderby == "domain")         $orderby = self::EXPERIMENT_DOMAIN_ID;
    elseif($orderby == "title")      $orderby = self::TITLE;
    elseif($orderby == "startDate")  $orderby = self::START_DATE;
    elseif($orderby == "endDate")    $orderby = self::END_DATE;
    elseif($orderby == "curation")   $orderby = self::CURATION_STATUS;
    elseif($orderby == "type")       $orderby = self::EXP_TYPE_ID;
    else                             $orderby = self::EXPID;

    $c = new Criteria();
    $c->add(self::PROJID, $projid);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn($orderby);

    return self::doSelect($c);
  }


  /**
   * Find All Experiment belong to a project with an order by Organizations
   *
   * @param int $projid
   * @return array <Experiment>
   */
  public static function findByProjectOrderByOrganization($projid) {

    $c = new Criteria();
    $c->addJoin(self::EXPID, ExperimentOrganizationPeer::EXPID);
    $c->addJoin(OrganizationPeer::ORGID, ExperimentOrganizationPeer::ORGID);
    $c->add(self::PROJID, $projid);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn(OrganizationPeer::NAME);
    $c->addAscendingOrderByColumn(self::EXPID);

    return self::doSelect($c);
  }



  /**
   * Get an Experiment belong to a Project with an ExpID or ExpName
   *
   * @param int $projectid
   * @param mix $exp_name_or_id
   * @return Experiment
   */

  public static function findOneInProject($projid, $exp_name_or_id) {
    $c = new Criteria();

    $cton1 = $c->getNewCriterion(self::NAME, $exp_name_or_id);
    $cton2 = $c->getNewCriterion(self::EXPID, $exp_name_or_id);
    $cton1->addOr($cton2);
    $c->add($cton1);
    $c->add(self::PROJID, $projid);
    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }

  /**
   * Get an Experiment (Physical/Analytical Substructure) belong to a Coordinator-run with an ExpID
   *
   * @param int $coordinatorRunId
   * @param int $expid
   * @return Experiment
   */

  public static function findOneInCoordinatorRun($coordinatorRunId, $expid) {
    include_once 'lib/data/CoordinatorRunExperiment.php';

    $c = new Criteria();
    $c->addJoin(self::EXPID, CoordinatorRunExperimentPeer::EXP_ID);
    $c->add(self::EXPID, $expid);
    $c->add(CoordinatorRunExperimentPeer::COORDINATOR_RUN_ID, $coordinatorRunId);
    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }


  /**
   * Find all Experiment associated with an Organization
   *
   * @param int $orgid
   * @return array <Experiment>
   */
  public static function findByOrganization($orgid) {

    include_once 'lib/data/ExperimentOrganization.php';

    $c = new Criteria();
    $c->addJoin(self::EXPID, ExperimentOrganizationPeer::EXPID);
    $c->add(ExperimentOrganizationPeer::ORGID, $orgid);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Experiments belong to a Project and associated with an Organization
   *
   * @param int $projid
   * @param int $orgid
   * @return array <Experiment>
   */
  public static function findByProjectOrganization($projid, $orgid) {

    include_once 'lib/data/ExperimentOrganization.php';

    $c = new Criteria();
    $c->addJoin(self::EXPID, ExperimentOrganizationPeer::EXPID);
    $c->add(ExperimentOrganizationPeer::ORGID, $orgid);
    $c->add(self::PROJID, $projid);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Experiment associated with an Facility
   *
   * @param int $facilityid
   * @return array <Experiment>
   */
  public static function findByFacility($facilityid) {

    include_once 'lib/data/ExperimentFacility.php';

    $c = new Criteria();
    $c->addJoin(self::EXPID, ExperimentFacilityPeer::EXPID);
    $c->add(ExperimentFacilityPeer::FACILITYID, $facilityid);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Experiments  given by ExperimentDomain ID
   *
   * @param int $experimentDomain_id
   * @return array <Experiment>
   */
  public static function findByExperimentDomain($experimentDomain_id) {

    $c = new Criteria();
    $c->add(self::EXPERIMENT_DOMAIN_ID, $experimentDomain_id);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find ONE Experiment by its ID and associated with an Organization
   *
   * @param int $orgid
   * @param int $expid
   * @return Experiment
   */
  public static function findByOrganizationExperimentId($orgid, $expid) {

    include_once 'lib/data/ExperimentOrganization.php';

    $c = new Criteria();
    $c->addJoin(self::EXPID, ExperimentOrganizationPeer::EXPID);
    $c->add(ExperimentOrganizationPeer::ORGID, $orgid);
    $c->add(self::EXPID , $expid);
    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }


  /**
   * Find ONE Experiment given by its name and belong to a Project
   *
   * @param String $name
   * @param int $projid
   * @return Experiment
   */
  public static function findByNameProject($name, $projid) {

    $c = new Criteria();
    $c->add(self::NAME, $name);
    $c->add(self::PROJID, $projid);
    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }


  /**
   * Find all Experiments by a status
   *
   * @param String $status
   * @return array <Experiment>
   */
  public static function findByStatus($status) {

    $c = new Criteria();
    $c->add(self::STATUS, $status);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Experiment by the CurationStatus
   *
   * @param String $curation_status
   * @return array <Experiment>
   */
  public static function findByCurationStatus($curation_status) {

    $c = new Criteria();
    $c->add(self::CURATION_STATUS, $curation_status);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Experiment by Viewable
   *
   * @param String $viewable
   * @return array <Experiment>
   */
  public static function findByVisibility($viewable) {

    $c = new Criteria();
    $c->add(self::VIEWABLE, $viewable);
    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find My Experiments within a Project
   *
   * @param int $projid
   * @param int $personId
   * @return array <Experiment>
   */
  public static function findMyExperimentsWithInProject($projid, $personId) {

    $c = new Criteria();
    $c->addJoin(self::EXPID, AuthorizationPeer::ENTITY_ID);
    $c->addJoin(self::PROJID, ProjectPeer::PROJID);
    $c->add(self::PROJID, $projid);
    $c->add(AuthorizationPeer::PERSON_ID, $personId);
    $c->add(AuthorizationPeer::ENTITY_TYPE_ID, 3);
    $c->add(self::DELETED, 0);
    $c->add(ProjectPeer::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all Public experiment + my experiments within a Project, for any user who logged-in or not logged-din
   *
   * @param int $projid
   * @param int $personId: personId (null if not loggedin)
   * @return array(Experiment)
   */
  public static function findViewableExperimentsWithInProject($projid, $personId = null, $orderby = null) {

    if($orderby == "domain")         $orderby = self::EXPERIMENT_DOMAIN_ID;
    elseif($orderby == "title")      $orderby = self::TITLE;
    elseif($orderby == "startDate")  $orderby = self::START_DATE;
    elseif($orderby == "endDate")    $orderby = self::END_DATE;
    elseif($orderby == "curation")   $orderby = self::CURATION_STATUS;
    elseif($orderby == "type")       $orderby = self::EXP_TYPE_ID;
    else                             $orderby = self::EXPID;

    $c = new Criteria();

    if($personId) {
      $c->add(self::EXPID, "EXPID IN (

          SELECT DISTINCT
              E2.EXPID
          FROM
              EXPERIMENT E2,
              AUTHORIZATION A2
          WHERE
              E2.DELETED = 0 AND
              E2.PROJID = $projid AND
              (
                (
                  A2.ENTITY_TYPE_ID = 3 AND
                  A2.ENTITY_ID = E2.EXPID AND
                  A2.PERSON_ID = $personId
                )
                OR
                E2.VIEWABLE = 'PUBLIC'
              )
      )", Criteria::CUSTOM);

    }
    else {
      $c->add(self::PROJID, $projid);
      $c->add(self::VIEWABLE, 'PUBLIC');
      $c->add(self::DELETED, 0);
    }
    $c->addAscendingOrderByColumn($orderby);

    return self::doSelect($c);
  }



  /**
   * Get the Next available Name for an Experiment / Simulation
   *
   * @param Experiment $exp
   * @return String
   */
  public static function getNextAvailableName( Experiment $exp ) {

    $exp_or_sim = $exp->isSimulation() ? "Simulation" : "Experiment";
    $sql = "SELECT NVL(MAX(REPLACE(name,'" . $exp_or_sim . "-','') + 1), 1) AS N FROM Experiment WHERE projid = " . $exp->getProjectId() . " AND name like '" . $exp_or_sim . "%'";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      $num = $rs->getInt('N');
      if(is_numeric($num)) {
        return $exp_or_sim . "-" . $num;
      }
    }
    // There was error
    throw new Exception("Could not generate Experiment Name");
  }


  /**
   * Find total number of Active Experiments (not deleted experiments)
   *
   * @return int $count
   */
  public function countActiveExperiments() {

    $sql = "SELECT COUNT(*) AS COUNT FROM EXPERIMENT E, PROJECT P WHERE E.PROJID = P.PROJID AND P.DELETED = 0 AND E.DELETED = 0";

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      return $rs->get('COUNT');
    }
    return -1;
  }


  public function countActiveProjectsContainExperiments() {
    $sql = "SELECT COUNT(DISTINCT E.PROJID) AS COUNT FROM EXPERIMENT E, PROJECT P WHERE E.DELETED = 0 AND P.DELETED = 0 AND E.PROJID = P.PROJID";

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      return $rs->get('COUNT');
    }
    return -1;
  }


  public function getExperimentGroupByDomain() {
    $sql = "SELECT E.EXPERIMENT_DOMAIN_ID, COUNT(*) AS COUNT FROM EXPERIMENT E, PROJECT P WHERE P.PROJID = E.PROJID AND E.DELETED = 0 AND P.DELETED = 0 GROUP BY EXPERIMENT_DOMAIN_ID ORDER BY EXPERIMENT_DOMAIN_ID";

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    $ret = array();
    while($rs->next()) {
      $ret[$rs->get('EXPERIMENT_DOMAIN_ID')] = $rs->get('COUNT');
    }
    return $ret;
  }


  /**
   * Find a list of Experiments from an array of expids
   *
   * @param array $expids
   * @return array[Experiment]
   */
  public function findFromListOfIds($expids) {

    if(!is_array($expids)) return array();

    $c = new Criteria();
    $c->add(self::EXPID, $expids, Criteria::IN);
    $c->addAscendingOrderByColumn(self::PROJID);
    $c->addAscendingOrderByColumn(self::EXPID);

    return self::doSelect($c);
  }

} // ExperimentPeer
?>
