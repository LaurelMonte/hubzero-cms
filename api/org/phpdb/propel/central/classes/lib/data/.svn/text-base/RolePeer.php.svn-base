<?php

  // include base peer class
  require_once 'lib/data/om/BaseRolePeer.php';

  // include object class
  include_once 'lib/data/Role.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Role' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:07 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 *
 * @todo: Remember to change the php code because we do not using the trick 'defaultPermissions+0' any more
 */
class RolePeer extends BaseRolePeer {

  public static function getKeywordSearchColumns() {
    return array("name");
  }

  /**
   * Find a Role object based on its ID
   *
   * @param int $id
   * @return Role
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all Roles
   *
   * @return array <Role>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find the Role that match with an EntityType
   *
   * @param String $name: Role Name
   * @param int $entityTypeId
   * @return Role
   */
  public static function findByNameEntityType($name, $entityTypeId) {

    $c = new Criteria();
    $c->add(self::DISPLAY_NAME, $name);
    $c->add(self::ENTITY_TYPE_ID, $entityTypeId);

    return self::doSelectOne($c);
  }


  //"findByName"  => "SELECT id, name, defaultPermissions+0 as defaultPermissions, entity_type_id from Role WHERE name=?",
  public static function findByName($name) {

    $c = new Criteria();
    $c->add(self::DISPLAY_NAME, $name);
    $c->setIgnoreCase(true);
    return self::doSelect($c);
  }


  //"findByEntityType" => "SELECT id, name, defaultPermissions+0 as defaultPermissions, entity_type_id from Role WHERE entity_type_id=?"
  public static function findByEntityType($entityTypeId) {

    $c = new Criteria();
    $c->add(self::ENTITY_TYPE_ID, $entityTypeId);

    return self::doSelect($c);
  }

  /**
   * File all roles by person on an entity
   *
   * @param int $personId
   * @param int $entityId
   * @param int $entityTypeId
   * @return String $roleNames
   */
  public static function findRolesByPersonEntity($personId, $entityId, $entityTypeId) {

    $c = new Criteria();
    $c->addJoin(self::ID, PersonEntityRolePeer::ROLE_ID);
    $c->add(PersonEntityRolePeer::ENTITY_TYPE_ID, $entityTypeId);
    $c->add(PersonEntityRolePeer::ENTITY_ID, $entityId);
    $c->add(PersonEntityRolePeer::PERSON_ID, $personId);

    $roles = self::doSelect($c);
    $roleNames = array();

    foreach($roles as $role) {
      $roleNames[] = $role->getName();
    }

    return implode(", ", $roleNames);
  }

  /**
   * Get the default role: 'Other' for any entity_type_id
   * @param int $entityTypeId
   * @return Role
   */
  public static function getDefaultRoleByEntityTypeId($entity_type_id) {
    $c = new Criteria();

    if($entity_type_id == 20) {
      $c->add(self::DISPLAY_NAME, "Other Academic Personnel");
    }
    else {
      $c->add(self::DISPLAY_NAME, "Other");
    }

    $c->add(self::ENTITY_TYPE_ID, $entity_type_id);

    return self::doSelectOne($c);
  }

  /**
   * Get the list of Roles from a list of all people in an entity
   *
   * @param BaseObject $entity
   * @param int $personId
   * @return Array (Role_Names)
   */
  public static function listRolesForPersonInEntity(BaseObject $entity, $personId ) {

    $entity_id = $entity->getId();
    $entity_type_id = DomainEntityType::getEntityTypeId($entity);

    $sql =
        "SELECT
            R.DISPLAY_NAME
        FROM
            PERSON P,
            PERSON_ENTITY_ROLE PER,
            ROLE R
        WHERE
            P.ID = PER.PERSON_ID AND
            PER.ROLE_ID = R.ID AND
            PER.ENTITY_ID = ? AND
            PER.ENTITY_TYPE_ID = ? AND
            P.ID = ?";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);
    $stmt->setInt(3, $personId);

    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    $roles = array();

    while($rs->next()) {
      $roles[] = $rs->get('DISPLAY_NAME');
    }
    return $roles;
  }

} // RolePeer
?>
