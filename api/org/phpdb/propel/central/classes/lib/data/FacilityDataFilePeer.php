<?php

  // include base peer class
  require_once 'lib/data/om/BaseFacilityDataFilePeer.php';

  // include object class
  include_once 'lib/data/FacilityDataFile.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Facility_Data_File' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:59 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class FacilityDataFilePeer extends BaseFacilityDataFilePeer {

  /**
   * Find a FacilityDataFile object based on its ID
   *
   * @param int $id
   * @return FacilityDataFile
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


/**
 * Find all Facility DataFile Objects
 *
 * @return array <FacilityDataFile>
 */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  /**
   * Find Facility DataFile by the FacilityId and all given detail information
   * SELECT * FROM Facility_Data_File WHERE facility_id=? AND info_Type=? AND subinfo_Type=? AND groupby=?
   *
   * @param int $facility_id
   * @param String $info_Type, ex:'VisitorInformation'
   * @param String $subinfo_Type, ex: 'Driving Instruction', 'Site Location Map', 'Local Area Information'...
   * @param String $groupby. ex: Safety Policy...
   * @return array[FacilityDataFile]
   */
  public static function findByDetails($facility_id, $info_Type, $subinfo_Type, $groupby) {
    $c = new Criteria();
    $c->add(self::FACILITY_ID, $facility_id);
    $c->add(self::INFO_TYPE, $info_Type);
    $c->add(self::SUB_INFO_TYPE, $subinfo_Type);

    if(empty($groupby)) {
      $cton1 = $c->getNewCriterion(self::GROUPBY, '');
      $cton2 = $c->getNewCriterion(self::GROUPBY, null, Criteria::ISNULL);
      $cton1->addOr($cton2);
      $c->add($cton1);
    }
    else {
      $c->add(self::GROUPBY, $groupby);
    }

    return self::doSelect($c);
  }

  /**
   * Find Facility Proposal Preparation DataFiles by the FacilityId and all given detail information
   *
   * @param int $facility_id
   * @param String $info_Type
   * @param String $subinfo_Type
   * @return array[FacilityDataFile]
   */
  public static function findProposalPreparation($facility_id, $info_Type, $subinfo_Type) {
    $c = new Criteria();
    $c->add(self::FACILITY_ID, $facility_id);
    $c->add(self::INFO_TYPE, $info_Type);
    $c->add(self::SUB_INFO_TYPE, $subinfo_Type);

    return self::doSelect($c);
  }


  /**
   * Find Facility DataFile by the FacilityId and given information type
   * SELECT * FROM Facility_Data_File WHERE facility_id=? AND info_Type=?
   *
   * @param int $facility_id
   * @param String $info_Type, ex:'VisitorInformation'
   * @return array[FacilityDataFile]
   */
  public static function findByInfoType($facility_id, $info_Type) {
    $c = new Criteria();
    $c->add(self::FACILITY_ID, $facility_id);
    $c->add(self::INFO_TYPE, $info_Type);

    return self::doSelect($c);
  }


  /**
   * Find all Facility DataFiles by the FacilityId and given sub-information type
   * SELECT * FROM Facility_Data_File WHERE facility_id=? AND subinfo_Type=?
   *
   * @param int $facility_id
   * @param String $subinfo_Type, ex: 'Driving Instruction', 'Site Location Map', 'Local Area Information'...
   * @return array[FacilityDataFile]
   */
  public static function findBySubinfoType($facility_id, $subinfo_Type) {
    $c = new Criteria();
    $c->add(self::FACILITY_ID, $facility_id);
    $c->add(self::SUB_INFO_TYPE, $subinfo_Type);

    return self::doSelect($c);
  }


  /**
   * Find the Facility DataFile by its mapping DataFile ID
   * SELECT * FROM Facility_Data_File WHERE data_file_id=?
   *
   * @param int $data_file_id
   * @return FacilityDataFile Object
   */
  public static function findByFileId($data_file_id) {
    $c = new Criteria();
    $c->add(self::data_file_id, $data_file_id);

    return self::doSelectOne($c);
  }

} // FacilityDataFilePeer
?>
