<?php

  // include base peer class
  require_once 'lib/data/om/BasePersonPeer.php';

  // include object class
  include_once 'lib/data/Person.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Person' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:05 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class PersonPeer extends BasePersonPeer {

  /**
   * get search columns
   *
   * @return array of string
   */
	public static function getKeywordSearchColumns() {
	  return array(self::USER_NAME, self::FIRST_NAME, self::LAST_NAME);
	}


  /**
   * Find a Person object based on its ID
   *
   * @param int $id
   * @return Person
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all person for NEEScentral, with order by Last Name, First Name
   *
   * @return array <Person>
   */
  public static function findAll($sort = "") {

    if($sort == "username") $sortDB = PersonPeer::USER_NAME ;
    elseif($sort == "email") $sortDB = PersonPeer::E_MAIL ;
    elseif($sort == "firstname") $sortDB = PersonPeer::FIRST_NAME ;
    elseif($sort == "lastname") $sortDB = PersonPeer::LAST_NAME ;
    else $sortDB = PersonPeer::ID;

    $c = new Criteria();
    $c->addAscendingOrderByColumn($sortDB);

    return self::doSelect($c);
  }


  /**
   * Find the only one person given by UserName
   *
   * @param string $user_name
   * @return Person
   */
  public static function findByUserName($user_name) {

    $c = new Criteria();
    $c->add(self::USER_NAME, $user_name);

    return self::doSelectOne($c);
  }



  /**
   * Find the list of Person given by Email,
   * Most of the case it return only 1, However, in NEEScentral, sometime it returns more than 1
   *
   * @param string $email
   * @return array <Person>
   */
  public static function findByEmail($email) {

    $c = new Criteria();
    $c->add(self::E_MAIL, $email);
    $c->setIgnoreCase(true);

    return self::doSelect($c);
  }



  /**
   * Find the list of Person given by Email and Lastname,
   * Most of the case it return only 1, However, in NEEScentral, sometime it returns more than 1
   *
   * @param string $email
   * @param string $lastname
   * @return array <Person>
   */
  public static function findByEmailAndLastname($email, $lastname) {

    $c = new Criteria();
    $c->add(self::E_MAIL, $email);
    $c->add(self::LAST_NAME, $lastname);
    $c->setIgnoreCase(true);

    return self::doSelect($c);
  }




  /**
   * Find all people in NEEScentral have name like this ...
   * May be this is for fun only !!! Who know one need it ???
   *
   * @param string $user_name
   * @return array of Person Objects
   */
  public static function findLikeUserName($user_name) {

    $c = new Criteria();
    $c->add(self::USER_NAME, $user_name, Criteria::LIKE);

    return self::doSelect($c);
  }


  /**
   * Find all people belong to an entity given by entity_id and entity_type_id
   *
   * SELECT DISTINCT p.*
   * FROM
   *      person p INNER JOIN person_entity_role per
   *      ON per.person_id = p.id
   * WHERE
   *      per.entity_id = ? AND
   *      per.entity_type = ?
   * ORDER BY
   *      p.last_name,
   *      p.first_name
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @return array of Person Objects
   */
  public static function selectAllInEntity($entity_id, $entity_type_id) {

    require_once 'lib/data/PersonEntityRolePeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, PersonEntityRolePeer::PERSON_ID, Criteria::INNER_JOIN);
    $c->add(PersonEntityRolePeer::ENTITY_ID, $entity_id);
    $c->add(PersonEntityRolePeer::ENTITY_TYPE_ID, $entity_type_id);
    $c->addAscendingOrderByColumn(self::LAST_NAME);
    $c->addAscendingOrderByColumn(self::FIRST_NAME);
    $c->setDistinct();

    return self::doSelect($c);
  }


  /**
   * Find all people not belong to an entity given by entity_id and entity_type_id
   *
   * SELECT DISTINCT p.*
   * FROM
   *      Person p LEFT OUTER JOIN person_entity_role per ON
   *        per.person_id = p.id AND
   *        per.entity_id = ? AND
   *        per.entity_type = ?
   * WHERE
   *        per.id IS NULL
   * ORDER BY
   *        p.last_name,
   *        p.first_name
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @return array of Person Objects
   */
  public static function selectAllNotInEntity($entity_id, $entity_type_id) {

    require_once 'lib/data/PersonEntityRolePeer.php';

    $c = new Criteria();

    //Propel hack to use join with multiple conditions
    $c->addJoin(self::ID, PersonEntityRolePeer::PERSON_ID . ' AND '.
                          PersonEntityRolePeer::ENTITY_ID . ' = ' . $entity_id . ' AND ' .
                          PersonEntityRolePeer::ENTITY_TYPE_ID . ' = ' . $entity_type_id, 'LEFT OUTER JOIN');
    $c->add(PersonEntityRolePeer::ID, null, Criteria::ISNULL);
    $c->addAscendingOrderByColumn(self::LAST_NAME);
    $c->addAscendingOrderByColumn(self::FIRST_NAME);
    $c->setDistinct();

    return self::doSelect($c);
  }


  /**
   * Find all people belong to an entity given by an Entity Object
   *
   * @param BaseObject $entity
   * @return array of Person Objects
   */
  public static function findAllInEntity(BaseObject $entity) {
    return self::selectAllInEntity($entity->getId(), DomainEntityType::getEntityTypeId($entity));
  }


  /**
   * Find all people not belong to an entity given by an Entity Object
   *
   * @param BaseObject $entity
   * @return array of Person Objects
   */
  public static function findAllNotInEntity(BaseObject $entity) {
    return self::selectAllNotInEntity($entity->getId(), DomainEntityType::getEntityTypeId($entity));
  }


  /**
   * @desc Return a list of all of the NEEScentral users who are not yet associated with the entity.
   *
   * SELECT DISTINCT
   *        PERSON.ID,
   *        PERSON.LAST_NAME,
   *        PERSON.FIRST_NAME,
   *        PERSON.USERNAME
   * FROM
   *        PERSON LEFT OUTER JOIN PERSON_ENTITY_ROLE ON
   *            PERSON_ENTITY_ROLE.PERSON_ID = P.ID AND
   *            PERSON_ENTITY_ROLE.ENTITY_ID = $ENTITY_ID AND
   *            PERSON_ENTITY_ROLE.ENTITY_TYPE = $ENTITY_TYPE_ID
   * WHERE
   *        PERSON_ENTITY_ROLE.ID IS NULL
   * ORDER BY
   *        PERSON.LAST_NAME,
   *        PERSON.FIRST_NAME
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @return ResultSet of (UserID, last_name, first_name, UserName)
   */
  public static function getCandidateMembersForEntity($entity_id, $entity_type_id) {

    require_once 'lib/data/PersonEntityRolePeer.php';

    $c = new Criteria();

    $c->clearSelectColumns();
    $c->addSelectColumn(self::ID);
    $c->addSelectColumn(self::LAST_NAME);
    $c->addSelectColumn(self::FIRST_NAME);
    $c->addSelectColumn(self::USER_NAME);
    $c->addJoin(self::ID, PersonEntityRolePeer::PERSON_ID . ' AND ' .
                          PersonEntityRolePeer::ENTITY_ID . ' = ' . $entity_id . ' AND ' .
                          PersonEntityRolePeer::ENTITY_TYPE_ID . ' = ' . $entity_type_id, 'LEFT OUTER JOIN');
    $c->add(PersonEntityRolePeer::ID, null, Criteria::ISNULL);
    $c->addAscendingOrderByColumn(self::LAST_NAME);
    $c->addAscendingOrderByColumn(self::FIRST_NAME);
    $c->setDistinct();

    return self::doSelectRS($c);
  }


  /**
   * Get a list of Candidate Member for an Experiment
   *
   * @param Experiment $experiment
   * @return ResultSet
   */
  public static function getCandidateMembersForExperiment(Experiment $experiment) {
    if(is_null($experiment)) return null;

    $expid = $experiment->getId();
    $projid = $experiment->getProjectId();

    $c = new Criteria();
    $c->clearSelectColumns();
    $c->addSelectColumn(self::ID);
    $c->addSelectColumn(self::LAST_NAME);
    $c->addSelectColumn(self::FIRST_NAME);
    $c->addSelectColumn(self::USER_NAME);
    $c->addJoin(self::ID, PersonEntityRolePeer::PERSON_ID);
    $c->add(PersonEntityRolePeer::ENTITY_ID, $projid);
    $c->add(PersonEntityRolePeer::ENTITY_TYPE_ID, 1);
    $c->add(self::ID, self::ID . " NOT IN (SELECT DISTINCT p.id FROM Person p INNER JOIN Person_Entity_Role per ON per.person_id = p.id WHERE per.entity_Id = $expid AND per.entity_type_id = 3)", Criteria::CUSTOM);
    $c->addAscendingOrderByColumn(self::LAST_NAME);
    $c->addAscendingOrderByColumn(self::FIRST_NAME);

    $c->setDistinct();

    return self::doSelectRS($c);
  }

  /**
   * @desc Return a list of all of the NEEScentral users who are associated with this entity.
   *
   * @param int $entity_id
   * @param int $entity_type_id
   * @return ResultSet of (userID, last_name, first_name, Email, RoleName)
   */
  public function findMembersForEntity($entity_id, $entity_type_id) {

    $sql =
      "SELECT DISTINCT
          P.ID,
          P.LAST_NAME,
          P.FIRST_NAME,
          P.E_MAIL,
          R.DISPLAY_NAME AS ROLENAME
        FROM
          PERSON P,
          PERSON_ENTITY_ROLE PER,
          ROLE R
        WHERE
          P.ID = PER.PERSON_ID AND
          PER.ROLE_ID = R.ID AND
          PER.ENTITY_ID = ? AND
          PER.ENTITY_TYPE_ID = ?
        ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);

    return $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
  }
  
  public function findMembersForEntityCount($entity_id, $entity_type_id) {
    $iCount = 0;
    
    $sql =
      "SELECT COUNT (DISTINCT P.ID) AS TOTAL
        FROM
          PERSON P,
          AUTHORIZATION PER
        WHERE
          P.ID = PER.PERSON_ID AND
          PER.ENTITY_ID = ? AND
          PER.ENTITY_TYPE_ID = ?
        ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);

    $oResultSet = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while($oResultSet->next()){
      $iCount = $oResultSet->getInt("TOTAL");
    }
    return $iCount;
  }

  public function findMembersForEntityWithPagination($entity_id, $entity_type_id, $p_iLowerLimit, $p_iUpperLimit) {
    $iPersonIdArray = array();

    $sql =
      "SELECT *
	   FROM (
          SELECT DISTINCT
            P.ID, row_number()
          OVER (ORDER BY P.LAST_NAME) as rn
          FROM
            PERSON P,
            AUTHORIZATION PER
          WHERE
            P.ID = PER.PERSON_ID AND
            PER.ENTITY_ID = ? AND
            PER.ENTITY_TYPE_ID = ?
       ) WHERE rn BETWEEN ? AND ?";

    $conn = Propel::getConnection();
    $oStatement = $conn->prepareStatement($sql);
    $oStatement->setInt(1, $entity_id);
    $oStatement->setInt(2, $entity_type_id);
    $oStatement->setInt(3, $p_iLowerLimit);
    $oStatement->setInt(4, $p_iUpperLimit);
    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while($oResultSet->next()){
      $iPersonId = $oResultSet->getInt("ID");
      array_push($iPersonIdArray, $iPersonId);
    }

    return self::retrieveByPKs($iPersonIdArray);
  }



  public function findEditorMembersForEntityWithPagination($entity_id, $entity_type_id, $p_iLowerLimit, $p_iUpperLimit) {
    $sql =
      "SELECT *
	FROM (
          SELECT DISTINCT
            P.ID,
            P.LAST_NAME,
            P.FIRST_NAME,
            P.E_MAIL,
            P.USER_NAME,
            R.DISPLAY_NAME AS ROLENAME,
            A.PERMISSIONS,
            row_number()
          OVER (ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)) as rn
          FROM
            PERSON P,
            PERSON_ENTITY_ROLE PER,
            ROLE R,
            AUTHORIZATION A
          WHERE
            P.ID = PER.PERSON_ID AND
            PER.ROLE_ID = R.ID AND
            PER.ENTITY_ID = ? AND
            PER.ENTITY_TYPE_ID = ? AND
            A.ENTITY_ID = PER.ENTITY_ID AND
            A.ENTITY_TYPE_ID = PER.ENTITY_TYPE_ID
       ) WHERE rn BETWEEN ? AND ?";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);
    $stmt->setInt(3, $p_iLowerLimit);
    $stmt->setInt(4, $p_iUpperLimit);

    return $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
  }
  
  public function findMembersByRoleForEntity($entity_id, $entity_type_id, $p_strRoleArray) {

    $sql =
      "SELECT DISTINCT
          P.ID,
          P.LAST_NAME,
          P.FIRST_NAME,
          P.E_MAIL,
          P.USER_NAME,
          R.DISPLAY_NAME AS ROLENAME
        FROM
          PERSON P,
          PERSON_ENTITY_ROLE PER,
          ROLE R
        WHERE
          P.ID = PER.PERSON_ID AND
          PER.ROLE_ID = R.ID AND
          PER.ENTITY_ID = ? AND
          PER.ENTITY_TYPE_ID = ? AND (";  
    foreach($p_strRoleArray as $iKey=>$strRole){
      $sql = $sql . "UPPER(R.DISPLAY_NAME)=?";
      if($iKey < (sizeof($p_strRoleArray)-1)){
      	$sql = $sql . " OR ";
      }
    }      
    $sql = $sql . ") ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);
	
    $iIndex=3;
    foreach($p_strRoleArray as $strRole){
      $stmt->setString($iIndex, strtoupper($strRole));	
      ++$iIndex;
    } 
    return $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
  }


   public function findMembersPermissionsForEntity($entity_id, $entity_type_id) {

    $sql =
      "SELECT DISTINCT
          P.ID AS PERSON_ID,
          P.LAST_NAME,
          P.FIRST_NAME,
          P.E_MAIL,
          A.PERMISSIONS
        FROM
          PERSON P,
          AUTHORIZATION A
        WHERE
          P.ID = A.PERSON_ID AND
          A.ENTITY_ID = ? AND
          A.ENTITY_TYPE_ID = ?
        ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);

    return $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
  }


   public function findMembersWithFullPermissionsForEntity($entity_id, $entity_type_id) {

    $sql =
      "SELECT DISTINCT
          P.ID AS PERSON_ID,
          P.LAST_NAME,
          P.FIRST_NAME,
          P.E_MAIL,
          A.PERMISSIONS
        FROM
          PERSON P,
          AUTHORIZATION A
        WHERE
          P.ID = A.PERSON_ID AND
          A.PERMISSIONS = '" . Permissions::PERMISSION_ALL . "' AND
          A.ENTITY_ID = ? AND
          A.ENTITY_TYPE_ID = ?
        ORDER BY UPPER(P.LAST_NAME), UPPER(P.FIRST_NAME)";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $entity_id);
    $stmt->setInt(2, $entity_type_id);

    return $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
  }


  /**
   * Find total number of NEES users
   *
   * @return int $count
   */
  public function countNEESUsers() {

    $sql = "SELECT COUNT(*) AS COUNT FROM PERSON";

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      return $rs->get('COUNT');
    }
    return -1;
  }


  /**
   * Get the User group by category
   *
   * @return array (category=>count)
   */
  public function getUserGroupByCategory() {
    $sql = "SELECT CATEGORY, COUNT(*) AS COUNT FROM PERSON GROUP BY CATEGORY";

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    $ret = array();
    while($rs->next()) {
      $ret[$rs->get('CATEGORY')] = $rs->get('COUNT');
    }
    return $ret;
  }


} // PersonPeer
?>
