<?php

  // include base peer class
  require_once 'lib/data/om/BaseTrialPeer.php';

  // include object class
  include_once 'lib/data/Trial.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Trial' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:13 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class TrialPeer extends BaseTrialPeer {


  ###################################################################
  # Functions for Trial and SimulationRun
  ###################################################################

  /**
   * Get the columns searchable for Central UI
   *
   * @return array <String>
   */
  public static function getKeywordSearchColumns() {
    return array(self::NAME, self::TITLE, self::DESCRIPTION, self::OBJECTIVE);
  }


  /**
   * Moji, do some thing here
   *
   */
  public static function search() {

  }


  /**
   * Find one matched Trial (or Run) by expid and trialid
   *
   */
  public static function findOneByExperimentAndId($expid, $trialid) {
    $c = new Criteria();

    $c->add(self::DELETED, 0);
    $c->add(self::TRIALID, $trialid);
    $c->add(self::EXPID, $expid);

    return self::doSelectOne($c);
  }

  /**
   * Find a Trial (or SimulationRun) (not deleted) by PrimaryKey
   *
   * @param int $id
   * @return Trial
   */
  public static function find($id, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();

    $c->add(self::DELETED, 0);
    $c->add(self::TRIALID, $id);

    return self::doSelectOne($c,$conn);
   }


  /**
   * Find All Trials (or SimulationRun) (not deleted)
   *
   * @param Criteria $c
   * @param Connection $conn
   * @return array <Trial>
   */
  public static function findAll(Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::DELETED, 0);

    return self::doSelect($c,$conn);
  }


  /**
   * Find a Trial (or SimulationRun) (not deleted) that belong to an Experiment/Simulation given by its Name or ID
   *
   * @param int $expid
   * @param String_or_int $name_or_id
   * @param Criteria $c
   * @param Connection $conn
   * @return Trial (or Simulation)
   */
  public static function findByExperimentAndNameId($expid, $name_or_id, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::EXPID, $expid);

    $cton1 = $c->getNewCriterion(self::NAME, $name_or_id);
    $cton2 = $c->getNewCriterion(self::TRIALID, $name_or_id);
    $cton1->addOr($cton2);
    $c->add($cton1);

    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }

  /**
   * Find a Trial (or SimulationRun) (not deleted) that belong to an Experiment/Simulation given by its TITLE
   *
   * @param int $expid
   * @param stirng $title
   * @param Criteria $c
   * @param Connection $conn
   * @return Trial (or Simulation)
   */
  public static function findByExperimentIdAndTitle($expid, $title, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::EXPID, $expid);
    $c->add(self::TITLE, $title);
    $c->add(self::DELETED, 0);
    return self::doSelectOne($c);
  }


  /**
   * Find All Trial or SimulationRuns that belong to an Experiment
   * SELECT * FROM Trial WHERE expid=? AND NOT deleted ORDER BY TrialId
   *
   * @param int $expid
   * @return array <Trial (or SimulationRun)>
   */
  public static function findByExperiment($expid, $sort = "trialid") {

    if($sort == "name") {
      $sortStr = self::NAME;
    }
    elseif($sort == "title") {
      $sortStr = self::TITLE;
    }
    elseif($sort == "startDate") {
      $sortStr = self::START_DATE;
    }
    elseif($sort == "endDate") {
      $sortStr = self::END_DATE;
    }
    else {
      $sortStr = self::TRIALID;
    }

    $c = new Criteria();
    $c->add(self::EXPID, $expid);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn($sortStr);

    return self::doSelect($c);
  }


  /**
   * Find a Trial or SimulationRun that belong to an Experiment (or Simulation) given by its name
   * SELECT * FROM Trial WHERE name=? AND expid=? AND NOT deleted
   *
   * @param String $name
   * @param int $expid
   * @return Trial
   */
  public static function findByNameExperiment($name, $expid, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    return self::findByExperimentAndNameId($expid, $name, $c, $conn);
  }


  /**
   * Mark a trial (or Simulation)  as deleted, so that it will not display in the Central UI
   * UPDATE Trial SET deleted = true WHERE expid = ? AND trialid = ?
   *
   * @param int $expid
   * @param int $trialid
   */
  public static function deleteTrialById($expid, $trialid) {
    $trial = self::retrieveByPK($trialid);
    if($trial) {
      $trial->setDeleted(true);
      $trial->save();
    }
  }



  /**
   * Find the next available name for a Trial or SimulationRun based on its type: Run or Trial
   *
   * @param Experiment $exp
   * @return String name
   */
  public static function getNextAvailableName( Experiment $exp ) {

    if(is_null($exp)) {
      throw new Exception("Missing Experiment in the parameters.");
    }

    $trial_or_run = $exp->isSimulation() ? "Run" : "Trial";
    $sql = "SELECT NVL(MAX(REPLACE(name,'" . $trial_or_run . "-','') + 1), 1) AS N FROM Trial WHERE expid = " . $exp->getId() . " AND name LIKE '" . $trial_or_run . "%'";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      $num = $rs->getInt('N');
      if(is_numeric($num)) {
        return $trial_or_run . "-" . $num;
      }
    }
    // There was error
    throw new Exception("Could not generate Experiment Name");
  }

  ###################################################################
  # Functions for Trial
  ###################################################################

  /**
   * Find all Trials (not deleted)
   *
   * @return array <Trial>
   */
  public static function findAllTrials(Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID,self::CLASSKEY_TRIAL);

    return findAll($c, $conn);
  }


  /**
   * Find a Trial given by ID
   *
   * @param int $id
   * @param Criteria $c
   * @param Connection $conn
   * @return Trial
   */
  public static function findTrial($id, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID, self::CLASSKEY_TRIAL );

    return self::find($id, $c, $conn);
   }



  /**
   * Find a Trial that belong to an Experiment given by Trial Name or ID
   *
   * @param int $expid
   * @param string_or_int $name_or_id
   * @return Trial
   */
  public static function findTrialByExperimentAndNameId($expid, $name_or_id) {
    $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID, self::CLASSKEY_TRIAL );

    return self::findByExperimentAndNameId($expid, $name_or_id, $c);
  }


  /**
   * Find all Trials that belong to an Experiment
   *
   * @param int $expid
   * @return array <Trial>
   */
  public static function findAllTrialsInExperiment($expid, $sort="") {
    return self::findByExperiment($expid, $sort);
  }

  ###################################################################
  # Functions for SimulationRun
  ###################################################################

  /**
   * Find all SimulationRuns (not deleted)
   *
   * @return array <Simulation>
   */
  public static function findAllSimulationRuns(Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID,self::CLASSKEY_SIMULATIONRUN);

    return findAll($c, $conn);
  }


  /**
   * Find a SimulationRun that belong to a Simulation given by SimulationRun Name or ID
   *
   * @param int $expid
   * @param string_or_int $name_or_id
   * @param Criteria $c
   * @param Connection $conn
   * @return SimulationRun
   */
  public static function findRunBySimulationAndNameId($expid, $name_or_id, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID, self::CLASSKEY_SIMULATIONRUN );

    return self::findByExperimentAndNameId($expid, $name_or_id, $c);
  }


  /**
   * Find a SimulationRun by ID
   * @param int id
   * @param Criteria $c
   * @param Connection $conn
   * @return Simulation
   */
  public static function findSimulationRun($id, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIAL_TYPE_ID, self::CLASSKEY_SIMULATIONRUN );

    return self::find($id, $c, $conn);
   }


   /**
    * Find all SimulationRun limited in the range of min and max BaseAcceleration
    *
    * @param double $min
    * @param double $max
    * @return array <SimulationRun>
    */
  public static function findByBaseAcceleration($min = null, $max = null) {
    if (is_null($min) && is_null($max)) {
      return null;
    }

    $c = new Criteria();

    $cond = "";
    if ($min == $max) {
      $c->add(self::BASE_ACCELERATION, $min);
    }
    elseif (is_null($min)) {
      $c->add(self::BASE_ACCELERATION, $max, Criteria::LESS_THAN );
    }
    elseif (is_null($max)) {
      $c->add(self::BASE_ACCELERATION, $min, Criteria::GREATER_THAN );
    }
    else {
      $cton1 = $c->getNewCriterion(self::BASE_ACCELERATION, $max, Criteria::LESS_EQUAL );
      $cton2 = $c->getNewCriterion(self::BASE_ACCELERATION, $min, Criteria::GREATER_THAN);
      $cton1->addAnd($cton2);
      $c->add($cton1);
    }

    $c->add(self::DELETED, 0);

    return self::doSelect($c);
  }


  /**
   * Find all SimulationRuns that belong to a Simulation
   *
   * @param int $expid
   * @return array <Simulation>
   */
  function findBySimulation($expid) {
    return self::findByExperiment($expid);
  }


  /**
   * Find all SimulationRuns that belong to a Simulation
   *
   * @param int $expid
   * @return array <Simulation>
   */
  function findSimulationRuns($expid) {
    return self::findByExperiment($expid);
  }

  public static function suggestTrial($p_iExperimentId, $p_strTitle, $p_iLimit){
    $p_strTitle = strtoupper($p_strTitle);
    $p_strTitle = "'$p_strTitle%'";

    $strQuery = "SELECT *
                 FROM (
                   SELECT TRIALID, row_number()
                   OVER (ORDER BY TRIALID) as rn
                   FROM TRIAL
                   WHERE upper(TITLE) like $p_strTitle
                     AND EXPID = $p_iExperimentId
                 )
                 WHERE rn <= $p_iLimit";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->createStatement();
    $oResultsSet = $oStatement->executeQuery($strQuery, ResultSet::FETCHMODE_ASSOC);

    $iIdArray = array();
    while($oResultsSet->next()){
      $iId = $oResultsSet->getInt('TRIALID');
      array_push($iIdArray, $iId);
    }
    return self::retrieveByPKs($iIdArray);
  }


} // TrialPeer
?>
