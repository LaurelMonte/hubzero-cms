<?php

include_once 'lib/data/OrganizationPeer.php';
include_once 'lib/data/SensorSensorManifest.php';
include_once 'lib/data/SensorManifest.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Organization' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:05 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class FacilityPeer extends OrganizationPeer {

  /**
   * Get the column name that return from the Search
   *
   * @return array of String of column names
   */
  public static function getKeywordSearchColumns() {
    return array(
        self::SHORT_NAME,
        self::SYSADMIN,
        self::DEPARTMENT,
        self::LABORATORY,
        self::NSF_ACKNOWLEDGEMENT,
        self::SITENAME);
  }


  /**
   * Find all facilities
   * $sql = "SELECT * FROM Organization O JOIN Facility F ON O.orgid=F.facilityid ORDER BY O.name");
   *
   * @return array <Facility>
   *
   */
  public static function findAll(){
    $c = new Criteria();
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Moji, do some thing here
   *
   */
  public static function search() {

  }


  /**
   * Find a Facility object based on its ID
   *
   * @param int $id
   * @return Facility
   */
  public static function find($facid_or_shortname) {
    $c = new Criteria();

    $cton1 = $c->getNewCriterion(self::ORGID, $facid_or_shortname);
    $cton2 = $c->getNewCriterion(self::SHORT_NAME, $facid_or_shortname);
    $cton1->addOr($cton2);
    $c->add($cton1);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);

    return self::doSelectOne($c);
  }


  /**
   * Find a Facility given its short name
   *
   * @param string $shortName
   * @return Facility
   *
   */
  public static function findByShortName($shortName) {
    $c = new Criteria();
    $c->add(self::SHORT_NAME, $shortName);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);

    return self::doSelectOne($c);
  }



  /**
   * Find a Facility By Name
   *
   * @param string $name
   * @return Facility
   */
  public static function findByName($name) {

    $c = new Criteria();
    $c->add(self::NAME, $name);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);
    $c->setIgnoreCase(true);
    return self::doSelectOne($c);
  }


  /**
   * Find the only Facility given by its SensorManifestID
   *
   * @param int $sensor_manifest_id
   * @return Facility
   */
  public static function findBySensorManifest($sensor_manifest_id) {

    $c = new Criteria();
    $c->add(self::SENSOR_MANIFEST_ID, $sensor_manifest_id);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);

    return self::doSelectOne($c);
  }


  /**
   * Find the Facility which is the ownner of a specific sensor.
   *
   * @param int $sensorId
   * @return Facility
   */
  public static function findBySensor($sensorId) {

    $c = new Criteria();
    $c->addJoin(SensorSensorManifestPeer::SENSOR_ID, SensorPeer::SENSOR_ID);
    $c->addJoin(SensorSensorManifestPeer::MANIFEST_ID, SensorManifestPeer::ID);
    $c->addJoin(self::SENSOR_MANIFEST_ID, SensorManifestPeer::ID);
    $c->add(SensorPeer::SENSOR_ID, $sensorId);

    return self::doSelectOne($c);
  }


  /**
   * Find the Facilities participating in an Experiment
   *
   * sql =
   *    SELECT
   *        EF.id,
   *        EF.expid,
   *        F.* ,
   *        O.*
   *    FROM
   *        ExperimentFacility EF
   *            JOIN Facility F ON EF.facilityid=F.facilityid
   *            JOIN Organization O on F.facilityid=O.orgid
   *    WHERE
   *        EF.expid=?
   *
   * @param int $expid
   * @return array of Facility Objects
   */
  public static function findByExperiment($expid) {

    require_once 'lib/data/ExperimentFacilityPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ORGID, ExperimentFacilityPeer::FACILITYID);
    $c->add(ExperimentFacilityPeer::EXPID, $expid);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);
    $c->addAscendingOrderByColumn(self::SHORT_NAME);

    return self::doSelect($c);
  }


  /**
   * Find all facilities by a Person
   *
   * sql =
   *    SELECT
   *        O.*,
   *        F.*
   *    FROM
   *        Organization O
   *            JOIN Facility F ON O.orgid=F.facilityid
   *            JOIN PersonEntityRole PER ON (PER.entity_type_id=20 AND PER.entityId=F.facilityid)
   * WHERE PER.personId=? ORDER BY O.name;");

   * @param int $personId
   * @return array of Facility Objects
   */
  public static function findByPerson($person_id) {

    include_once 'lib/data/PersonEntityRole.php';

    $c = new Criteria();
    $c->addJoin(self::ORGID, PersonEntityRolePeer::ENTITY_ID . " AND" . PersonEntityRolePeer::ENTITY_TYPE_ID . "=20");
    $c->add(PersonEntityRolePeer::PERSON_ID, $person_id);
    $c->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);
    $c->addAscendingOrderByColumn(self::SHORT_NAME);
    $c->setDistinct();

    return self::doSelect($c);
  }


  /**
   * Get the Timezone for a Facility
   * select f.timezone from Organization f where f.facilityid='$fid'"
   *
   * @param int $facid
   */
  public static function getFacilityTimeZone($facid) {

    $sql = "SELECT timezone FROM Organization WHERE facilityid = $facid";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    return $rs->next() ? $rs->getString('TIMEZONE') : "";
  }


  /**
   *
      UPDATE
        Organization
      SET
        flexTPS_URL    = '$flexURL',
        url            = '$wsURL',
        description    = '$facDesc',
        image_URL      = '$imgURL',
        sysadminUser   = '$userSysAd',
        siteOpUser     = '$userSOM',
        nawiAdminUsers = '$userAdmins'
      WHERE
        facilityid = $fid";
   *
   */
  public static function updateNAWIFacility($fid, $flextps_url, $url, $description, $image_url, $sysadmin_user, $site_op_user, $nawi_admin_users) {

    // select from...
    $c1 = new Criteria();
    $c1->add(self::FACILITYID, $fid);
    $c1->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);

    // update set
    $c2 = new Criteria();
    $c2->add(self::FLEXTPS_URL, $flextps_url);
    $c2->add(self::URL, $url);
    $c2->add(self::DESCRIPTION, $description);
    $c2->add(self::IMAGE_URL, $image_url);
    $c2->add(self::SYSADMIN_USER, $sysadmin_user);
    $c2->add(self::SITE_OP_USER, $site_op_user);
    $c2->add(self::NAWI_ADMIN_USERS, $nawi_admin_users);

    BasePeer::doUpdate($c1, $c2, Propel::getConnection(self::DATABASE_NAME));
  }



  //$queryexp = "UPDATE Facility SET nawiStatus = '$optStat' WHERE facilityid = '$fid'";
  public static function updateNAWI_Status($fid, $nawi_status) {

    // select from...
    $c1 = new Criteria();
    $c1->add(self::FACILITYID, $fid);
    $c1->add(self::ORG_TYPE_ID, self::CLASSKEY_FACILITY);

    // update set
    $c2 = new Criteria();
    $c2->add(self::NAWI_STATUS, $nawi_status);

    BasePeer::doUpdate($c1, $c2, Propel::getConnection(self::DATABASE_NAME));
  }


  /**
   * Get the array of facility nawi_status for all facilities
   *
   * @return array(int=>String)
   */
  public static function getAllNawiStatus() {

    $sql = "SELECT FACILITYID, NAWI_STATUS FROM ORGANIZATION WHERE FACILITYID > 0";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    $ret = array();

    while($rs->next()) {
      $ret[$rs->getInt('FACILITYID')] = "/activities/common/images/ind_" . $rs->getString('NAWI_STATUS') . ".gif";
    }
    return $ret;
  }

} // FacilityPeer
?>
