<?php

  // include base peer class
  require_once 'lib/data/om/BaseThumbnailPeer.php';

  // include object class
  include_once 'lib/data/Thumbnail.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Thumbnail' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:13 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class ThumbnailPeer extends BaseThumbnailPeer {

  /**
   * Find a Thumbnail object based on its ID
   *
   * @param int $id
   * @return Thumbnail
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all Thumbnails
   *
   * @return array <Thumbnail>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }

  // This function used to be in DataFilePeer, moved to here to make it in correct place.
  public static function updateThumbnail($datafileId, $entityId, $entityTypeId) {

    $c = new Criteria();
    $c->add(self::ENTITY_ID, $entityId);
    $c->add(self::ENTITY_TYPE_ID, $entityTypeId);

    if(self::doCount($c) == 1) {
      $thumbObjRS = self::doSelect($c);
      $thumbObj = $thumbObjRS[0];
      $thumbObj->setDatafileId($datafileId);
      $thumbObj->save();
    }
  }


  /**
   * List all EntityID that have thumbnail given by EntityTypeId
   *
   * @param int $entityTypeId
   * @return array <EntityId>
   */
  public static function ListEntityThumbnails($entityTypeId) {

    $conn = Propel::getConnection();
    $stmt = $conn->createStatement();
    $sql = "SELECT ENTITY_ID FROM THUMBNAIL WHERE ENTITY_TYPE_ID = " . $entityTypeId;
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_ASSOC);

    $ret = array();
    while($rs->next()) {
      $ret[] = $rs->get('ENTITY_ID');
    }
    return $ret;
  }


  /**
   * Clone the Experiment Thumbnail to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentThumbnail(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              Thumbnail (ID, DATAFILE_ID, ENTITY_ID, ENTITY_TYPE_ID)
            SELECT
              THUMBNAIL_SEQ.NEXTVAL,
              DATAFILE_ID,
              ?,
              ENTITY_TYPE_ID
            FROM
              Thumbnail
            WHERE
              ENTITY_ID = ? AND
              ENTITY_TYPE_ID = 3";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }
  
} // ThumbnailPeer
?>
