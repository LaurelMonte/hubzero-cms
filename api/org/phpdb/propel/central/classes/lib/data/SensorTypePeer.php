<?php

  // include base peer class
  require_once 'lib/data/om/BaseSensorTypePeer.php';

  // include object class
  include_once 'lib/data/SensorType.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SensorType' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:09 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorTypePeer extends BaseSensorTypePeer {

  public static function getKeywordSearchColumns() {
    return array();
  }

  /**
   * Find a SensorType object based on its ID
   *
   * @param int $id
   * @return SensorType
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SensorTypes.  The name field isn't unique
   * in sensor_type.  Thus, we will create the SensorType object
   * using the distinct name.
   *
   * @return array <SensorType>
   */
  public static function findAll() {
    $oReturnArray = array();

    $strQuery = "select distinct name from sensor_type order by name";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while($oResultSet->next()){
      $strName = $oResultSet->getString("NAME");
      array_push($oReturnArray, self::findByName($strName));
    }

    return $oReturnArray;
  }


  /**
   * Find ONE SensorType by Name
   *
   * @param String $name
   * @return SensorType
   */
  public static function findByName($name) {

    $c = new Criteria();
    $c->add(self::NAME, $name);
    $c->setIgnoreCase(true);
    return self::doSelectOne($c);
  }

  /**
   * Find ONE SensorType by Name
   *
   * @param String $name
   * @return SensorType
   */
  public static function findByNameStartsWith($p_strName) {

    $c = new Criteria();
    $c->add(self::NAME, $p_strName."%", Criteria::LIKE);
    $c->setIgnoreCase(true);
    return self::doSelect($c);
  }


  /**
   * Find all SensorTypes in an Experiment
   *
   * @param int $expid
   * @return array <SensorType>
   */
  public static function findAvailableByExperiment($expid) {

    require_once 'lib/data/Location.php';
    require_once 'lib/data/LocationPlan.php';

    $c = new Criteria();
    $c->addJoin(self::ID, LocationPeer::SENSOR_TYPE_ID);
    $c->addJoin(LocationPlanPeer::ID, LocationPeer::PLAN_ID);
    $c->add(LocationPlanPeer::EXPID, $expid);
    $c->setDistinct();

    return self::doSelect($c);
  }


  /**
   * Find ONE SensorType by a SensorModel
   *
   * @param int $sensorModelId
   * @return SensorType
   */
  public static function findTypeByModel($sensorModelId) {

    require_once 'lib/data/SensorModelPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, SensorModelPeer::SENSOR_TYPEID);
    $c->add(SensorModelPeer::SENSOR_MODELID, $sensorModelId);

    return self::doSelectOne($c);
  }


} // SensorTypePeer
?>
