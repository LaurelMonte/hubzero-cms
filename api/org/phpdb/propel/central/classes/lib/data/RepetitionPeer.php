<?php

  // include base peer class
  require_once 'lib/data/om/BaseRepetitionPeer.php';

  // include object class
  include_once 'lib/data/Repetition.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Repetition' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:07 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class RepetitionPeer extends BaseRepetitionPeer {

  /**
   * Find a Repetition object based on its ID
   *
   * @param int $id
   * @return Repetition
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all Repetitions
   *
   * @return array <Repetition>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  /**
   * Find One Repetition belong to a Trial and given by a Name
   *
   * @param String $name
   * @param int $trialid
   * @return Repetition
   */
  public static function findByNameTrial($name_or_id, $trialid) {

    $c = new Criteria();

    $cton1 = $c->getNewCriterion(self::NAME, $name_or_id);
    $cton2 = $c->getNewCriterion(self::REPID, $name_or_id);
    $cton1->addOr($cton2);
    $c->add($cton1);

    $c->add(self::TRIALID, $trialid);
    $c->add(self::DELETED, 0);

    return self::doSelectOne($c);
  }


  /**
   * Find all Repetitions belongs to a Trial
   *
   * @param int $trialid
   * @return array <Repetition>
   */
  public static function findByTrial($trialid) {
    $c = new Criteria();
    $c->add(self::TRIALID, $trialid);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn(self::REPID);

    return self::doSelect($c);
  }


  /**
   * Delete a Repetition given by ID and its parent Trial
   *
   * @param int $trialid
   * @param int $repid
   */
  public static function deleteRepetitionById($trialid, $repid) {
    $rep = self::retrieveByPK($repid);

    if($rep && $rep->getTrial()->getId() == $trialid) {
      $rep->setDeleted(true);
      $rep->save();
    }
  }


  /**
   * Get the Next avaible Name of a Repetition
   *
   * @param Trial $trial
   * @return String
   */
  public static function getNextRepetitionName( Trial $trial ) {

    $sql = "SELECT NVL(MAX(REPLACE(name,'Rep-','') + 1), 1) AS N FROM Repetition WHERE trialid = " . $trial->getId();
    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    if($rs->next()) {
      $num = $rs->getInt('N');
      if(is_numeric($num)) {
        return "Rep-" . $num;
      }
    }

    // There was error
    throw new Exception("Could not generate Repetition Name");
  }

  public static function suggestRepetition($p_iTrialId, $p_strTitle, $p_iLimit){
    $p_strTitle = strtoupper($p_strTitle);
    $p_strTitle = "'$p_strTitle%'";

    $strQuery = "SELECT *
                 FROM (
                   SELECT REPID, row_number()
                   OVER (ORDER BY REPID) as rn
                   FROM REPETITION
                   WHERE upper(TITLE) like $p_strTitle
                     AND TRIALID = $p_iTrialId
                 )
                 WHERE rn <= $p_iLimit";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->createStatement();
    $oResultsSet = $oStatement->executeQuery($strQuery, ResultSet::FETCHMODE_ASSOC);

    $iIdArray = array();
    while($oResultsSet->next()){
      $iId = $oResultsSet->getInt('REPID');
      array_push($iIdArray, $iId);
    }
    return self::retrieveByPKs($iIdArray);
  }

  /**
   * Find a Trial (or SimulationRun) (not deleted) that belong to an Experiment/Simulation given by its TITLE
   *
   * @param int $expid
   * @param stirng $title
   * @param Criteria $c
   * @param Connection $conn
   * @return Trial (or Simulation)
   */
  public static function findByTrialIdAndTitle($trialid, $title, Criteria $c = null, Connection $conn = null) {
    if (is_null($c)) $c = new Criteria();
    $c->add(self::TRIALID, $trialid);
    $c->add(self::TITLE, $title);
    $c->add(self::DELETED, 0);
    return self::doSelectOne($c);
  }

} // RepetitionPeer
?>
