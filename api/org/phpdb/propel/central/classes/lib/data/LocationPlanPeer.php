<?php

// include base peer class
require_once 'lib/data/om/BaseLocationPlanPeer.php';

// include object class
include_once 'lib/data/LocationPlan.php';


/**
 * Skeleton subclass for performing query and update operations on the 'LocationPlan' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb 25 06:19:19 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class LocationPlanPeer extends BaseLocationPlanPeer {


  /**
   * Find All LocationPlans
   *
   * @return array<LocationPlan>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  /**
   * Find all sensor location plans
   *
   * @return array of LocationPlan Objects type SensorLacationPlan
   */
  public static function findAllSensorLocationPlans() {
    $c = new Criteria();
    $c->add(self::PLAN_TYPE_ID, self::CLASSKEY_SENSORLOCATIONPLAN);

    return self::doSelect($c);
  }



  /**
   * Find all source location plans
   *
   * @return array of LocationPlan Objects type SourceLocationPlan
   */
  public static function findAllSourceLocationPlans() {
    $c = new Criteria();
    $c->add(self::PLAN_TYPE_ID, self::CLASSKEY_SOURCELOCATIONPLAN);

    return self::doSelect($c);
  }


  /**
   * Find a SourceLocationPlan By Id
   *
   * @param int $id
   * @return SourceLocationPlan Object
   */
  public static function findSourceLocationPlanById($id) {
    return self::findByIdAndPlanTypeId($id, self::CLASSKEY_SOURCELOCATIONPLAN);
  }



  /**
   * Find a SensorLocationPlan By Id
   *
   * @param int $id
   * @return SensorLocationPlan Object
   */
  public static function findSensorLocationPlanById($id) {
    return self::findByIdAndPlanTypeId($id, self::CLASSKEY_SENSORLOCATIONPLAN);
  }


  /**
   * Find a LocationPlan By Id and Location Plan Type ID (Sensor Location Plan or Source Location Plan)
   *
   * @param int $id
   * @param int $plantypeid
   * @return LocationPlan Object
   */
  public static function findByIdAndPlanTypeId($id, $plantypeid) {
    $c = new Criteria();
    $c->add(self::ID, $id);
    $c->add(self::PLAN_TYPE_ID, $plantypeid);

    return self::doSelectOne($c);
  }


  /**
   * Find a LocationPlan object based on its ID
   *
   * @param int $id
   * @return LocationPlan
   */
  public static function find($lpid) {
    return self::retrieveByPK($lpid);
  }



  /**
   * Find all location plan given by experiment ID
   *
   * @param int $expid
   * @return array <LocationPlan>
   */
  public static function findAllByExperiment($expid) {
    $c = new Criteria();
    $c->add(self::EXPID, $expid);
    $c->add(self::TRIAL_ID, null, Criteria::ISNULL);

    return self::doSelect($c);
  }


  /**
   * Find all location plan given by trial ID
   *
   * @param int $trialid
   * @return array <LocationPlan>
   */
  public static function findAllByTrial($trialid) {
    $c = new Criteria();
    $c->add(self::TRIAL_ID, $trialid);

    return self::doSelect($c);
  }



  /**
   * Find all location plan given by experiment ID and its location plan type ID
   *
   * @param int $expid
   * @param int $plantypeid
   * @return Array of Location Plan Objects
   */
  public static function findByExperimentAndPlanTypeID($expid, $plantypeid) {
    $c = new Criteria();
    $c->add(self::PLAN_TYPE_ID, $plantypeid);
    $c->add(self::EXPID, $expid);
    $c->add(self::TRIAL_ID, null, Criteria::ISNULL);

    $c->addAscendingOrderByColumn(self::ID);

    return self::doSelect($c);
  }




  /**
   * Find all location plan given by trial ID and its location plan type ID
   *
   * @param int $trialid
   * @param int $plantypeid
   * @return Array of Location Plan Objects
   */
  public static function findByTrialAndPlanTypeID($trialid, $plantypeid) {
    $c = new Criteria();
    $c->add(self::PLAN_TYPE_ID, $plantypeid);
    $c->add(self::TRIAL_ID, $trialid);

    $c->addAscendingOrderByColumn(self::ID);

    return self::doSelect($c);
  }



  /**
   * Find Sensor Location Plan by given Experiment ID
   * was: findByExperiment (duplicate function name with SourceLocationPlan)
   * SELECT * FROM SensorLocationPlan WHERE expid=?
   *
   * @param int $expid: Experiment ID
   * @return array of LocationPlan type SensorLocationPlan
   */
  public static function findSensorLocationPlanByExperiment($expid) {
    return self::findByExperimentAndPlanTypeID($expid, self::CLASSKEY_SENSORLOCATIONPLAN);
  }



  /**
   * Find Source Location Plan by given Experiment ID
   *
   * @param int $expid: Experiment ID
   * @return array of LocationPlan type SourceLocationPlan
   */
  public static function findSourceLocationPlanByExperiment($expid) {
    return self::findByExperimentAndPlanTypeID($expid, self::CLASSKEY_SOURCELOCATIONPLAN);
  }



  /**
   * Find Source Location Plan by given Trial ID
   *
   * @param int $trialid: Trial ID
   * @return array of LocationPlan type SourceLocationPlan
   */
  public static function findSourceLocationPlanByTrial($trialid) {
    return self::findByTrialAndPlanTypeID($trialid, self::CLASSKEY_SOURCELOCATIONPLAN);
  }



  /**
   * Find Sensor Location Plan by given Trial ID
   *
   * @param int $trialid: Trial ID
   * @return array of LocationPlan type SensorLocationPlan
   */
  public static function findSensorLocationPlanByTrial($trialid) {
    return self::findByTrialAndPlanTypeID($trialid, self::CLASSKEY_SENSORLOCATIONPLAN);
  }


  /**
   * Find sensor location plan by given Experiment ID: $expid, Location label: $label, and Sensor Location Plan Name: $slp_name
   * Query:
   *    SELECT SLP.* FROM SensorLocationPlan SLP
   *         JOIN SensorLocation SL ON SL.planId = SLP.id
   *         JOIN Location L ON SL.LocationId = L.id
   *         WHERE SLP.expid = ?
   *         AND L.label = ?
   *         AND SLP.name = ?
   *
   * @param int $expid
   * @param String $label
   * @param String $slp_name
   * @return Sensor Location Plan Object
   */
  public static function findByExperimentLabelSLPName($expid, $label, $slp_name) {

    $c = new Criteria();
    $c->addJoin(self:: ID, LocationPeer::PLAN_ID);
    $c->add(self::PLAN_TYPE_ID, self::CLASSKEY_SENSORLOCATIONPLAN);
    $c->add(self::EXPID, $expid);
    $c->add(self::TRIAL_ID, null, Criteria::ISNULL);
    $c->add(self::NAME, $slp_name);
    $c->add(LocationPeer::LABEL, $label);

    return self::doSelect($c);
  }



  /**
   * Clone the Experiment LocationPlan to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentLocationPlan(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              Location_Plan (ID, EXPID, PLAN_TYPE_ID, NAME)
            SELECT
              LOCATION_PLAN_SEQ.NEXTVAL,
              ?,
              PLAN_TYPE_ID,
              NAME
            FROM
              Location_Plan
            WHERE
              EXPID = ? AND TRIAL_ID IS NULL";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }


} // LocationPlanPeer
