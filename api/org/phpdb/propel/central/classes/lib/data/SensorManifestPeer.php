<?php

  // include base peer class
  require_once 'lib/data/om/BaseSensorManifestPeer.php';
  require_once 'lib/data/om/BaseSensorSensorManifestPeer.php';

  // include object class
  include_once 'lib/data/SensorManifest.php';
  include_once 'lib/data/SensorSensorManifest.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SensorManifest' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:08 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorManifestPeer extends BaseSensorManifestPeer {

  /**
   * Find a SensorManifest object based on its ID
   *
   * @param int $id
   * @return SensorManifest
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SensorManifests
   *
   * @return array <SensorManifest>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  //case "findByExperiment":
  //return new Finder($finderName, "SELECT sm.* FROM SensorManifest sm, Organization o, ExperimentOrganization eo WHERE eo.orgid = o.orgid AND sm.id = o.sensorManifestId AND eo.expid = ?");
  public static function findByExperiment($expid) {

    require_once 'lib/data/OrganizationPeer.php';
    require_once 'lib/data/ExperimentOrganizationPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, OrganizationPeer::SENSOR_MANIFESTID);
    $c->addJoin(ExperimentOrganizationPeer::ORGID, OrganizationPeer::ORGID);
    $c->add(ExperimentOrganizationPeer::EXPID, $expid);

    return self::doSelect($c);
  }



  //case "findByFacility":
  //TODO: Could be a mistake , there is no column SM.sensorManifestId in the query, use id instead
  //return new Finder($finderName, "SELECT SM.* FROM SensorManifest SM, Facility F, Organization O WHERE SM.sensorManifestId=O.sensorManifestId AND O.orgid=F.facilityid AND F.facilityid=?");
  public static function findByFacility($facilityid) {

    require_once 'lib/data/OrganizationPeer.php';
    require_once 'lib/data/FacilityPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, OrganizationPeer::SENSOR_MANIFESTID);
    $c->addJoin(FacilityPeer::FACILITYID, OrganizationPeer::ORGID);
    $c->add(FacilityPeer::FACILITYID, $facilityid);

    return self::doSelect($c);
  }


  //case "findInPoolByExperiment":
  //return new Finder($finderName, "SELECT DISTINCT SM.* FROM SensorManifest SM JOIN SensorPool SP ON SP.manifestId = SM.id WHERE SP.expId = ? ORDER BY SM.name");
  public static function findInPoolByExperiment($expId) {

    require_once 'lib/data/SensorPoolPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, SensorPoolPeer::MANIFEST_ID);
    $c->add(SensorPoolPeer::EXPID, $expId);
    $c->addAscendingOrderByColumn(self::NAME);
    $c->setDistinct();

    return self::doSelect($c);
  }


  /**
   * Find one SensorManifest by SensorId and ExperimentId
   *
   * @param int $sensorId
   * @param int $expId
   * @return SensorManifest
   */
  public static function findBySensorExperiment($sensorId, $expId) {

    require_once 'lib/data/SensorPoolPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ID, SensorSensorManifestPeer::MANIFEST_ID);
    $c->addJoin(self::ID, SensorPoolPeer::MANIFEST_ID);
    $c->add(SensorSensorManifestPeer::SENSORID, $sensorId);
    $c->add(SensorPoolPeer::EXPID, $expId);

    return self::doSelectOne($c);
  }






} // SensorManifestPeer
?>
