<?php

// include base peer class
require_once 'lib/data/om/BaseDataFilePeer.php';
require_once 'lib/data/EntityTypePeer.php';
require_once 'lib/data/EntityType.php';
require_once 'api/org/nees/static/Files.php';
require_once 'api/org/nees/lib/filesystem/FileCommandAPI.php';

// include object class
include_once 'lib/data/DataFile.php';

/**
 * Skeleton subclass for performing query and update operations on the 'DataFile' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:51 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class DataFilePeer extends BaseDataFilePeer {

    /**
     * Find a DataFile object based on its ID
     *
     * @param int $id
     * @return DataFile
     */
    public static function find($id) {
        return self::retrieveByPK($id);
    }

    /**
     * Find all DataFile objects includes all datafiles that mark with deleted
     *
     * @return array <DataFile>
     */
    public static function findAll() {
        return self::doSelect(new Criteria());
    }

    /**
     * Get the column name that return from the Search
     *
     * @return array of String of column names
     */
    public static function getKeywordSearchColumns() {
        return array(
            self::NAME,
            self::TITLE,
            self::AUTHORS,
            self::DESCRIPTION
        );
    }

    /**
     * Find DataFile object by full path
     * SELECT * FROM DataFile WHERE concat(path,'/',name)= ? AND NOT deleted
     *
     * @param String $path_and_name
     * @return DataFile object
     */
    public static function findByFullPath($path_and_name) {

        $path = dirname($path_and_name);
        $name = basename($path_and_name);

        return self::findOneMatch($name, $path);
    }

    public static function findByPathName(){

    }

    /**
     * Find DataFile id by name and path recursively
     * SELECT id FROM DataFile WHERE name=? AND path like ? AND NOT deleted
     *
     * @param String $name
     * @param String $path_like
     * @return array of DataFile ids
     */
    public static function findByNamePath($name, $path_like) {
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID);
        $c->add(self::NAME, $name);
        $c->add(self::PATH, $path_like, Criteria::LIKE);
        $c->add(self::DELETED, 0);
        return self::doSelectRS($c);
    }

    /**
     *
     * @param string $p_strName
     * @param int $p_iLowerLimit
     * @param int $p_iUpperLimit
     * @return array
     */
    public static function findByName($p_strName, $p_iLowerLimit=1, $p_iUpperLimit=10) {
        $oDataFileArray = array();

      $strQuery = "SELECT *
                   FROM (
                      select df.id, row_number()
                      OVER (ORDER BY df.name) as rn
                      from data_file df
                      where upper(df.name) like ?
                        and df.deleted=?
                        and df.directory=?
                        and df.path not like ?
                  )WHERE rn BETWEEN ? AND ?";

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setString(1, "%".strtoupper($p_strName)."%");
      $oStatement->setInt(2, 0);
      $oStatement->setInt(3, 0);
      $oStatement->setString(4, "%".Files::GENERATED_PICS);
      $oStatement->setInt(5, $p_iLowerLimit);
      $oStatement->setInt(6, $p_iUpperLimit);
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iId = $oResultSet->getInt("ID");
        $oDataFile = self::retrieveByPK($iId);
        array_push($oDataFileArray, $oDataFile);
      }

      return $oDataFileArray;
    }

    public static function findByNameCount($p_strName) {
      $iCount = 0;

      $strQuery = "select count(df.id) as TOTAL
                   from data_file df
                   where upper(df.name) like ?
                     and df.deleted=?
                     and df.directory=?
                     and df.path not like ?";

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setString(1, "%".strtoupper($p_strName)."%");
      $oStatement->setInt(2, 0);
      $oStatement->setInt(3, 0);
      $oStatement->setString(4, "%".Files::GENERATED_PICS);
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iCount = $oResultSet->getInt("TOTAL");
      }

      return $iCount;
    }

    /**
     *
     * @param string $p_strTitle
     * @param int $p_iLowerLimit
     * @param int $p_iUpperLimit
     * @return array
     */
    public static function findByTitle($p_strTitle, $p_iLowerLimit=1, $p_iUpperLimit=10) {
      $oDataFileArray = array();

      $strQuery = "SELECT *
                   FROM (
                      select df.id, row_number()
                      OVER (ORDER BY df.title) as rn
                      from data_file df
                      where upper(df.title) like ?
                        and df.deleted=?
                        and df.directory=?
                        and df.path not like ?
                  )WHERE rn BETWEEN ? AND ?";

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setString(1, "%".strtoupper($p_strTitle)."%");
      $oStatement->setInt(2, 0);
      $oStatement->setInt(3, 0);
      $oStatement->setString(4, "%".Files::GENERATED_PICS);
      $oStatement->setInt(5, $p_iLowerLimit);
      $oStatement->setInt(6, $p_iUpperLimit);
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iId = $oResultSet->getInt("ID");
        $oDataFile = self::retrieveByPK($iId);
        array_push($oDataFileArray, $oDataFile);
      }

      return $oDataFileArray;
    }

    /**
     *
     * @param string $p_strTitle
     * @param int $p_iLowerLimit
     * @param int $p_iUpperLimit
     * @return array
     */
    public static function findByTitleCount($p_strTitle) {
      $iCount = 0;

      $strQuery = "select count(df.id) as TOTAL
                   from data_file df
                   where upper(df.title) like ?
                     and df.deleted=?
                     and df.directory=?
                     and df.path not like ?";

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setString(1, "%".strtoupper($p_strTitle)."%");
      $oStatement->setInt(2, 0);
      $oStatement->setInt(3, 0);
      $oStatement->setString(4, "%".Files::GENERATED_PICS);
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iCount = $oResultSet->getInt("TOTAL");
      }

      return $iCount;
    }

    /**
     * Find all DataFile objects (files and directories) in current path only, not in sub-directories
     * SELECT * FROM DataFile WHERE path = ? AND NOT deleted
     *
     * @param String $path: current path
     * @return array of DataFile objects
     */
    public static function findByDirectory($path) {
        $c = new Criteria();
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);
        $c->addDescendingOrderByColumn(self::DIRECTORY);
        $c->addDescendingOrderByColumn(self::NAME);
        //$c->addAscendingOrderByColumn(self::NAME);
        return self::doSelect($c);
    }

    public static function findByDirectoryWithLike($path) {
        $c = new Criteria();
        $c->add(self::PATH, $path . "%", Criteria::LIKE);
        $c->add(self::DELETED, 0);
        $c->addDescendingOrderByColumn(self::DIRECTORY);
        return self::doSelect($c);
    }

    /**
     * Find all DataFile object within a path, return order of directories first and then files
     * SELECT * FROM DataFile WHERE path = ? AND NOT deleted order by directory desc
     *
     * @param String $path
     * @return array of DataFile objects
     */
    public static function findByDirectoryWithOrderBy($path) {
        $c = new Criteria();
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);
        $c->addDescendingOrderByColumn(self::DIRECTORY);

        return self::doSelect($c);
    }

    /**
     * Find only DataFile objects that are FILES only in the given path
     * SELECT * FROM DataFile WHERE path = ? and NOT directory AND NOT deleted
     *
     * @param String $path
     * @return array <DataFile>
     */
    public static function findFilesByDirectory($path) {
        $c = new Criteria();
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 0);

        return self::doSelect($c);
    }

    /**
     * Find all DataFile Objects by a given path-like (using in: DeleteChannelList)
     * SELECT * FROM DataFile WHERE path like ? AND NOT deleted
     *
     * @param String $path: the path of data file
     * @return array <DataFile>
     */
    public static function findByConfigId($path) {

        $c = new Criteria();
        $c->add(self::PATH, "%$path", Criteria::LIKE);
        $c->add(self::DELETED, 0);

        return self::doSelect($c);
    }

    /**
     * Find all DataFiles (directories and files) in a given path
     * SELECT * FROM DataFile WHERE path LIKE ? AND NOT deleted
     *
     * @param String $path
     * @return array <DataFile>
     */
    public static function findAllInDir($path) {
        $c = new Criteria();
        $c->add(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($path) . "/%'", Criteria::CUSTOM);
        $c->add(self::DELETED, 0);
        $c->addDescendingOrderByColumn(self::DIRECTORY);
        $c->addAscendingOrderByColumn(self::PATH);
        return self::doSelect($c);
    }

    /**
     * Find all DataFiles that are files only not directories by a given path
     * SELECT * FROM DataFile WHERE concat(path,'/') LIKE ? AND NOT directory AND NOT deleted
     *
     * @param String $pathlike: the path-like directory
     * @return array of DataFile objects
     */
    public static function findFilesInDirs($path) {
        $c = new Criteria();
        $c->add(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($path) . "/%'", Criteria::CUSTOM);
        $c->add(self::DIRECTORY, 0);
        $c->add(self::DELETED, 0);

        return self::doSelect($c);
    }

    /**
     * Find the DataFile object given the path and name, must be return only one DataFile
     * SELECT * FROM DataFile WHERE name=? AND path=? AND NOT deleted
     *
     * @param String $name
     * @param String $path
     * @return DataFile
     */
    public static function findOneMatch($name, $path) {
        $c = new Criteria();
        $c->add(self::NAME, $name);
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);

        return self::doSelectOne($c);
    }

    /**
     * Find all DataFiles (directories and files) in a given path
     * SELECT * FROM DataFile WHERE path LIKE ? AND NOT deleted
     *
     * @param String $pathlike: the path-like directory
     * @return array of DataFile objects
     */
    public static function findAllExport($pathlike) {
        return self::findAllInDir($pathlike);
    }

    /**
     * Find all dataFiles (directoris and files) given by a path
     * SELECT * FROM DataFile WHERE concat(path,'/') LIKE ? AND NOT deleted ORDER BY directory desc, path, name
     *
     * @param String $pathlike
     * @return array of dataFile Objects in order of 1/Directory 2/Path 3/Name
     */
    public static function findAllWithOrder($pathlike) {
        $c = new Criteria();
        $c->add(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($pathlike) . "'", Criteria::CUSTOM);
        $c->add(self::DELETED, 0);
        $c->addDescendingOrderByColumn(self::DIRECTORY);
        $c->addAscendingOrderByColumn(self::PATH);
        $c->addAscendingOrderByColumn(self::NAME);

        return self::doSelect($c);
    }

    /**
     * Find the thumbnail associate with an entity given by the EntityID and EntityTypeId
     * SELECT d.* FROM DataFile d, Thumbnail t WHERE d.id = t.datafileId AND t.entityId = ? AND t.entity_type_id = ?
     *
     * @param int $entityId: The Id of entity
     * @param int $entityTypeId: The ID of entity Type (Project = 1, Experiment = 3...)
     * @return DataFile Object that represents for the thumbnail
     */
    public static function findThumbnailDataFile($entityId, $entityTypeId) {

        require_once 'lib/data/ThumbnailPeer.php';

        $c = new Criteria();
        $c->addJoin(self::ID, ThumbnailPeer::DATAFILE_ID);
        $c->add(ThumbnailPeer::ENTITY_ID, $entityId);
        $c->add(ThumbnailPeer::ENTITY_TYPE_ID, $entityTypeId);

        return self::doSelectOne($c);
    }

    /**
     * To delete all DataFiles in the given path recursively
     * DELETE FROM DataFile WHERE concat(path,'/') LIKE ? OR concat(path,'/',name) = ?
     *
     * @param String $path: The given path
     */
    public static function deleteAllIncludedDir($path) {

        $c = new Criteria();
        $cton1 = $c->getNewCriterion(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($path) . "/%'", Criteria::CUSTOM);
        $cton2 = $c->getNewCriterion(self::PATH, "CONCAT(" . self::PATH . ", CONCAT('/'," . self::NAME . ")) = '" . self::double_single_quote($path) . "'", Criteria::CUSTOM);
        $cton1->addOr($cton2);
        $c->add($cton1);

        return self::doDelete($c);
    }

    /**
     * Delete a single DataFile given by a full path
     *
     * @param String $fullPath
     */
    public static function deleteSingleFileWithAbsolutePath($fullPath) {

        $name = basename($fullPath);
        $path = dirname($fullPath);

        $c = new Criteria();
        $c->add(self::NAME, $name);
        $c->add(self::PATH, $path);

        self::doDelete($c);
    }

    /**
     * To delete all DataFiles in the given path recursively
     * DELETE FROM DataFile WHERE path REGEXP ?
     *
     * @param String $path: The given path
     */
    public static function recursiveDelete($path) {

        return self::deleteAllIncludedDir($path);
    }

    /**
     * Get the list of DataFile (Not all fields, just Name, Directory, Created, FleSize for performance) in a given path
     * SELECT name, directory, created, filesize FROM DataFile WHERE path = ? AND NOT deleted order by $orderby $asc_or_desc
     *
     * @param String $path
     * @param String $orderby
     * @param boolean $ascending_order
     * @return the ResultSet of list of data
     */
    public static function findDataFileBrowserRS($path, $orderby = self::NAME, $ascending_order = true) {

        $c = new Criteria();
        /*
          $c->clearSelectColumns();
          $c->addSelectColumn(self::ID);
          $c->addSelectColumn(self::NAME);
          $c->addSelectColumn(self::DIRECTORY);
          $c->addSelectColumn(self::CREATED);
          $c->addSelectColumn(self::FILESIZE);
          $c->addSelectColumn(self::DESCRIPTION);
          $c->addSelectColumn(self::TITLE);
          $c->addSelectColumn(self::AUTHORS);
          $c->addSelectColumn(self::AUTHOR_EMAILS);
          $c->addSelectColumn(self::HOW_TO_CITE);
          $c->addSelectColumn(self::THUMB_ID);
         */
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);

        $c->addDescendingOrderByColumn(self::DIRECTORY);

        if ($orderby == self::CREATED) {
            $ascending_order ? $c->addAscendingOrderByColumn(self::CREATED) : $c->addDescendingOrderByColumn(self::CREATED);
        } elseif ($orderby == self::FILESIZE) {
            $ascending_order ? $c->addAscendingOrderByColumn(self::FILESIZE) : $c->addDescendingOrderByColumn(self::FILESIZE);
        } else {
            $ascending_order ? $c->addAscendingOrderByColumn(self::NAME) : $c->addDescendingOrderByColumn(self::NAME);
        }

        return self::doSelectRS($c);
    }

    /**
     * Get the list of DataFile (Not all fields, just Name, Directory, Created, FleSize for performance) in a given path
     * SELECT name, directory, created, filesize FROM DataFile WHERE path = ? AND NOT deleted order by $orderby $asc_or_desc
     *
     * @param String $path
     * @param String $orderby
     * @param boolean $ascending_order
     * @return the ResultSet of list of data
     */
    public static function findDataFileBrowser($path, $orderby = self::NAME, $ascending_order = true) {

        $c = new Criteria();
        $c->add(self::PATH, $path);
        $c->add(self::DELETED, 0);

        $c->addDescendingOrderByColumn(self::DIRECTORY);

        if ($orderby == self::CREATED) {
            $ascending_order ? $c->addAscendingOrderByColumn(self::CREATED) : $c->addDescendingOrderByColumn(self::CREATED);
        } elseif ($orderby == self::FILESIZE) {
            $ascending_order ? $c->addAscendingOrderByColumn(self::FILESIZE) : $c->addDescendingOrderByColumn(self::FILESIZE);
        } else {
            $ascending_order ? $c->addAscendingOrderByColumn(self::NAME) : $c->addDescendingOrderByColumn(self::NAME);
        }

        return self::doSelect($c);
    }

    /**
     * Select all directories and sub-directories given by a path, get column id, path, name only for fast performance
     * SELECT id, path, name FROM DataFile WHERE concat(path,'/') LIKE '%" . $rootpath . "%' AND not deleted AND directory ORDER BY path, name
     *
     * @param String $path
     * @return ResultSet of records
     */
    public static function findAllDirectoriesByPath($path) {
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID);
        $c->addSelectColumn(self::PATH);
        $c->addSelectColumn(self::NAME);
        $c->add(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($path) . "/%'", Criteria::CUSTOM);
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 1);
        $c->addAscendingOrderByColumn(self::PATH);
        $c->addAscendingOrderByColumn(self::NAME);

        return self::doSelectRS($c);
    }

    /**
     * Select all directories and sub-directories given by a path, get column id, path, name only for fast performance but not in Experiment
     * SELECT id, path, name FROM DataFile WHERE concat(path,'/') LIKE '%" . $rootpath . "%' AND not deleted AND directory ORDER BY path, name
     *
     * @param String $path
     * @return ResultSet of records
     */
    public static function findAllDirectoriesInProjectLevel($projectPath) {

        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID);
        $c->addSelectColumn(self::PATH);
        $c->addSelectColumn(self::NAME);
        $c->add(
                self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . $projectPath . "/%' AND " .
                self::NAME . " NOT LIKE 'Experiment-%' AND " .
                self::NAME . " NOT LIKE 'Simulation-%' AND " .
                self::PATH . " NOT LIKE '" . $projectPath . "/Experiment-%' AND " .
                self::PATH . " NOT LIKE '" . $projectPath . "/Experiment-%' AND " .
                self::PATH . " NOT LIKE '" . $projectPath . "/Simulation-%'", Criteria::CUSTOM);
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 1);
        $c->addAscendingOrderByColumn(self::PATH);
        $c->addAscendingOrderByColumn(self::NAME);

        return self::doSelectRS($c);
    }

    /**
     * Update metada information recursively
     *
     * @param String $path
     * @param String $authors
     * @param String $authoremails
     * @param String $description
     * @param String $howtocite
     * @param String $title
     */
    public static function recursiveUpdateMetadata($path, $authors, $authoremails, $description, $howtocite, $title) {

        // Prevent mistake from our developers !
        if (empty($path))
            return;

        if (empty($authors))
            $authors = null;
        if (empty($authoremails))
            $authoremails = null;
        if (empty($description))
            $description = null;
        if (empty($howtocite))
            $howtocite = null;
        if (empty($title))
            $title = null;

        // select from...
        $c1 = new Criteria();
        $cton1 = $c1->getNewCriterion(self::PATH, "CONCAT(" . self::PATH . ", '/') LIKE '" . self::double_single_quote($path) . "/%'", Criteria::CUSTOM);
        $cton2 = $c1->getNewCriterion(self::PATH, "CONCAT(" . self::PATH . ", CONCAT('/'," . self::NAME . ")) = '" . self::double_single_quote($path) . "'", Criteria::CUSTOM);
        $cton1->addOr($cton2);
        $c1->add($cton1);

        // update set
        $c2 = new Criteria();
        $c2->add(self::AUTHORS, $authors);
        $c2->add(self::AUTHOR_EMAILS, $authoremails);
        $c2->add(self::DESCRIPTION, $description);
        $c2->add(self::HOW_TO_CITE, $howtocite);
        $c2->add(self::TITLE, $title);

        BasePeer::doUpdate($c1, $c2, Propel::getConnection(self::DATABASE_NAME));
    }

    /**
     * Before inserting a data file, first we need to check if this record
     * does exist or not. If yes, do an update only, else do a new insert
     *
     * @param String $name: name of data file
     * @param String $path: path of data file
     * @param timstamp $create: current timestamp that file inserts into NEEScentral
     * @param String $checksum: an error-checking technique in which the number of bits in a unit of data is summed, transmitted along with the data
     * @param boolean $directory, either 1 or 0
     * @param int $filesize, the file size in byte
     * @return DataFile object
     */
    public static function insertOrUpdateIfDuplicate($name, $path, $create, $checksum, $directory, $filesize, $p_strTitle=null, $p_strDescription=null, $p_strUsageId=null, $p_strTool=null) {
        //echo "name=".$name.", path=".$path."<br>";

        if (strpos($path, "/nees/home") !== 0)
            return null;

        $df = self::findOneMatch($name, $path);

        if (!$df) {
            $df = new DataFile($name, $path, date('Y-m-d H:i:s'), $directory, 0);
            $df->setName($name);
            $df->setPath($path);
            $df->setCurationStatus('Uncurated');
            $df->setView('MEMBERS');
            $df->setCreated($create);
            $df->setTitle($p_strTitle);
            $df->setDescription($p_strDescription);
            $df->setUsageTypeId($p_strUsageId);
            $df->setOpeningTool($p_strTool);
        }

        if ($directory) {
            $df->setChecksum(null);
            $df->setDirectory(1);
            $df->setFilesize(null);
        } else {
            $df->setCreated($create); // Update time if this is a file only
            $df->setChecksum($checksum);
            $df->setDirectory(0);
            $df->setFilesize($filesize);
            $df->setTitle($p_strTitle);
            $df->setDescription($p_strDescription);
            $df->setUsageTypeId($p_strUsageId);
            $df->setOpeningTool($p_strTool);
        }

        $df->setDeleted(0);

        $df->save();
        return $df;
    }

    /**
     * Rename a data file in database
     * @usage: rename("/source_dir/.../source_name", "/dest_dir/.../dest_name")
     * @param String $source: full path of source
     * @param String $destination: full path of directory
     * @param boolean $recursive: recursively rename sub-directory, true by default
     * @return true if succeed, void if fails
     */
    public static function renameDB($source, $destination, $recursive = true) {

        // Rename the current data file.

        $newname = basename($destination);
        $newpath = dirname($destination);

        $oldname = basename($source);
        $oldpath = dirname($source);

        $conn = Propel::getConnection(self::DATABASE_NAME);

        //UPDATE DataFile SET path = ?, name = ? WHERE path = ? AND name = ?
        // set
        $c2 = new Criteria();
        $c2->add(self::PATH, $newpath);
        $c2->add(self::NAME, $newname);

        // where ...
        $c1 = new Criteria();
        $c1->add(self::PATH, $oldpath);
        $c1->add(self::NAME, $oldname);

        BasePeer::doUpdate($c1, $c2, $conn);

        if ($recursive) {
            $sql = "UPDATE " . self::TABLE_NAME . " SET " . self::PATH . " = REPLACE(" . self::PATH . ", ?, ?) WHERE " . self::PATH . " = ? OR " . self::PATH . " LIKE ?";

            $stmt = $conn->prepareStatement($sql);
            $stmt->setString(1, $source);
            $stmt->setString(2, $destination);
            $stmt->setString(3, $source);
            $stmt->setString(4, $source . '/%');
            $stmt->executeUpdate();
        }

        return true;
    }

    /**
     * This function is to copy file or directory from one path to another path
     * If the destination does exists, then it will update its new values
     * @usage: copyDataFileDB('/dir1/dir2/file.txt', '/dir3/dir4/file.txt' )
     *
     * @param String $source: full path of source
     * @param String $destination: full path of directory
     * @param boolean $copySystemFile check if we need to copy file system (full copy)
     *
     * @return DataFile $desc_df: the new copied DataFile, false if failed (duplicate or something else)
     */
    public static function copyDataFileDB($source, $destination, $copySystemFile = false) {
        $desc_df = self::findByFullPath($destination);

        // If destination file exists, do not overwrite it, quit now
        if ($desc_df)
            return false;

        // If the source file does not exist, how can we make a new copy ?
        $src_df = self::findByFullPath($source);
        if (is_null($src_df))
            return false;

        $new_path = dirname($destination);
        $new_name = basename($destination);

        if ($copySystemFile && file_exists($source)) {
            if (!copy($source, $destination))
                return false;
        }

        $desc_df = $src_df->copy();
        $desc_df->setPath($new_path);
        $desc_df->setName($new_name);
        $desc_df->save();

        return $desc_df;
    }

    /**
     * @desc
     *   replace a single quote to escape quotes, to make javascript happy
     *
     * @param $string: string to replaced
     *
     * @return
     *   String after replace.
     */
    public static function double_single_quote($string) {
        return preg_replace('/\'/', '\'\'', $string);
    }

    /**
     * Find all required N3DV files in the N3DV folder from a given list
     *
     * @param Experiment $exp
     * @return array <DataFile>
     */
    public static function findRequiredN3DVFiles(Experiment $exp) {
        $basepath = $exp->getPathname() . "/N3DV";
        $n3dvFiles = array('container1.iv', 'default_behaviors.bhv', 'moment.iv', 'disp.iv');

        $c = new Criteria();
        $c->add(self::PATH, $basepath);
        $c->add(self::NAME, $n3dvFiles, Criteria::IN);

        return self::doSelect($c);
    }

    public static function getDataFilesByProject($p_iProjectId, $p_strPath) {
        $oCriteria = new Criteria();
        $oCriteria->addJoin(self::ID, DataFileLinkPeer::ID);
        $oCriteria->add(PersonEntityRolePeer::ENTITY_ID, $projid);
    }

    public static function getDataFilesByTrial($p_iTrialId) {
        $oCriteria = new Criteria();
        $oCriteria->addJoin(DataFilePeer::ID, DataFileLinkPeer::ID, Criteria::INNER_JOIN);
        $oCriteria->add(DataFileLinkPeer::TRIAL_ID, $p_iTrialId);
        $oCriteria->add(DataFileLinkPeer::DELETED, 0);
        $oCriteria->add(DataFileLinkPeer::REP_ID, 0);
        $oCriteria->add(DataFilePeer::DELETED, 0);
        return DataFilePeer::doSelect($oCriteria);
    }

    public static function getDataFilesByRepetition($p_iRepetitionId) {
        $oCriteria = new Criteria();
        $oCriteria->addJoin(DataFilePeer::ID, DataFileLinkPeer::ID, Criteria::INNER_JOIN);
        $oCriteria->add(DataFileLinkPeer::REP_ID, $p_iRepetitionId);
        $oCriteria->add(DataFileLinkPeer::DELETED, 0);
        $oCriteria->add(DataFilePeer::DELETED, 0);
        return DataFilePeer::doSelect($oCriteria);
    }

    public static function getSingleDataFilesByRepetition($p_iRepetitionId) {
        $oCriteria = new Criteria();
        $oCriteria->addJoin(DataFilePeer::ID, DataFileLinkPeer::ID, Criteria::INNER_JOIN);
        $oCriteria->add(DataFileLinkPeer::REP_ID, $p_iRepetitionId);
        $oCriteria->add(DataFileLinkPeer::DELETED, 0);
        $oCriteria->add(DataFilePeer::DELETED, 0);
        return DataFilePeer::doSelectOne($oCriteria);
    }

    /*
      public function getDocumentSummary($p_strPath, $p_strIncludedFolders){
      $strLikePath = "$p_strPath%";
      $strQuery = "select df.name, df.id, (select count(id) from data_file where name=df.name and path like '$strLikePath') as total
      from data_file df
      where df.path = ?
      and df.name in (?)";

      $oDocumentArray = array();

      $conn = Propel::getConnection();
      $stmt = $conn->prepareStatement($strQuery);
      $stmt->setString(1, $p_strPath);
      $stmt->setString(2, $p_strIncludedFolders);
      $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while($rs->next()){
      $oDataFileArray = array();
      $oDataFileArray['ID'] = $rs->getInt('ID');
      $oDataFileArray['NAME'] = $rs->getString('NAME');
      $oDataFileArray['TOTAL'] = $rs->getInt('TOTAL');

      array_push($oDocumentArray, $oDataFileArray);
      }

      return $oDocumentArray;
      }
     */

    public static function getDirectorySummary($dirPath){
      $dirPath = get_systemPath($dirPath);
      $dfs = DataFilePeer::findAllInDir($dirPath);
      

      $numDirs = 0;
      $numFiles = 0;
      $totalSize = 0;

      foreach($dfs as $df) {
        /* @var $df DataFile */
        $fullPath = $df->getFullPath();
        $strName = $df->getName();

        if(file_exists($fullPath) &&
           !StringHelper::contains($fullPath, Files::GENERATED_PICS) &&
           $strName != Files::GENERATED_PICS) {

          if(is_dir($fullPath)) {
            $numDirs++;
          }else{
            $numFiles++;
            $totalSize += filesize($fullPath);
          }
        }
      }//end foreach

      $iStatsArray = array(0,0,0);
      $iStatsArray[0] = $numDirs;
      $iStatsArray[1] = $numFiles;
      $iStatsArray[2] = $totalSize;

      return $iStatsArray;
    }

    public static function getDocumentSummary($p_strPath, $p_strIncludedFolderArray) {
        $strNameCondition = "(df.name='" . $p_strIncludedFolderArray[0] . "' or " .
                "df.name='" . $p_strIncludedFolderArray[1] . "' or " .
                "df.name='" . $p_strIncludedFolderArray[2] . "')";

        $strQuery = "select df.name, df.id
				 from data_file df 
				 where df.path = ?
				   and $strNameCondition";

        $iIdArray = array();

        $conn = Propel::getConnection();
        $stmt = $conn->prepareStatement($strQuery);
        $stmt->setString(1, $p_strPath);
        $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($rs->next()) {
            $iIdArray[] = $rs->getInt('ID');
        }

        return self::retrieveByPKs($iIdArray);
    }

    public static function findDataFileByType($p_strFileType, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $strQuery = "select d.ID, d.PATH, d.NAME, d.DESCRIPTION, d.TITLE,
  				co.description as CURATED_DESCRIPTION, co.TITLE as CURATED_TITLE   
				from data_file_link dfl, data_file d, curatedncidcross_ref cr, curated_objects co
				where dfl.proj_id = ?
				  and dfl.exp_id = ?
				  and dfl.trial_id = ?
				  and dfl.rep_id = ?
				  and dfl.id = d.id
				  and d.id = cr.neescentral_objectid
				  and cr.curated_entityid = co.object_id
				  and co.object_type = ?";

        $oReturnArray = array();

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        $oStatement->setInt(2, $p_iExperimentId);
        $oStatement->setInt(3, $p_iTrialId);
        $oStatement->setInt(4, $p_iRepetitionId);
        $oStatement->setString(5, $p_strFileType);
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $strDrawingArray = array();
            $strDrawingArray['ID'] = $oResultSet->getInt("ID");
            $strDrawingArray['NAME'] = $oResultSet->getString("NAME");
            $strDrawingArray['PATH'] = $oResultSet->getString("PATH");
            $strDrawingArray['TITLE'] = $oResultSet->getString("TITLE");
            $strDrawingArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strDrawingArray['CURATED_DESCRIPTION'] = $oResultSet->getString("CURATED_DESCRIPTION");
            $strDrawingArray['CURATED_TITLE'] = $oResultSet->getString("CURATED_TITLE");


            array_push($oReturnArray, $strDrawingArray);
        }

        return $oReturnArray;
    }

    public static function findDataFileByDrawing($p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $c = new Criteria();
        $c->addJoin(self::ID, DataFileLinkPeer::ID);
        $c->add(DataFileLinkPeer::PROJ_ID, $p_iProjectId);
        $c->add(DataFileLinkPeer::EXP_ID, $p_iExperimentId);
        $c->add(DataFileLinkPeer::TRIAL_ID, $p_iTrialId);
        $c->add(DataFileLinkPeer::REP_ID, $p_iRepetitionId);
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 0);
        $c->add(self::DRAWING, 1);
        return self::doSelect($c);
    }

    public static function findDataFileByEntityType($p_strEntityTypeNTableName, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        require_once 'lib/data/EntityTypePeer.php';
        $c = new Criteria();
        $c->addJoin(self::ID, DataFileLinkPeer::ID);
        $c->addJoin(self::USAGE_TYPE_ID, EntityTypePeer::ID);
        $c->add(DataFileLinkPeer::PROJ_ID, $p_iProjectId);
        if($p_iExperimentId){
          $c->add(DataFileLinkPeer::EXP_ID, $p_iExperimentId);
        }
        if($p_iTrialId){
          $c->add(DataFileLinkPeer::TRIAL_ID, $p_iTrialId);
        }
        if($p_iRepetitionId){
          $c->add(DataFileLinkPeer::REP_ID, $p_iRepetitionId);
        }

        $strLike = $p_strEntityTypeNTableName . "%";
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 0);
        $c->add(EntityTypePeer::N_TABLE_NAME, $strLike, Criteria::LIKE);
        $c->addAscendingOrderByColumn(EntityTypePeer::N_TABLE_NAME);
        return self::doSelect($c);
    }

    public static function findDataFileByTool($p_strTool, $p_iProjectId, $p_iExperimentId, $p_iTrialId=0, $p_iRepetitionId=0) {
        $c = new Criteria();
        $c->addJoin(self::ID, DataFileLinkPeer::ID);
        $c->add(DataFileLinkPeer::PROJ_ID, $p_iProjectId);
        $c->add(DataFileLinkPeer::EXP_ID, $p_iExperimentId);
        if ($p_iTrialId != 0) {
            $c->add(DataFileLinkPeer::TRIAL_ID, $p_iTrialId);
        }
        if ($p_iRepetitionId != 0) {
            $c->add(DataFileLinkPeer::REP_ID, $p_iRepetitionId);
        }
        $c->add(self::DELETED, 0);
        $c->add(self::DIRECTORY, 0);
        $c->add(self::OPENING_TOOL, $p_strTool);
        $c->addAscendingOrderByColumn(self::ID);
        return self::doSelect($c);
    }

    public static function findDataFileByMimeType($p_iProjectId, $p_iExperimentId, $p_iTrialId=0, $p_iRepetitionId=0, $p_iLowerLimit=0, $p_iUpperLimit = 24) {
        require_once 'api/org/nees/util/PhotoHelper.php';

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title, df.thumb_id, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df,
                                data_file_link dfl
                       where df.id = dfl.id
                         and df.deleted=0
                         and df.directory=0
                         and df.usage_type_id is null
                         and dfl.deleted=0
                         and dfl.proj_id=?
                         and dfl.exp_id=?";
        if ($p_iTrialId > 0) {
            $strQuery .= " and dfl.trial_id=?";
        }
        if ($p_iRepetitionId > 0) {
            $strQuery .= " and dfl.rep_id=?";
        }

        $strQuery .= "  and(
                             (lower(df.name) like '%.png') or
                             (lower(df.name) like '%.jpg') or
                             (lower(df.name) like '%.gif') 
                           )
                        and df.path not like '%".Files::GENERATED_PICS."'
                        )
                        WHERE rn BETWEEN $p_iLowerLimit AND $p_iUpperLimit";

        $oReturnArray = array();

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        $oStatement->setInt(2, $p_iExperimentId);
        if ($p_iTrialId > 0) {
            $oStatement->setInt(3, $p_iTrialId);
        }
        if ($p_iRepetitionId > 0) {
            $oStatement->setInt(4, $p_iRepetitionId);
        }
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);

        $oThumbEntityType = EntityTypePeer::findByTableName("Thumbnail");
        $oDisplayEntityType = EntityTypePeer::findByTableName("Data Photo");

        while ($oResultSet->next()) {
            $strFileArray = array();
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            $strFileArray['NAME'] = $oResultSet->getString("NAME");
            $strFileArray['PATH'] = $oResultSet->getString("PATH");
            $strFileArray['TITLE'] = $oResultSet->getString("TITLE");
            $strFileArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strFileArray['THUMB_ID'] = $oResultSet->getInt("THUMB_ID");

            $bMkDir = false;

            $strSource = $strFileArray['PATH'] . "/" . $strFileArray['NAME'];
            $thumbpath = $strFileArray['PATH'] . "/" . Files::GENERATED_PICS;
            if(!is_dir($thumbpath)){
              $oFileCommand = FileCommandAPI::create($thumbpath);
              $bMkDir = $oFileCommand->mkdir();
            }

            $bThumbCreated = false;
            $bDisplayCreated = false;

            $thumbname = "thumb_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $strDisplayName = "display_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $fullName = $thumbpath . "/" . $thumbname;
            if (!file_exists($fullName)) {
                $bThumbCreated = PhotoHelper::resize($strSource, 90, 75, $fullName);
                if ($bThumbCreated && file_exists($fullName)) {

                    $oThumbDataFile = new DataFile();
                    $oThumbDataFile = $oThumbDataFile->newDataFileByFilesystem($thumbname, $thumbpath, false, $strFileArray['TITLE'], $strFileArray['DESCRIPTION'], $oThumbEntityType->getId());

                    $strFullName = $thumbpath . "/" . $strDisplayName;
                    $bDisplayCreated = PhotoHelper::resize($strSource, 800, 600, $strFullName);
                    if($bDisplayCreated){
                      $oDisplayDataFile = new DataFile();
                      $oDisplayDataFile = $oDisplayDataFile->newDataFileByFilesystem($strDisplayName, $thumbpath, false, $strFileArray['TITLE'], $strFileArray['DESCRIPTION'], $oDisplayEntityType->getId());
                    }
                }
            }

            if (file_exists($fullName)) {
                $strCaption = (strlen($strFileArray['DESCRIPTION']) === 0) ? $strFileArray['NAME'] : $strFileArray['DESCRIPTION'];
                $strCaption = str_replace("_", " ", $strCaption);
                $strFileArray['THUMBNAIL'] = "<div style='color:green'><a style='border-bottom:0px;' rel='lightbox[hub]' title='" . $strFileArray['DESCRIPTION'] . "' target='_blank' href='" . self::getUrl($thumbpath, $strDisplayName) . "'><img src='" . self::getUrl($thumbpath, $thumbname) . "'  alt=''/></a><br>" . StringHelper::neat_trim($strCaption, 15, $strDelimiter = '...') . "</div>";
            }

            array_push($oReturnArray, $strFileArray);

            if($bThumbCreated || $bDisplayCreated || $bMkDir){
              FileHelper::fixPermissions($thumbpath);
            }
        }
        return $oReturnArray;
    }

    public static function findDataFileByMimeTypeCount($p_iProjectId, $p_iExperimentId, $p_iTrialId=0, $p_iRepetitionId=0) {
        $strQuery = "select count(distinct df.id) as TOTAL
  				 from data_file df,
  				      data_file_link dfl
  				 where df.id = dfl.id
  				   and df.deleted=0
  				   and df.directory=0
  				   and df.usage_type_id is null 
  				   and dfl.deleted=0
  				   and dfl.proj_id=?
  				   and dfl.exp_id=?";
        if ($p_iTrialId > 0) {
            $strQuery .= " and dfl.trial_id=?";
        }
        if ($p_iRepetitionId > 0) {
            $strQuery .= " and dfl.rep_id=?";
        }
        $strQuery .= " and(
                             (lower(df.name) like '%.png') or
                             (lower(df.name) like '%.jpg') or
                             (lower(df.name) like '%.gif') 
  				   )";

        $iCount = 0;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        $oStatement->setInt(2, $p_iExperimentId);
        if ($p_iTrialId > 0) {
            $oStatement->setInt(3, $p_iTrialId);
        }
        if ($p_iRepetitionId > 0) {
            $oStatement->setInt(4, $p_iRepetitionId);
        }
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $iCount = $oResultSet->getInt("TOTAL");
        }
        return $iCount;
    }

    public static function findProjectPhotoDataFiles($p_iProjectId, $p_iLowerLimit=0, $p_iUpperLimit = 24) {
        require_once 'api/org/nees/util/PhotoHelper.php';

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title, df.thumb_id, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df,
                                data_file_link dfl
                       where df.id = dfl.id
                         and df.deleted=0
                         and df.directory=0
                         and dfl.deleted=0
                         and dfl.proj_id=?
                         and df.usage_type_id=(select id from entity_type where n_table_name=?)
                    )
                    WHERE rn BETWEEN $p_iLowerLimit AND $p_iUpperLimit";

        $oReturnArray = array();

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        $oStatement->setString(2, "General Photo");
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $strFileArray = array();
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            $strFileArray['NAME'] = $oResultSet->getString("NAME");
            $strFileArray['PATH'] = $oResultSet->getString("PATH");
            $strFileArray['TITLE'] = $oResultSet->getString("TITLE");
            $strFileArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strFileArray['THUMB_ID'] = $oResultSet->getInt("THUMB_ID");

            $bMkDir = false;
            $strSource = $strFileArray['PATH'] . "/" . $strFileArray['NAME'];
            $thumbpath = $strFileArray['PATH'] . "/" . Files::GENERATED_PICS;
            if(!is_dir($thumbpath)){
              $oFileCommand = FileCommandAPI::create($thumbpath);
              $bMkDir = $oFileCommand->mkdir();
            }

            $bThumbCreated = false;
            $bDisplayCreated = false;

            $thumbname = "thumb_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $strDisplayName = "display_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $fullName = $thumbpath . "/" . $thumbname;
            if (!file_exists($fullName)) {
                $bThumbCreated = PhotoHelper::resize($strSource, PhotoHelper::DEFAULT_THUMB_WIDTH, PhotoHelper::DEFAULT_THUMB_HEIGHT, $fullName);
                if ($bThumbCreated && file_exists($fullName)) {
                    $strFullName = $thumbpath . "/" . $strDisplayName;
                    $bDisplayCreated = PhotoHelper::resize($strSource, PhotoHelper::DEFAULT_DISPLAY_WIDTH, PhotoHelper::DEFAULT_DISPLAY_HEIGHT, $strFullName);
                }
            }

            if (file_exists($fullName)) {
                $strCaption = (strlen($strFileArray['DESCRIPTION']) === 0) ? $strFileArray['PATH'] : $strFileArray['DESCRIPTION'];
                $strFileArray['THUMBNAIL'] = "<div style='color:green'><a style='border-bottom:0px;' rel='lightbox[group]' title='" . $strCaption . "' target='_blank' href='" . self::getUrl($thumbpath, $strDisplayName) . "'><img src='" . self::getUrl($thumbpath, $thumbname) . "'  alt=''/></a><br>" . StringHelper::neat_trim($strCaption, 15, $strDelimiter = '...') . "</div>";
            } else {
                $strFileArray['THUMBNAIL'] = $strFileArray['NAME'] . " not found.";
            }
            array_push($oReturnArray, $strFileArray);

            if($bThumbCreated || $bDisplayCreated || $bMkDir){
              FileHelper::fixPermissions($thumbpath);
            }
        }
        return $oReturnArray;
    }

    public static function findProjectPhotoDataFilesCount($p_iProjectId) {
        $strQuery = "select count(df.id) as TOTAL
  				 from data_file df,
  				      data_file_link dfl
  				 where df.id = dfl.id
  				   and df.deleted=0
  				   and df.directory=0
  				   and dfl.deleted=0
  				   and dfl.proj_id=?
  				   and df.usage_type_id=(select id from entity_type where n_table_name=?)";

        $iCount = 0;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        $oStatement->setString(2, "General Photo");
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $iCount = $oResultSet->getInt("TOTAL");
        }
        return $iCount;
    }

    public static function findPhotoDataFiles($p_iHideExperimentIdArray, $p_strExcludeUsageArray, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0, $p_iLowerLimit=0, $p_iUpperLimit = 24) {
        require_once 'api/org/nees/util/PhotoHelper.php';

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title, df.thumb_id, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df,
                            data_file_link dfl
                       where df.id = dfl.id
                         and df.deleted=0
                         and df.directory=0
                         and dfl.deleted=0
                         and dfl.proj_id=? ";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id = ? ";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id = ? ";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id = ? ";

        $strQuery .= "
                         and (
                           df.usage_type_id is null or
                           df.usage_type_id not in (";
        foreach ($p_strExcludeUsageArray as $iExcludeIndex => $strExcludeUsageType) {
            $strQuery .= "(select id from entity_type where n_table_name=?)";
            if ($iExcludeIndex < sizeof($p_strExcludeUsageArray) - 1) {
                $strQuery .= ",";
            }
        }

        $strQuery .= "	   )
                             )
                             and df.document_format_id in (
                               (select dof.document_format_id from document_format dof where dof.default_extension in ('png','gif','jpg','jpeg'))
                             )
                    )
                    WHERE rn BETWEEN $p_iLowerLimit AND $p_iUpperLimit";

        $oReturnArray = array();

        $iIndex = 2;

        //echo $strQuery."<br>";

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }
        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }
        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        foreach ($p_strExcludeUsageArray as $strExcludeUsageType) {
            $oStatement->setString($iIndex, $strExcludeUsageType);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);

        $oThumbEntityType = EntityTypePeer::findByTableName("Thumbnail");
        $oDisplayEntityType = EntityTypePeer::findByTableName("Data Photo");

        while ($oResultSet->next()) {
            $strFileArray = array();
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            $strFileArray['NAME'] = $oResultSet->getString("NAME");
            $strFileArray['PATH'] = $oResultSet->getString("PATH");
            $strFileArray['TITLE'] = $oResultSet->getString("TITLE");
            $strFileArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strFileArray['THUMB_ID'] = $oResultSet->getInt("THUMB_ID");

            $strSource = $strFileArray['PATH'] . "/" . $strFileArray['NAME'];

            $bMkDir = false;
            $thumbpath = $strFileArray['PATH'] ."/". Files::GENERATED_PICS;
            if (!file_exists($thumbpath)) {
                $photoDir = FileCommandAPI::create($thumbpath);
                $bMkDir = $photoDir->mkdir(true);
            }

            $bThumbCreated = false;
            $bDisplayCreated = false;

            $thumbname = "thumb_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $strDisplayName = "display_" . $strFileArray['ID'] . "_" . $strFileArray['NAME'];
            $fullName = $thumbpath . "/" . $thumbname;
            if (!file_exists($fullName)) {
                $bThumbCreated = PhotoHelper::resize($strSource, 90, 75, $fullName);
                if ($bThumbCreated && file_exists($fullName)) {

                    $oThumbDataFile = new DataFile();
                    $oThumbDataFile = $oThumbDataFile->newDataFileByFilesystem($thumbname, $thumbpath, false, $strFileArray['TITLE'], $strFileArray['DESCRIPTION'], $oThumbEntityType->getId());

                    $strFullName = $thumbpath . "/" . $strDisplayName;
                    $bDisplayCreated = PhotoHelper::resize($strSource, 800, 600, $strFullName);
                    if($bDisplayCreated){
                      $oDisplayDataFile = new DataFile();
                      $oDisplayDataFile = $oDisplayDataFile->newDataFileByFilesystem($strDisplayName, $thumbpath, false, $strFileArray['TITLE'], $strFileArray['DESCRIPTION'], $oDisplayEntityType->getId());
                    }
                }
            }


            if (file_exists($fullName)) {

                $strCaption = (strlen($strFileArray['DESCRIPTION']) === 0) ? $strFileArray['PATH'] : $strFileArray['DESCRIPTION'];
                $strFileArray['THUMBNAIL'] = "<div style='color:green'><a style='border-bottom:0px;' rel='lightbox[hub]' title='" . $strCaption . "' target='_blank' href='" . self::getUrl($thumbpath, $strDisplayName) . "'><img src='" . self::getUrl($thumbpath, $thumbname) . "'  alt=''/></a><br>" . StringHelper::neat_trim($strCaption, 15, $strDelimiter = '...') . "</div>";

            } else {
                $strFileArray['THUMBNAIL'] = $strFileArray['NAME'] . " not found.";
            }
            array_push($oReturnArray, $strFileArray);

            if($bThumbCreated || $bDisplayCreated || $bMkDir){
              FileHelper::fixPermissions($thumbpath);
            }
        }
        return $oReturnArray;
    }

    public static function findPhotoDataFilesCount($p_iHideExperimentIdArray, $p_strExcludeUsageArray, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $strQuery = "select count(df.id) as total
  		     from data_file df,
  			  data_file_link dfl
                     where df.id = dfl.id
  		       and df.deleted=0
  		       and df.directory=0
                       and df.path not like '%".Files::GENERATED_PICS."%'
  		       and dfl.deleted=0
  		       and dfl.proj_id=? ";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id = ? ";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id = ? ";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id = ? ";

        $strQuery .= "
  				     and (
  				       df.usage_type_id is null or 
  				       df.usage_type_id not in (";
        foreach ($p_strExcludeUsageArray as $iExcludeIndex => $strExcludeUsageType) {
            $strQuery .= "(select id from entity_type where n_table_name=?)";
            if ($iExcludeIndex < sizeof($p_strExcludeUsageArray) - 1) {
                $strQuery .= ",";
            }
        }

        $strQuery .= "	   )
  					 )
  					 and df.document_format_id in (
					   (select dof.document_format_id from document_format dof where dof.default_extension in ('png','gif','jpg','jpeg'))
					 )";

        //echo $strQuery."<br>";

        $iCount = 0;
        $iIndex = 2;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }
        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }
        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        foreach ($p_strExcludeUsageArray as $strExcludeUsageType) {
            $oStatement->setString($iIndex, $strExcludeUsageType);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $iCount = $oResultSet->getInt("TOTAL");
        }

        return $iCount;
    }

    public static function getUrl($p_strPath, $p_strName) {
        return "/data/get" . self::getFriendlyPath($p_strPath) . "/" . rawurldecode($p_strName);
    }

    public static function getFriendlyPath($apath) {
        if (strpos($apath, "/nees/home/") == 0) {
            return preg_replace("/.groups/", "", substr($apath, 10), 1);
        } else {
            return $apath;
        }
    }

    public static function getProjectImage($p_iProjectId) {
        require_once 'lib/data/EntityTypePeer.php';
        require_once 'lib/data/DataFileLinkPeer.php';

        $oCriteria = new Criteria();
        $oCriteria->addJoin(self::USAGE_TYPE_ID, EntityTypePeer::ID);
        $oCriteria->addJoin(self::ID, DataFileLinkPeer::ID);
        $oCriteria->add(EntityTypePeer::N_TABLE_NAME, "Project Image");
        $oCriteria->add(self::DELETED, 0);
        $oCriteria->add(DataFileLinkPeer::PROJ_ID, $p_iProjectId);

        return self::doSelectOne($oCriteria);
    }

    public static function resizePhotos($p_oDataFileArray) {
        require_once 'api/org/nees/util/PhotoHelper.php';

        $iIndex = -1;
        /* @var $oDataFile DataFile */
        foreach ($p_oDataFileArray as $oDataFile) {
            ++$iIndex;

            $strSource = $oDataFile->getPath() . "/" . $oDataFile->getName();
            $thumbpath = $oDataFile->getPath() . "/" .Files::GENERATED_PICS;

            $bMkDir = false;
            if (!file_exists($thumbpath)) {
                $photoDir = FileCommandAPI::create($thumbpath);
                $bMkDir = $photoDir->mkdir(true);
            }

            /* @var $oThumbEntityType EntityType */
            $oThumbEntityType = EntityTypePeer::findByTableName("Thumbnail");
            
            /* @var $oDisplayEntityType EntityType */
            $oDisplayEntityType = EntityTypePeer::findByTableName("Data Photo");

            $thumbname = "thumb_" . $oDataFile->getId() . "_" . $oDataFile->getName();
            $strDisplayName = "display_" . $oDataFile->getId() . "_" . $oDataFile->getName();

            $bThumbCreated = false;
            $bDisplayCreated = false;

            $fullName = $thumbpath . "/" . $thumbname;
            if (!file_exists($fullName)) {
                $bThumbCreated = PhotoHelper::resize($strSource, PhotoHelper::DEFAULT_THUMB_WIDTH, PhotoHelper::DEFAULT_THUMB_HEIGHT, $fullName);
                if ($bThumbCreated && file_exists($fullName)) {

                    $thumb_df = DataFilePeer::insertOrUpdateIfDuplicate($thumbname, $thumbpath, date('Y-m-d H:i:s'), md5_file($fullName), 0, filesize($fullName), $oThumbEntityType->getId());

                    $strFullName = $thumbpath . "/" . $strDisplayName;
                    $bDisplayCreated = PhotoHelper::resize($strSource, PhotoHelper::DEFAULT_DISPLAY_WIDTH, PhotoHelper::DEFAULT_DISPLAY_HEIGHT, $strFullName);
                    if ($bDisplayCreated) {
                        $display_df = DataFilePeer::insertOrUpdateIfDuplicate($strDisplayName, $thumbpath, date('Y-m-d H:i:s'), md5_file($strFullName), 0, filesize($strFullName), $oDisplayEntityType->getId());

                        $oDataFile->setPath($thumbpath);
//                        $oDataFile->setName($strDisplayName);
                        $p_oDataFileArray[$iIndex] = $oDataFile;
                    }
                }
            } else {
                $oDataFile->setPath($thumbpath);
//                $oDataFile->setName($strDisplayName);
                $p_oDataFileArray[$iIndex] = $oDataFile;
            }

            if($bThumbCreated || $bDisplayCreated || $bMkDir){
              //FileHelper::fixPermissions($thumbpath);
              FileHelper::fixPermissionsOneFileOrDir($thumbpath);
            }
        }
        return $p_oDataFileArray;
    }

    public static function findDataFileOpeningTools($p_strName, $p_iHideExperimentIdArray, $p_iLowerLimit=1, $p_iUpperLimit=25, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $oReturnArray = array();

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title,
                       dfl.proj_id, dfl.exp_id, dfl.trial_id, dfl.rep_id,
                       e.name as e_name, t.name as t_name, r.name as r_name,
                       e.title as e_title, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df
                         inner join data_file_link dfl on df.id = dfl.id
                         left join experiment e on dfl.exp_id = e.expid
                         left join trial t on dfl.trial_id = t.trialid
                         left join repetition r on dfl.rep_id = r.repid
                       where df.opening_tool=?
                         and df.deleted=?
                         and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $strQuery .= "
                    )
                    WHERE rn BETWEEN ? AND ?";

        $iIndex = 4;

        //echo $strQuery."<br>";

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setString(1, $p_strName);
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oStatement->setInt($iIndex, $p_iLowerLimit);
        ++$iIndex;

        $oStatement->setInt($iIndex, $p_iUpperLimit);
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $strFileArray = array();
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            $strFileArray['NAME'] = $oResultSet->getString("NAME");
            $strFileArray['PATH'] = $oResultSet->getString("PATH");
            $strFileArray['SOURCE'] = $strFileArray['PATH'] . "/" . $strFileArray['NAME'];
            $strFileArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strFileArray['TITLE'] = $oResultSet->getString("TITLE");
            $strFileArray['PROJ_ID'] = $oResultSet->getInt("PROJ_ID");
            $strFileArray['EXP_ID'] = $oResultSet->getInt("EXP_ID");
            $strFileArray['TRIAL_ID'] = $oResultSet->getInt("TRIAL_ID");
            $strFileArray['REP_ID'] = $oResultSet->getInt("REP_ID");
            $strFileArray['E_TITLE'] = $oResultSet->getString("E_TITLE");
            $strFileArray['E_NAME'] = $oResultSet->getString("E_NAME");
            $strFileArray['T_NAME'] = $oResultSet->getString("T_NAME");
            $strFileArray['R_NAME'] = $oResultSet->getString("R_NAME");
            array_push($oReturnArray, $strFileArray);
        }


        return $oReturnArray;
    }//end getDataFileOpeningTools

    public static function findDataFileOpeningToolsCount($p_strName, $p_iHideExperimentIdArray, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $iTotal = 0;

        $strQuery = "select count(df.id) as total
  				 from data_file df
  				   inner join data_file_link dfl on df.id = dfl.id 
  				   left join experiment e on dfl.exp_id = e.expid 
  				   left join trial t on dfl.trial_id = t.trialid 
  				   left join repetition r on dfl.rep_id = r.repid 
  				 where df.opening_tool=?
  				   and df.deleted=?
  				   and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $iIndex = 4;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setString(1, $p_strName);
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $iTotal = $oResultSet->getInt("TOTAL");
        }

        return $iTotal;
    }//end findDataFileOpeningToolsCount

    public static function findDataFiles($p_iHideExperimentIdArray, $p_iLowerLimit=1, $p_iUpperLimit=25, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $oReturnArray = array();

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title,
                       dfl.proj_id, dfl.exp_id, dfl.trial_id, dfl.rep_id,
                       e.name as e_name, t.name as t_name, r.name as r_name,
                       e.title as e_title, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df
                         inner join data_file_link dfl on df.id = dfl.id
                         left join experiment e on dfl.exp_id = e.expid
                         left join trial t on dfl.trial_id = t.trialid
                         left join repetition r on dfl.rep_id = r.repid
                       where df.deleted=?
                         and df.directory=?
                         and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        $strQuery .= " and df.path not like '%".Files::GENERATED_PICS."'";

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $strQuery .= "
                    )
                    WHERE rn BETWEEN ? AND ?";

        $iIndex = 4;

        //echo $strQuery."<br>";

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, 0);
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oStatement->setInt($iIndex, $p_iLowerLimit);
        ++$iIndex;

        $oStatement->setInt($iIndex, $p_iUpperLimit);
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $strFileArray = array();
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            $strFileArray['NAME'] = $oResultSet->getString("NAME");
            $strFileArray['PATH'] = $oResultSet->getString("PATH");
            $strFileArray['SOURCE'] = $strFileArray['PATH'] . "/" . $strFileArray['NAME'];
            $strFileArray['DESCRIPTION'] = $oResultSet->getString("DESCRIPTION");
            $strFileArray['TITLE'] = $oResultSet->getString("TITLE");
            $strFileArray['PROJ_ID'] = $oResultSet->getInt("PROJ_ID");
            $strFileArray['EXP_ID'] = $oResultSet->getInt("EXP_ID");
            $strFileArray['TRIAL_ID'] = $oResultSet->getInt("TRIAL_ID");
            $strFileArray['REP_ID'] = $oResultSet->getInt("REP_ID");
            $strFileArray['E_TITLE'] = $oResultSet->getString("E_TITLE");
            $strFileArray['E_NAME'] = $oResultSet->getString("E_NAME");
            $strFileArray['T_NAME'] = $oResultSet->getString("T_NAME");
            $strFileArray['R_NAME'] = $oResultSet->getString("R_NAME");
            array_push($oReturnArray, $strFileArray);
        }


        return $oReturnArray;
    }//end getDataFileOpeningTools

    public static function findDataFilesCount($p_iHideExperimentIdArray, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $iTotal = 0;

        $strQuery = "select count(df.id) as total
                     from data_file df
                       inner join data_file_link dfl on df.id = dfl.id
                       left join experiment e on dfl.exp_id = e.expid
                       left join trial t on dfl.trial_id = t.trialid
                       left join repetition r on dfl.rep_id = r.repid
                     where df.deleted=?
                       and df.directory=?
                       and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        $strQuery .= " and df.path not like '%".Files::GENERATED_PICS."'";

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $iIndex = 4;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, 0);
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
          $iTotal = $oResultSet->getInt("TOTAL");
        }

        return $iTotal;
    }

    public static function findDataFileByUsage($p_strUsage, $p_iHideExperimentIdArray, $p_iLowerLimit=1, $p_iUpperLimit=25, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $oReturnArray = array();

        $strQuery = "SELECT *
                     FROM (
                       select df.id, df.name, df.description, df.path, df.title,
                       dfl.proj_id, dfl.exp_id, dfl.trial_id, dfl.rep_id,
                       e.name as e_name, t.name as t_name, r.name as r_name,
                       e.title as e_title, f.default_extension, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df
                         inner join data_file_link dfl on df.id = dfl.id
                             left join experiment e on dfl.exp_id = e.expid
                             left join trial t on dfl.trial_id = t.trialid
                             left join repetition r on dfl.rep_id = r.repid
                             left join document_format f on f.document_format_id = df.document_format_id
                       where df.usage_type_id in (select id from entity_type where n_table_name like ?)
                         and df.deleted=?
                         and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $strQuery .= "
  				)
				WHERE rn BETWEEN ? AND ?";

        $iIndex = 4;

        //echo $strQuery."<br>";

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setString(1, $p_strUsage."%");
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oStatement->setInt($iIndex, $p_iLowerLimit);
        ++$iIndex;

        $oStatement->setInt($iIndex, $p_iUpperLimit);
        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $strFileArray['ID'] = $oResultSet->getInt("ID");
            array_push($oReturnArray, $strFileArray['ID']);
        }

        return self::retrieveByPKs($oReturnArray);
    }

    public static function findDataFileByUsageCount($p_strUsage, $p_iHideExperimentIdArray, $p_iProjectId=0, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $iTotal = 0;

        $strQuery = "select count(df.id) as total
                     from data_file df
                       inner join data_file_link dfl on df.id = dfl.id
                       left join experiment e on dfl.exp_id = e.expid
                       left join trial t on dfl.trial_id = t.trialid
                       left join repetition r on dfl.rep_id = r.repid
                     where df.usage_type_id in (select id from entity_type where n_table_name like ?)
                       and df.deleted=?
                       and dfl.deleted=?";

        if(!empty ($p_iHideExperimentIdArray)){
          $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
          $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
        }

        if ($p_iProjectId > 0

            )$strQuery .= " and dfl.proj_id=?";
        if ($p_iExperimentId > 0

            )$strQuery .= " and dfl.exp_id=?";
        if ($p_iTrialId > 0

            )$strQuery .= " and dfl.trial_id=?";
        if ($p_iRepetitionId > 0

            )$strQuery .= " and dfl.rep_id=?";

        $iIndex = 4;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setString(1, $p_strUsage."%");
        $oStatement->setInt(2, 0);
        $oStatement->setInt(3, 0);
        if ($p_iProjectId > 0) {
            $oStatement->setInt($iIndex, $p_iProjectId);
            ++$iIndex;
        }

        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }

        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }

        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            $iTotal = $oResultSet->getInt("TOTAL");
        }

        return $iTotal;
    }

//end findDataFileOpeningToolsCount

  /**
   * Finds a flat list of files within a specified directory.  If a user looks
   * for Documentation, the query searches for any path with ../Documentation...
   * @param string $p_strDirectory
   * @param array $p_iHideExperimentIdArray - experiments to exclude
   * @param int $p_iProjectId
   * @param int $p_iLowerLimit
   * @param int $p_iUpperLimit
   * @param int $p_iExperimentId
   * @param int $p_iTrialId
   * @param int $p_iRepetitionId
   * @return array
   */
  public static function findDataFileDocumentsByDirectory($p_strDirectory, $p_iHideExperimentIdArray, $p_iProjectId, $p_iLowerLimit=1, $p_iUpperLimit=25, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
    $oReturnArray = array();

    //print_r($p_iHideExperimentIdArray);

    $strQuery = "SELECT *
                 FROM (
                   select df.id, row_number()
                   OVER (ORDER BY df.path, df.title, df.name) as rn
                   from data_file df
                     inner join data_file_link dfl on df.id = dfl.id
                     left join experiment e on dfl.exp_id = e.expid
                     left join trial t on dfl.trial_id = t.trialid
                     left join repetition r on dfl.rep_id = r.repid
                   where df.path like ? ";

    if(!empty ($p_iHideExperimentIdArray)){
      $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
      $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
    }

    //exclude deleted files, directories, and images
    $strQuery .= "
                     and df.deleted=?
                     and df.directory=?
                     and(
                      UPPER(df.name) not like '%.JPG' and
                      UPPER(df.name) not like '%.JPEG' and
                      UPPER(df.name) not like '%.JPE' and
                      UPPER(df.name) not like '%.BMP' and
                      UPPER(df.name) not like '%.PNG' and
                      UPPER(df.name) not like '%.GIF'
                    )
                     and dfl.deleted=?";

    if ($p_iProjectId > 0

        )$strQuery .= " and dfl.proj_id=?";
    if ($p_iExperimentId > 0

        )$strQuery .= " and dfl.exp_id=?";
    if ($p_iTrialId > 0

        )$strQuery .= " and dfl.trial_id=?";
    if ($p_iRepetitionId > 0

        )$strQuery .= " and dfl.rep_id=?";

    $strQuery .= "
                    )
                    WHERE rn BETWEEN ? AND ?";

    $iIndex = 5;
    
    //echo $strQuery."<br>";

    $strPath = (StringHelper::beginsWith($p_strDirectory, "/")) ? $p_strDirectory."%" : "%/".$p_strDirectory."%";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setString(1, $strPath);
    $oStatement->setInt(2, 0);
    $oStatement->setInt(3, 0);
    $oStatement->setInt(4, 0);
    if ($p_iProjectId > 0) {
        $oStatement->setInt($iIndex, $p_iProjectId);
        ++$iIndex;
    }

    if ($p_iExperimentId > 0) {
        $oStatement->setInt($iIndex, $p_iExperimentId);
        ++$iIndex;
    }

    if ($p_iTrialId > 0) {
        $oStatement->setInt($iIndex, $p_iTrialId);
        ++$iIndex;
    }

    if ($p_iRepetitionId > 0) {
        $oStatement->setInt($iIndex, $p_iRepetitionId);
        ++$iIndex;
    }

    $oStatement->setInt($iIndex, $p_iLowerLimit);
    ++$iIndex;

    $oStatement->setInt($iIndex, $p_iUpperLimit);
    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while ($oResultSet->next()) {
        $strFileArray['ID'] = $oResultSet->getInt("ID");
        $oDocumentDataFile = self::retrieveByPK($strFileArray['ID']);
        array_push($oReturnArray, $oDocumentDataFile);
        //array_push($oReturnArray, $strFileArray['ID']);
    }

    //return self::retrieveByPKs($oReturnArray);
    return $oReturnArray;
  }

  /**
   * Finds the count of flat list of files within a specified directory.  If a user looks
   * for Documentation, the query searches for any path with ../Documentation...
   * @param string $p_strDirectory
   * @param array $p_iHideExperimentIdArray
   * @param int $p_iProjectId
   * @param int $p_iExperimentId
   * @param int $p_iTrialId
   * @param int $p_iRepetitionId
   * @return int
   */
  public static function findDataFileDocumentsByDirectoryCount($p_strDirectory, $p_iHideExperimentIdArray, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
    $iTotal = 0;

    $strQuery = "select count(df.id) as total
                 from data_file df
                   inner join data_file_link dfl on df.id = dfl.id
                   left join experiment e on dfl.exp_id = e.expid
                   left join trial t on dfl.trial_id = t.trialid
                   left join repetition r on dfl.rep_id = r.repid
                 where df.path like ? ";

    if(!empty ($p_iHideExperimentIdArray)){
      $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
      $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
    }

    //exclude deleted files, directories, and images
    $strQuery .= "
                     and df.deleted=?
                     and df.directory=?
                     and(
                      UPPER(df.name) not like '%.JPG' and
                      UPPER(df.name) not like '%.JPEG' and
                      UPPER(df.name) not like '%.JPE' and
                      UPPER(df.name) not like '%.BMP' and
                      UPPER(df.name) not like '%.PNG' and
                      UPPER(df.name) not like '%.GIF'
                    )
                     and dfl.deleted=?";

    if ($p_iProjectId > 0

        )$strQuery .= " and dfl.proj_id=?";
    if ($p_iExperimentId > 0

        )$strQuery .= " and dfl.exp_id=?";
    if ($p_iTrialId > 0

        )$strQuery .= " and dfl.trial_id=?";
    if ($p_iRepetitionId > 0

        )$strQuery .= " and dfl.rep_id=?";

    $iIndex = 5;

    //echo $strQuery."<br>";
    $strPath = (StringHelper::beginsWith($p_strDirectory, "/")) ? $p_strDirectory."%" : "%/".$p_strDirectory."%";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setString(1, $strPath);
    $oStatement->setInt(2, 0);
    $oStatement->setInt(3, 0);
    $oStatement->setInt(4, 0);
    if ($p_iProjectId > 0) {
        $oStatement->setInt($iIndex, $p_iProjectId);
        ++$iIndex;
    }

    if ($p_iExperimentId > 0) {
        $oStatement->setInt($iIndex, $p_iExperimentId);
        ++$iIndex;
    }

    if ($p_iTrialId > 0) {
        $oStatement->setInt($iIndex, $p_iTrialId);
        ++$iIndex;
    }

    if ($p_iRepetitionId > 0) {
        $oStatement->setInt($iIndex, $p_iRepetitionId);
        ++$iIndex;
    }

    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while ($oResultSet->next()) {
      $iTotal = $oResultSet->getInt("TOTAL");
    }

    return $iTotal;
  }

  /**
   * Finds a flat list of files within a specified directory.  If a user looks
   * for Documentation, the query searches for any path with ../Documentation...
   * @param string $p_strDirectory
   * @param array $p_iHideExperimentIdArray - experiments to exclude
   * @param int $p_iProjectId
   * @param int $p_iLowerLimit
   * @param int $p_iUpperLimit
   * @param int $p_iExperimentId
   * @param int $p_iTrialId
   * @param int $p_iRepetitionId
   * @return array
   */
  public static function findDataFilePhotosByDirectory($p_strDirectory, $p_iHideExperimentIdArray, $p_iProjectId, $p_iLowerLimit=1, $p_iUpperLimit=25, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
    $oReturnArray = array();

    //print_r($p_iHideExperimentIdArray);

    $strQuery = "SELECT *
                 FROM (
                   select df.id, row_number()
                   OVER (ORDER BY df.path, df.title, df.name) as rn
                   from data_file df
                     inner join data_file_link dfl on df.id = dfl.id
                     left join experiment e on dfl.exp_id = e.expid
                     left join trial t on dfl.trial_id = t.trialid
                     left join repetition r on dfl.rep_id = r.repid
                   where df.path like ?
                     and df.path not like '%".Files::GENERATED_PICS."' ";

    if(!empty ($p_iHideExperimentIdArray)){
      $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
      $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
    }

    //exclude deleted files, directories, and images
    $strQuery .= "
                     and df.deleted=?
                     and df.directory=?
                     and dfl.deleted=?";

    if ($p_iProjectId > 0

        )$strQuery .= " and dfl.proj_id=?";
    if ($p_iExperimentId > 0

        )$strQuery .= " and dfl.exp_id=?";
    if ($p_iTrialId > 0

        )$strQuery .= " and dfl.trial_id=?";
    if ($p_iRepetitionId > 0

        )$strQuery .= " and dfl.rep_id=?";

    $strQuery .= "
                    )
                    WHERE rn BETWEEN ? AND ?";

    $iIndex = 5;

    //echo $strQuery."<br>";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setString(1, "%".$p_strDirectory."%");
    $oStatement->setInt(2, 0);
    $oStatement->setInt(3, 0);
    $oStatement->setInt(4, 0);
    if ($p_iProjectId > 0) {
        $oStatement->setInt($iIndex, $p_iProjectId);
        ++$iIndex;
    }

    if ($p_iExperimentId > 0) {
        $oStatement->setInt($iIndex, $p_iExperimentId);
        ++$iIndex;
    }

    if ($p_iTrialId > 0) {
        $oStatement->setInt($iIndex, $p_iTrialId);
        ++$iIndex;
    }

    if ($p_iRepetitionId > 0) {
        $oStatement->setInt($iIndex, $p_iRepetitionId);
        ++$iIndex;
    }

    $oStatement->setInt($iIndex, $p_iLowerLimit);
    ++$iIndex;

    $oStatement->setInt($iIndex, $p_iUpperLimit);
    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while ($oResultSet->next()) {
        $strFileArray['ID'] = $oResultSet->getInt("ID");
        $oDocumentDataFile = self::retrieveByPK($strFileArray['ID']);
        array_push($oReturnArray, $oDocumentDataFile);
        //array_push($oReturnArray, $strFileArray['ID']);
    }

    //return self::retrieveByPKs($oReturnArray);
    return $oReturnArray;
  }

  /**
   * Finds the count of flat list of files within a specified directory.  If a user looks
   * for Documentation, the query searches for any path with ../Documentation...
   * @param string $p_strDirectory
   * @param array $p_iHideExperimentIdArray
   * @param int $p_iProjectId
   * @param int $p_iExperimentId
   * @param int $p_iTrialId
   * @param int $p_iRepetitionId
   * @return int
   */
  public static function findDataFilePhotosByDirectoryCount($p_strDirectory, $p_iHideExperimentIdArray, $p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
    $iTotal = 0;

    $strQuery = "select count(df.id) as total
                 from data_file df
                   inner join data_file_link dfl on df.id = dfl.id
                   left join experiment e on dfl.exp_id = e.expid
                   left join trial t on dfl.trial_id = t.trialid
                   left join repetition r on dfl.rep_id = r.repid
                 where df.path like ?
                   and df.path not like '%".Files::GENERATED_PICS."' ";

    if(!empty ($p_iHideExperimentIdArray)){
      $strHideExperimentIds = implode(",", $p_iHideExperimentIdArray);
      $strQuery .= " and dfl.exp_id not in ($strHideExperimentIds) ";
    }

    //exclude deleted files, directories, and images
    $strQuery .= "
                     and df.deleted=?
                     and df.directory=?
                     and dfl.deleted=?";

    if ($p_iProjectId > 0

        )$strQuery .= " and dfl.proj_id=?";
    if ($p_iExperimentId > 0

        )$strQuery .= " and dfl.exp_id=?";
    if ($p_iTrialId > 0

        )$strQuery .= " and dfl.trial_id=?";
    if ($p_iRepetitionId > 0

        )$strQuery .= " and dfl.rep_id=?";

    $iIndex = 5;

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setString(1, "%".$p_strDirectory."%");
    $oStatement->setInt(2, 0);
    $oStatement->setInt(3, 0);
    $oStatement->setInt(4, 0);
    if ($p_iProjectId > 0) {
        $oStatement->setInt($iIndex, $p_iProjectId);
        ++$iIndex;
    }

    if ($p_iExperimentId > 0) {
        $oStatement->setInt($iIndex, $p_iExperimentId);
        ++$iIndex;
    }

    if ($p_iTrialId > 0) {
        $oStatement->setInt($iIndex, $p_iTrialId);
        ++$iIndex;
    }

    if ($p_iRepetitionId > 0) {
        $oStatement->setInt($iIndex, $p_iRepetitionId);
        ++$iIndex;
    }

    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
    while ($oResultSet->next()) {
        $iTotal = $oResultSet->getInt("TOTAL");
    }

    return $iTotal;
  }

  public static function findOpeningTools(){
    $oReturnArray = array();

    $strQuery = "select distinct df.opening_tool
                 from data_file_link dfl,
                      data_file df
                 where dfl.id = df.id
                   and df.opening_tool is not null
                 order by df.opening_tool";

    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->createStatement();
    $oResultsSet = $oStatement->executeQuery($strQuery, ResultSet::FETCHMODE_ASSOC);
    while($oResultsSet->next()){
      $strTool = $oResultsSet->getString('OPENING_TOOL');
      array_push($oReturnArray, $strTool);
    }

    return $oReturnArray;
  }

    public static function findDistinctOpeningTools($p_iProjectId, $p_iExperimentId=0, $p_iTrialId=0, $p_iRepetitionId=0) {
        $strReturnArray = array();

        $strQuery = "select distinct df.opening_tool
				 from data_file_link dfl, data_file df
				 where dfl.proj_id = ? ";
        if ($p_iExperimentId > 0) {
            $strQuery .= "and dfl.exp_id=? ";
        }
        if ($p_iTrialId > 0) {
            $strQuery .= "and dfl.trial_id=? ";
        }
        if ($p_iRepetitionId > 0) {
            $strQuery .= "and dfl.rep_id=? ";
        }
        $strQuery .= " and dfl.id = df.id
			       and df.opening_tool is not null 
				 order by df.opening_tool";

        $iIndex = 2;

        $oConnection = Propel::getConnection();
        $oStatement = $oConnection->prepareStatement($strQuery);
        $oStatement->setInt(1, $p_iProjectId);
        if ($p_iExperimentId > 0) {
            $oStatement->setInt($iIndex, $p_iExperimentId);
            ++$iIndex;
        }
        if ($p_iTrialId > 0) {
            $oStatement->setInt($iIndex, $p_iTrialId);
            ++$iIndex;
        }
        if ($p_iRepetitionId > 0) {
            $oStatement->setInt($iIndex, $p_iRepetitionId);
            ++$iIndex;
        }

        $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
        while ($oResultSet->next()) {
            array_push($strReturnArray, $oResultSet->getString("OPENING_TOOL"));
        }

        return $strReturnArray;
    }

    public static function findImagesToScale($p_iProjectId, $p_iLowerLimit=1, $p_iUpperLimit=25){
      $iDataFileIdArray = array();

      $strQuery = "SELECT *
                   FROM (
                       select df.id, row_number()
                       OVER (ORDER BY df.path, df.name) as rn
                       from data_file df,
                            data_file_link dfl
                       where df.id = dfl.id
                         and df.deleted=0
                         and df.directory=0
                         and dfl.deleted=0
                         and dfl.proj_id=?
                         and(
                             (lower(df.name) like '%.png') or
                             (lower(df.name) like '%.jpg') or
                             (lower(df.name) like '%.gif')
                         )
                         and(
                             (name not like 'thumb_%' and path not like '%".Files::GENERATED_PICS."%') and
                             (name not like 'display_%' and path not like '%".Files::GENERATED_PICS."%')
                         )
                   )WHERE rn BETWEEN $p_iLowerLimit AND $p_iUpperLimit";

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setInt(1, $p_iProjectId);

      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iDataFileId = $oResultSet->getInt("ID");
        array_push($iDataFileIdArray, $iDataFileId);
      }

      return self::retrieveByPKs($iDataFileIdArray);
    }

    public static function findImagesToScaleCount($p_iProjectId){
      $iDataFileIdArray = array();

      $strQuery = "select count(df.id) as total
                   from data_file df,
                        data_file_link dfl
                   where df.id = dfl.id
                     and df.deleted=0
                     and df.directory=0
                     and dfl.deleted=0
                     and dfl.proj_id=?
                     and(
                          (lower(df.name) like '%.png') or
                          (lower(df.name) like '%.jpg') or
                          (lower(df.name) like '%.gif')
                     )
                     and(
                          (name not like 'thumb_%' and path not like '%".Files::GENERATED_PICS."%') and
                          (name not like 'display_%' and path not like '%".Files::GENERATED_PICS."%')
                     )";

      $iCount = 0;
      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setInt(1, $p_iProjectId);
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iCount = $oResultSet->getInt("TOTAL");
      }

      return $iCount;
    }

    public static function getProjectEditorPhotos($p_iPhotoType, $p_iProjectId, $p_iExperimentId, $p_iLowerLimit, $p_iUpperLimit){
      $iDataFileIdArray = array();

      $strQuery = self::getProjectEditorPhotosQuery($p_iPhotoType, $p_iProjectId, $p_iExperimentId, $p_iLowerLimit, $p_iUpperLimit);
      if(strlen($strQuery)==0){
        return $iDataFileIdArray;
      }

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setInt(1, 0);                    //directory
      $oStatement->setInt(2, $p_iProjectId);
      $oStatement->setInt(3, $p_iExperimentId);
      $oStatement->setInt(4, 0);                    //trial
      $oStatement->setInt(5, 0);                    //repetition
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iDataFileId = $oResultSet->getInt("ID");
        array_push($iDataFileIdArray, $iDataFileId);
      }

      return self::retrieveByPKs($iDataFileIdArray);
    }

    public static function getProjectEditorPhotosCount($p_iPhotoType, $p_iProjectId, $p_iExperimentId){
      $iCount = 0;

      $strQuery = self::getProjectEditorPhotosCountQuery($p_iPhotoType, $p_iProjectId, $p_iExperimentId);
      if(strlen($strQuery)==0){
        return $iCount;
      }

      $oConnection = Propel::getConnection();
      $oStatement = $oConnection->prepareStatement($strQuery);
      $oStatement->setInt(1, 0);                    //directory
      $oStatement->setInt(2, $p_iProjectId);
      $oStatement->setInt(3, $p_iExperimentId);
      $oStatement->setInt(4, 0);                    //trial
      $oStatement->setInt(5, 0);                    //repetition
      $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);
      while ($oResultSet->next()) {
        $iCount = $oResultSet->getInt("TOTAL");
      }

      return $iCount;
    }

    private static function getProjectEditorPhotosQuery($p_iPhotoType, $p_iProjectId, $p_iExperimentId, $p_iLowerLimit, $p_iUpperLimit){
      $strQuery = "SELECT *
                   FROM (
                     select df.id, row_number()
                     OVER (ORDER BY df.path, df.name) as rn
                     from data_file_link dfl, data_file df
                     where dfl.id = df.id
                       and df.directory=?
                       and(
                          (lower(df.name) like '%.png') or
                          (lower(df.name) like '%.jpg') or
                          (lower(df.name) like '%.gif')
                       )
                       and df.path not like '%".Files::GENERATED_PICS."'
                       and df.path not like '%Documentation%'
                       and df.path not like '%Analysis%'
                       and dfl.proj_id = ?
                       and dfl.exp_id = ?";
      if($p_iPhotoType == self::PHOTO_TYPE_DATA){
        $strQuery.="   and dfl.trial_id > ?
                       and dfl.rep_id > ?";
      }elseif($p_iPhotoType == self::PHOTO_TYPE_GENERAL) {
        $strQuery.="   and dfl.trial_id = ?
                       and dfl.rep_id = ?";
      }else{
        $strQuery = "";
      }

      if(strlen($strQuery) > 0){
        $strQuery .= ")WHERE rn BETWEEN $p_iLowerLimit AND $p_iUpperLimit";
      }

      return $strQuery;
    }

    private static function getProjectEditorPhotosCountQuery($p_iPhotoType, $p_iProjectId, $p_iExperimentId){
      $strQuery = "select count(df.id) as TOTAL
                   from data_file_link dfl, data_file df
                   where dfl.id = df.id
                     and df.directory=?
                     and(
                       (lower(df.name) like '%.png') or
                       (lower(df.name) like '%.jpg') or
                       (lower(df.name) like '%.gif')
                     )
                     and df.path not like '%".Files::GENERATED_PICS."'
                     and df.path not like '%Documentation%'
                     and df.path not like '%Analysis%'
                     and dfl.proj_id = ?
                     and dfl.exp_id = ?";
      if($p_iPhotoType == self::PHOTO_TYPE_DATA){
        $strQuery.=" and dfl.trial_id > ?
                     and dfl.rep_id > ?";
      }elseif($p_iPhotoType == self::PHOTO_TYPE_GENERAL) {
        $strQuery.=" and dfl.trial_id = ?
                     and dfl.rep_id = ?";
      }else{
        $strQuery = "";
      }

      return $strQuery;
    }

}

// DataFilePeer
?>
