<?php

  // include base peer class
  require_once 'lib/data/om/BaseDocumentFormatPeer.php';

  // include object class
  include_once 'lib/data/DocumentFormat.php';


/**
 * Skeleton subclass for performing query and update operations on the 'DocumentFormat' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:52 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class DocumentFormatPeer extends BaseDocumentFormatPeer {

  /**
   * Find a DocumentFormat object based on its ID
   *
   * @param int $id
   * @return DocumentFormat
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all DocumentFormats
   *
   * @return array <DocumentFormat>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }


  //case "findByFormat":
  //return new Finder($finderName, "SELECT * FROM DocumentFormat WHERE format=?");
  public static function findByFormat($format) {
    $c = new Criteria();
    $c->add(self::FORMAT, $format);

    return self::doSelect($c);
  }

  //case "findByExtension":
  //return new Finder($finderName, "SELECT * FROM DocumentFormat WHERE default_extension=?");
  public static function findByExtension($default_extension) {
    $c = new Criteria();
    $c->add(self::DEFAULT_EXTENSION, $default_extension);

    return self::doSelect($c);
  }

  //case "findByExtension":
  //return new Finder($finderName, "SELECT * FROM DocumentFormat WHERE default_extension=?");
  public static function findByDefaultExtension($p_strDefaultExtension) {
    $c = new Criteria();
    $c->add(self::DEFAULT_EXTENSION, $p_strDefaultExtension);
    $c->setIgnoreCase(true);
    return self::doSelectOne($c);
  }


  //case "findByMimeType":
  //return new Finder($finderName, "SELECT * FROM DocumentFormat WHERE  mime_type=?");
  public static function findByMimeType($mime_type) {
    $c = new Criteria();
    $c->add(self::MIME_TYPE, $mime_type);

    return self::doSelect($c);
  }

} // DocumentFormatPeer
?>
