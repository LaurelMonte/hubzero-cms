<?php

  // include base peer class
  require_once 'lib/data/om/BaseMeasurementUnitPeer.php';

  // include object class
  include_once 'lib/data/MeasurementUnit.php';
  include_once 'lib/data/MeasurementUnitCategory.php';

/**
 * Skeleton subclass for performing query and update operations on the 'MeasurementUnit' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:03 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class MeasurementUnitPeer extends BaseMeasurementUnitPeer {

  /**
   * Find a MeasurementUnit object based on its ID
   *
   * @param int $id
   * @return MeasurementUnit
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all MeasurementUnit
   * select * from Measurement_Unit order by category, base_unit desc
   *
   * @return array <MeasurementUnit>
   */
  public static function findAll() {
    $c = new Criteria();
    $c->addAscendingOrderByColumn(self::CATEGORY);
    $c->addDescendingOrderByColumn(self::BASE_UNIT);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find a list of MeasurementUnit given by a Category
   *
   * @param int $categoryid
   * @return array <MeasurementUnit>
   */
  public static function findByCategory($categoryid) {
    $c = new Criteria();
    $c->add(self::CATEGORY, $categoryid);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find a list of MeasurementUnit given by a Category Name
   *
   * @param String $name
   * @return array <MeasurementUnit>
   */
  public static function findByCategoryName($name) {

    $c = new Criteria();
    $c->addJoin(self::CATEGORY, MeasurementUnitCategoryPeer::ID);
    $c->add(MeasurementUnitCategoryPeer::NAME, $name);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find a MeasurementUnit given by a name
   *
   * @param String $name
   * @return MeasurementUnit
   */
  public static function findByName($name) {
    $c = new Criteria();
    $c->add(self::NAME, $name);
    $c->setIgnoreCase(true);
    return self::doSelectOne($c);
  }
  
  /**
   * Find MaterialTypeProperty by MaterialType's display name 
   *
   * @param int $materialType_id: MaterialType Id
   * @return array <MaterialTypeProperty>
   */
  public static function suggestName($p_strName) {
    $c = new Criteria();
    $c->add(self::NAME, $p_strName ."%", Criteria::LIKE);
    $c->setIgnoreCase(true);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find the BaseUnit by a category
   *
   * @param int $categoryid
   * @return MeasurementUnit
   */
  public static function findBaseUnitByCategory($categoryid) {
    $c = new Criteria();
    $c->add(self::CATEGORY, $categoryid);
    $c->add(self::BASE_UNIT, null, Criteria::ISNULL);

    return self::doSelectOne($c);
  }



  /**
   * Find a list of MeasurementUnit that are not BaseUnit given by a Category
   *
   * @param int $categoryid
   * @return array <MeasurementUnit>
   */
  public static function findNotBaseUnitByCategory($categoryid) {
    $c = new Criteria();
    $c->add(self::CATEGORY, $categoryid);
    $c->add(self::BASE_UNIT, null, Criteria::ISNOTNULL);

    return self::doSelect($c);
  }


  /**
   * Find a list of MeasurementUnit given by either a Name or Abbreviation
   *
   * @param String $name
   * @param String $abbreviation
   * @return array <MeasurementUnit>
   */
  public static function selectByNameOrAbbreviation($name, $abbreviation) {
    $c = new Criteria();
    $cton1 = $c->getNewCriterion(self::NAME, $name);
    $cton2 = $c->getNewCriterion(self::ABBREVIATION, $abbreviation);
    $cton1->addOr($cton2);
    $c->add($cton1);
    $c->setIgnoreCase(true);

    return self::doSelect($c);
  }



  /**
   * Full function to find a list of MeasurementUnit given by either a Name or Abbreviation and a deep recursive level
   *
   * @param String $nameOrAbbrev
   * @param int $depth
   * @return array <MeasurementUnit>
   */
  public static function findByNameOrAbbreviation($nameOrAbbrev, $depth=0) {

    $stripPatterns = array(null, '/s$/', '/e$/');

    // This is a recursive function, that strips another letter off the end at each level of recursion,
    // to try to strip plural suffixes 's' or 'es'..
    if ($depth >= count($stripPatterns)) {
      return null;
    }

    if ($stripPatterns[$depth]) {
      $nameOrAbbrev = preg_replace($stripPatterns[$depth], '', $nameOrAbbrev);
    }

    if(strlen($nameOrAbbrev)) {
      $units = self::selectByNameOrAbbreviation($nameOrAbbrev, $nameOrAbbrev);

      if (!$units || !$units[0]) {
        // Couldn't find the unit. Recurse, to strip off the plural suffix from the end.
        $units = self::findByNameOrAbbreviation($nameOrAbbrev, $depth+1);
      }
    }
    else {
      // Nothing passed in to indicate the units type; return empty array.
      $units = array();
    }

    return $units;
  }

} // MeasurementUnitPeer
?>
