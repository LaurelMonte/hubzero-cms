<?php

require_once 'lib/data/om/BaseSensor.php';
require_once 'lib/data/SensorSensorManifest.php';


/**
 * Skeleton subclass for representing a row from the 'Sensor' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:07 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class Sensor extends BaseSensor {

  /**
   * Initializes internal state of Sensor object.
   */
  function __construct(SensorModel $sensorModel = null,
                       $name = "",
                       $serialNumber = "",
                       $localId = "",
                       $supplier = "",
                       $commissionDate = null,
                       $decommissionDate = null,
                       $deleted = false  )
  {
    $this->setSensorModel($sensorModel);
    $this->setName($name);
    $this->setSerialNumber($serialNumber);
    $this->setLocalId($localId);
    $this->setSupplier($supplier);
    $this->setCommissionDate($commissionDate);
    $this->setDecommissionDate($decommissionDate);
    $this->setDeleted($deleted);
  }


  /**
   * Return the Web-Services URL that this instance is accessible at
   *
   * @return String RESTURI
   */
  function getRESTURI() {
    return "/Sensor/{$this->getId()}";
  }


############################# Sensor - Calibration ################################
  /**
   * Set the array of Calibrations for this Sensor
   *
   * @param array <Calibration>
   */
  public function setCalibrations($cs) {
    if(is_null($cs)) $cs = array();
    $this->collCalibrations = $cs;
  }


  /**
   * Get Calibration of this Sensor based on the CalibrationId
   *
   * @param int $calibId
   * @return Calibration
   */
  function getCalibration($calibId) {

    $tcoll = $this->getCalibrations();

    foreach ($tcoll as $calib) {
      if (($calib->getId() == $calibId)) {
        return $calib;
      }
    }
    return null;
  }


  /**
   * Add a new Calibration to the list of Calibrations for this Sensor
   *
   * @param Calibration $calibration
   */
  function addCalibration( Calibration $calibration ) {
    $this->collCalibrations[] = $calibration;
    $calibration->setSensor($this);
  }


############################# Sensor - Facility ################################
  /**
   * Get the Facility associated with this Sensor
   *
   * @return Facility
   */
  public function getFacility() {
    return FacilityPeer::findBySensor($this->getId());
  }



  /**
   * Add this Sensor to the List of Sensor for Facility
   *
   * @param Facility $facility
   */
  public function addToFacility(Facility $facility ){
    $sensorManifest = $facility->getSensorManifest();
    $sensorManifest->addSensor($this);
  }


  /**
   * Since facility is not a real parent of sensor any more,
   * CRUD baulks when setting the parent from the url, so
   * here's a HACK to store the facility temporarily
   * Check SensorCRUD.php and please refactor
   *
   * Kevin, what is this for ???
   *
   * @param Facility $facility
   */
  public function setFacility(Facility $facility){
    $this->facility = $facility;
  }


############################# Sensor - Other ################################
  /**
   * Kevin, I totally lost in here, don't know what this function do: getPropertyByColumn()
   *
   * @param array $values
   * @return boolean
   */
  public function setFromArray($values) {
    foreach ($values as $key => $value) {
      $prop = $this->getPropertyByColumn($key);
      if ($prop) {
        if ($key == "sensorModelId") {
          $value = SensorModelPeer::find($value);
        }
        $prop->setValue($value);
      }
    }

    return true;
  }


  /**
   * Get the SensorType of this Sensor
   *
   * @return SensorType
   */
  public function getType() {
    return SensorTypePeer::findTypeByModel($this->getSensorModelId());
  }


  /**
   * Return the Excel columns that supported for Export or Upload by excel spreadsheet
   *
   * @return array(String)
   */
  function getExcelColumnNames() {
    return array(
      1=>"Sensor Name",
      2=>"Sensor Model",
      3=>"Serial Number",
      4=>"Local Id",
      5=>"Supplier",
      6=>"Commission Date (MM-DD-YYYY)",
      7=>"Decommission Date (MM-DD-YYYY)");
  }


  /**
   * Each sensor is associated with a directory on disk.
   * This function returns the path of that directory for
   * this experiment.
   */
  public function getPathname() {
    $facility = $this->getFacility();

    if($facility) {
      return "/nees/home/facility.groups/" . $facility->getShortName() . "/sensors/" . $this->getId();
    }
    else {
      exit("Unknown facility");
    }
  }

} // Sensor
?>
