<?php

  // include base peer class
  require_once 'lib/data/om/BaseNAWIFacilityPeer.php';

  // include object class
  include_once 'lib/data/NAWIFacility.php';
  include_once 'lib/data/NAWI.php';


/**
 * Skeleton subclass for performing query and update operations on the 'NAWI_Facility' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:04 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class NAWIFacilityPeer extends BaseNAWIFacilityPeer {

  /**
   * Find a NAWIFacility object based on its ID
   *
   * @param int $id
   * @return NAWIFacility
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all NAWIFacilities
   *
   * @return array <NAWIFacility>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }

  /**
   * select *
   * from
   *    NAWI_Facility nf,
   *    NAWI n,
   *    Facility f
   * where
   *    n.nawiid = nf.nawiid and
   *    nf.facilityid = f.facilityid and
   *    n.exp_phase <> 'COMPLETE' and
   *    n.test_dt > CURDATE()
   * order by n.test_dt
   *
   */
  public static function findUpcomingExperiments() {
    $c = new Criteria();
    $c->addJoin(self::NAWIID, NAWIPeer::NAWIID);
    $c->addJoin(self::FACILITYID, FacilityPeer::FACILITYID);
    $c->add(NAWIPeer::EXP_PHASE, 'COMPLETE', Criteria::NOT_EQUAL);
    $c->add(NAWIPeer::TEST_DT, "NAWI.TEST_DT > CURRENT_DATE", Criteria::CUSTOM);
    $c->addDescendingOrderByColumn(NAWIPeer::TEST_DT);

    return self::doSelectJoinAll($c);
  }


  /**
   * select
   *    n.exp_phase,
   *    count(*) as total
   * from
   *    NAWI_Facility nf,
   *    NAWI n
   * where
   *    n.nawiid = nf.nawiid and
   *    nf.facilityid='$fid'
   * group by
   *    n.exp_phase
   *
   *
   * @return array[array[]]
   */
  public static function findNawiPhaseCount( $facid ) {

    $sql = "
      SELECT
         n.EXP_PHASE,
         COUNT(*) as TOTAL
      FROM
         NAWI_Facility nf,
         NAWI n
      WHERE
         n.nawiid = nf.nawiid AND
         nf.facilityid= " . $facid . "
      GROUP BY
         n.exp_phase";

    $conn = Propel::getConnection();
    $stmt = $conn->prepareStatement($sql);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    $ret = array();

    if($rs->next()) {
      $row['exp_phase'] = $rs->getString('EXP_PHASE');
      $row['total'] = $rs->getInt('TOTAL');

      $ret[] = $row;
    }

    return $ret;
  }


  /**
   * select *
   * from
   *    NAWI_Facility nf,
   *    NAWI n
   * where
   *    n.nawiid = nf.nawiid and
   *    nf.facilityid='$fid'
   * order by
   *    n.test_dt,
   *    n.test_start desc
   *
   *
   * @param int $facid
   * @return array <NAWIFacility>
   */
  public static function findByFacility( $facid ) {
    $c = new Criteria();
    $c->addJoin(self::NAWIID, NAWIPeer::NAWIID);
    $c->add(self::FACILITYID, $facid);
    $c->addDescendingOrderByColumn(NAWIPeer::TEST_DT);
    $c->addDescendingOrderByColumn(NAWIPeer::TEST_START);

    return self::doSelectJoinAll($c);
  }


  /**
   * select *
   *    from NAWI_Facility nf,
   *    NAWI n
   * where
   *    n.nawiid = nf.nawiid and
   *    nf.facilityid='$fid' and
   *    n.nawiid='$nid'
   * order by
   *    n.test_dt,
   *    n.test_start desc
   *
   * @param ind $facid
   * @param int $nawiid
   * @return array[NAWIFacility]
   */
  public static function findByFacilityAndNawi( $facid, $nid ) {
    $c = new Criteria();
    $c->addJoin(self::NAWIID, NAWIPeer::NAWIID);
    $c->add(self::FACILITYID, $facid);
    $c->add(NAWIPeer::NAWIID, $nid);
    $c->addAscendingOrderByColumn(NAWIPeer::TEST_DT);
    $c->addDescendingOrderByColumn(NAWIPeer::TEST_START);

    return self::doSelectJoinAll($c);
  }



} // NAWIFacilityPeer
?>
