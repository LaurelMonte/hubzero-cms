<?php

// include base peer class
require_once 'lib/data/om/BaseOrganizationPeer.php';

// include object class
include_once 'lib/data/Organization.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Organization' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:05 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class OrganizationPeer extends BaseOrganizationPeer {

  /**
   * Find an Organization object based on its ID
   *
   * @param int $id
   * @return Organization
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * get Organization by ID
   *
   * @param int $id
   * @return Organization Object
   */
  public static function findById($id) {
    return self::find($id);
  }


  /**
   * Find all Organizations in NEEScentral
   *
   * @return array of Organization Objects
   */
  public static function findAll(Criteria $criteria = null, Connection $conn=null) {
    return self::doSelect($criteria == null? new Criteria() : $criteria,$conn);
  }

  public static function findOrganizationsByIds($ids) {
    $c = new Criteria();
    $c->add(self::ORGID, $ids, Criteria::IN);
    return self::findAll($c);
  }

  /**
   * Find Organizations that associated with a Project, given by ProjectID
   *
   * @param int $projid
   * @return array of Organization Objects
   */
  public static function findByProject($projid) {

    require_once 'lib/data/ProjectOrganizationPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ORGID, ProjectOrganizationPeer::ORGID);
    $c->add(ProjectOrganizationPeer::PROJID, $projid);
    
    //don't show Default Organization - gemezm@purdue.edu
    $c->add(self::NAME, "Default Organization", Criteria::NOT_EQUAL);
    //$c->add(self::FACILITYID, 0, Criteria::NOT_EQUAL);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find Organizations that associated with an Experiment, given by ExperimentID
   *
   * @param int $expid
   * @return array of Organization Objects
   */
  public static function findByExperiment($expid) {

    require_once 'lib/data/ExperimentOrganizationPeer.php';

    $c = new Criteria();
    $c->addJoin(self::ORGID, ExperimentOrganizationPeer::ORGID);
    $c->add(ExperimentOrganizationPeer::EXPID, $expid);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find Organization that has a given name
   *
   * @param string $name
   * @return Organization
   */
  public static function findByName($name) {

    $c = new Criteria();
    $c->add(self::NAME, $name);
    $c->setIgnoreCase(true);

    return self::doSelectOne($c);
  }



  /**
   * Search Organizations that has a similar name
   *
   * @param string $name
   * @return array Organization
   */
  public static function searchByName($name) {

    $c = new Criteria();
    $cton1 = $c->getNewCriterion(self::NAME, "%" . $name . "%", Criteria::LIKE);
    $cton2 = $c->getNewCriterion(self::SHORT_NAME, "%" . $name . "%", Criteria::LIKE);
    $cton1->addOr($cton2);
    $c->add($cton1);
    $c->setIgnoreCase(true);

    return self::doSelect($c);
  }



  /**
   * Find all Organizations that is not 'Root Organization' or 'Unidentified Organization'
   *
   * @return array of Organization Objects
   */
  public static function findAllButRoot() {

    $c = new Criteria();
    $c->add(self::NAME, array('Root Organization','Unidentified Organization'), Criteria::NOT_IN);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }



  /**
   * Find the only Organization given by its SensorManifestID
   *
   * @param int $sensor_manifest_id
   * @return Organization
   */
  public static function findBySensorManifest($sensor_manifest_id) {

    $c = new Criteria();
    $c->add(self::SENSOR_MANIFEST_ID, $sensor_manifest_id);

    return self::doSelectOne($c);
  }


  /**
   * Find All Organizations that are Facilities
   *
   * @return array of Organizations that are Facilities
   */
  public function findAllFacilities() {
    $c = new Criteria();
    $c->add(self::ORG_TYPE_ID, 1);
    $c->add(self::NAME, 'NEESit', Criteria::NOT_EQUAL);

    return self::doSelect($c);
  }

  public static function findProjectFacility($p_iProjectId){
    $strQuery = "select distinct(o.orgid)
                 from organization o ,experiment_facility ef, experiment e
                 where orgid = ef.facilityid
                   and e.expid = ef.expid
                   and e.projid = ?";
    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->prepareStatement($strQuery);
    $oStatement->setInt(1, $p_iProjectId);
    $oResultSet = $oStatement->executeQuery(ResultSet::FETCHMODE_ASSOC);

    $iOrgIdArray = array();
    while($oResultSet->next()){
      $iOrgId = $oResultSet->getInt('ORGID');
      array_push($iOrgIdArray, $iOrgId);
    }

    return self::retrieveByPKs($iOrgIdArray);
  }
  
  public static function findExperimentFacility($p_iExperimentId){
  	$oCriteria = new Criteria();
  	$oCriteria->add(ExperimentPeer::EXPID, $p_iExperimentId);
  	$oCriteria->addJoin(self::FACILITYID, ExperimentFacilityPeer::FACILITYID, Criteria::INNER_JOIN);
  	$oCriteria->addJoin(ExperimentFacilityPeer::EXPID, ExperimentPeer::EXPID, Criteria::INNER_JOIN);
  	return self::doSelect($oCriteria);
  }
  
  /**
   * Search NEES Facilities that has a similar name
   *
   * @param string $name
   * @return array Organization
   */
  public static function suggestFacilities($p_strName) {
  	$p_strName = strtoupper($p_strName);
  	$p_strName = "'%$p_strName%'";
  	
    $strQuery = "SELECT distinct o.ORGID 
                 FROM ORGANIZATION o
                 WHERE upper(o.name) like $p_strName
                   AND o.facilityid != 0";
    
    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->createStatement();
    $oResultsSet = $oStatement->executeQuery($strQuery, ResultSet::FETCHMODE_ASSOC);
    
    $iOrgIdArray = array();
    while($oResultsSet->next()){
      $iOrgId = $oResultsSet->getInt('ORGID');
      array_push($iOrgIdArray, $iOrgId);
    }
    
    return self::retrieveByPKs($iOrgIdArray);    
  }
  
  /**
   * Search organizations that has a similar name
   *
   * @param string $name
   * @return array Organization
   */
  public static function suggestOrganizations($p_strName, $p_iLimit) {
    $p_strName = strtoupper($p_strName);
    $p_strName = "'$p_strName%'";
  	
    $strQuery = "SELECT * 
				 FROM (
				   SELECT ORGANIZATION.orgid, row_number() 
				   OVER (ORDER BY name) as rn 
				   FROM ORGANIZATION 
				   WHERE upper(name) like $p_strName   
				      OR upper(short_name) like $p_strName
				 )  
				 WHERE rn <= $p_iLimit";
    
    $oConnection = Propel::getConnection();
    $oStatement = $oConnection->createStatement();
    $oResultsSet = $oStatement->executeQuery($strQuery, ResultSet::FETCHMODE_ASSOC);
    
    $iOrgIdArray = array();
    while($oResultsSet->next()){
      $iOrgId = $oResultsSet->getInt('ORGID');
      array_push($iOrgIdArray, $iOrgId);
    }
    return self::retrieveByPKs($iOrgIdArray);
  }


} // OrganizationPeer
?>
