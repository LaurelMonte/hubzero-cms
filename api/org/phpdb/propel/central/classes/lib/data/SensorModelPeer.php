<?php

  // include base peer class
  require_once 'lib/data/om/BaseSensorModelPeer.php';

  // include object class
  include_once 'lib/data/SensorModel.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SensorModel' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:09 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SensorModelPeer extends BaseSensorModelPeer {

  /**
   * Find a SensorModel object based on its ID
   *
   * @param int $id
   * @return SensorModel
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SensorModel that is not deleted
   *
   * @return array <SensorModel>
   */
  public static function findAll() {
    $c = new Criteria();
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn(self::SENSOR_TYPE_ID);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find a list of Group Values given by a SensorModel ID
   *
   * @param int $id: SensorModel ID
   * @return array
   */
  public static function findGroupValues($id){
    $sql = "SELECT A.label, dbms_lob.substr(SGA.string_value) AS string_value,  U.symbol
            FROM Sensor S
              JOIN Sensor_Attribute SA ON S.sensor_Id=SA.sensor_Id
              JOIN Sensor_Model sm ON sm.sensor_Model_Id=S.sensor_Model_Id
              JOIN Sensor_Grouped_Attribute_Map GM ON SA.group_Value=GM.group_value
              JOIN Sensor_Grouped_Attribute SGA ON GM.g_attribute_id=SGA.g_attribute_id
              JOIN Unit U on U.unit_Id=SGA.unit_id
              JOIN Attribute A ON SGA.attribute_id=A.attribute_Id
            WHERE SA.group_Value IS NOT NULL AND sm.sensor_Model_Id=?
            GROUP BY A.label, dbms_lob.substr(SGA.string_value),  U.symbol";

    $conn = Propel::getConnection(self::DATABASE_NAME);
    $stmt = $conn->prepareStatement($sql);
    $stmt->setInt(1, $id);
    $rs = $stmt->executeQuery(ResultSet::FETCHMODE_ASSOC);

    $array = array();

    while($rs->next()) {
      $label = $rs->get('LABEL');
      $string_value = $rs->get('STRING_VALUE');
      $symbol = $rs->get('SYMBOL');

      $string_value = is_null($string_value) ? "N/A" : $string_value;
      $symbol = is_null($symbol) ? "" : $symbol;

      $array[$label] = $string_value. " ". $symbol;
    }

    return $array;
  }


  /**
   * Get All Manufactures for all Sensor Models
   *
   * @return ResultSet $rs
   */
  public static function findAllManufacturers() {
    $c = new Criteria();
    $c->clearSelectColumns();
    $c->addSelectColumn(self::MANUFACTURER);
    $c->addAscendingOrderByColumn(self::MANUFACTURER);
    $c->setDistinct();

    return self::doSelectRS($c);
  }


  /**
   * Get the String HTML code for dropdown list of Manufacture of SensorModel
   *
   * @param String $manufacturer
   * @return String HTML Code
   */
  public static function getManufacturerOptions($manufacturer) {
    $c = new Criteria();
    $c->add(self::MANUFACTURER, '', Criteria::NOT_EQUAL);
    $c->add(self::MANUFACTURER, null, Criteria::NOT_EQUAL);
    $c->clearSelectColumns();
    $c->addSelectColumn(self::MANUFACTURER);
    $c->setDistinct();

    $rs = self::doSelectRS($c);
    $ret = "";

    $rs->setFetchmode(ResultSet::FETCHMODE_ASSOC);

    while($rs->next()) {
      $this_manufacturer = $rs->get("MANUFACTURER");
      $selected = $this_manufacturer == $manufacturer ? " selected" : "";
      $ret .= "<option style=\"background-color: #ffffff;\" value=\"$this_manufacturer\" $selected >$this_manufacturer</option>";
    }

    $ret .= "<option value=\"new\" style=\"background-color: #ccffcc;\" >New...</option>";
    return $ret;
  }

} // SensorModelPeer
?>
