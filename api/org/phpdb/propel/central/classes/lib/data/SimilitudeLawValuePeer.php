<?php

  // include base peer class
  require_once 'lib/data/om/BaseSimilitudeLawValuePeer.php';

  // include object class
  include_once 'lib/data/SimilitudeLawValue.php';


/**
 * Skeleton subclass for performing query and update operations on the 'SimilitudeLawValue' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:03:11 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class SimilitudeLawValuePeer extends BaseSimilitudeLawValuePeer {

  public static function getKeywordSearchColumns() {
	  return array();
  }


  /**
   * Find a SimilitudeLawValue object based on its ID
   *
   * @param int $id
   * @return SimilitudeLawValue
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find all SimilitudeLawValues
   *
   * @return array <SimilitudeLawValue>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }

  //case 'findByExperiment':
  //return new Finder($finderName, "SELECT * FROM SimilitudeLawValue WHERE expid = ?");
  public static function findByExperiment($expid) {
    $c = new Criteria();
    $c->add(self::EXPID, $expid);

    return self::doSelect($c);
  }


  //case 'findByExperimentLaw':
  //return new Finder($finderName, "SELECT * FROM SimilitudeLawValue WHERE expid = ? AND SimilitudeLaw_id = ?");
  public static function findByExperimentLaw($expid, $similitudeLaw_id) {
    $c = new Criteria();
    $c->add(self::EXPID, $expid);
    $c->add(self::SIMILITUDE_LAW_ID, $similitudeLaw_id);

    return self::doSelect($c);
  }



  /**
   * Clone the Experiment SimilitudeLawValue to another
   *
   * @param Experiment $old_exp
   * @param Experiment $new_exp
   * @return boolean value, true if successed, false if failed
   */
  public static function cloneExperimentSimilitudeLawValue(Experiment $old_exp, Experiment $new_exp){

    if(is_null($old_exp) || is_null($new_exp)) return false;

    $sql = "INSERT INTO
              Similitude_Law_Value (ID, SIMILITUDE_LAW_ID, EXPID, VALUE, COMMENTS)
            SELECT
              SIMILITUDE_LAW_VALUE_SEQ.NEXTVAL,
              SIMILITUDE_LAW_ID,
              ?,
              VALUE,
              COMMENTS
            FROM
              Similitude_Law_Value
            WHERE
              EXPID = ?";

    try {
      $conn = Propel::getConnection(self::DATABASE_NAME);

      $stmt = $conn->prepareStatement($sql);
      $stmt->setInt(1, $new_exp->getId());
      $stmt->setInt(2, $old_exp->getId());
      $stmt->executeUpdate();

      return true;
    }
    catch (Exeption $e) {
      return false;
    }
  }



} // SimilitudeLawValuePeer
?>
