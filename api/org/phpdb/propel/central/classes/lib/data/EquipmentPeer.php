<?php

  // include base peer class
  require_once 'lib/data/om/BaseEquipmentPeer.php';

  // include object class
  include_once 'lib/data/Equipment.php';


/**
 * Skeleton subclass for performing query and update operations on the 'Equipment' table.
 *
 *
 *
 * This class was autogenerated by Propel on:
 *
 * Sat Feb  9 00:02:54 2008
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.data
 */
class EquipmentPeer extends BaseEquipmentPeer {

  /**
   * Find an Equipment object based on its ID
   *
   * @param int $id
   * @return Equipment
   */
  public static function find($id) {
    return self::retrieveByPK($id);
  }


  /**
   * Find a list of all Equipment
   *
   * @return array <Equipment>
   */
  public static function findAll() {
    return self::doSelect(new Criteria());
  }



  /**
   * Find list of Equipment by Organization
   *
   * @param int $orgid
   * @return array <Equipment>
   */
  public static function findAllByOrganization($orgid) {
    $c = new Criteria();
    $c->add(self::ORGID, $orgid);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find a list of Major Equipment by Organization
   *
   * @param int $orgid
   * @return array <Equipment>
   */
  public static function findAllMajorByOrganization($orgid) {
    $c = new Criteria();
    $c->add(self::ORGID, $orgid);
    $c->add(self::MAJOR, 1);
    $c->addAscendingOrderByColumn(self::NAME);

    return self::doSelect($c);
  }


  /**
   * Find list of Equipment by a Parent Equipment
   *
   * @param int $parentId: The Parent Equipment id
   * @return array <Equipment>
   */
  public static function findAllByParent($parentId) {
    $c = new Criteria();
    $c->add(self::PARENT_ID, $parentId);

    return self::doSelect($c);
  }


  /**
   * Find a list of Equipment given by a Model
   *
   * @param int $modelId
   * @return array <Equipment>
   */
  public static function findByFormat($modelId) {
    $c = new Criteria();
    $c->add(self::MODEL_ID, $modelId);

    return self::doSelect($c);
  }



/*
    $sql = "SELECT e.*
              FROM Equipment e
        INNER JOIN ExperimentEquipment ee
                ON e.equipmentId = ee.equipmentId
        INNER JOIN EquipmentModel em
                ON e.modelId = em.id
        INNER JOIN EquipmentClass ec
                ON em.equipmentClassId = ec.equipmentClassId
             WHERE ee.experimentid = ?
               AND ec.className = ?";

*/
  public static function findByExperimentEquipmentClass($experimentid, $className) {

    require_once 'lib/data/ExperimentEquipmentPeer.php';
    require_once 'lib/data/EquipmentModelPeer.php';
    require_once 'lib/data/EquipmentClassPeer.php';

    $c = new Criteria();
    $c->addJoin(self::EQUIPMENT_ID, ExperimentEquipmentPeer::EQUIPMENT_ID, Criteria::INNER_JOIN);
    $c->addJoin(self::MODEL_ID, EquipmentModelPeer::ID, Criteria::INNER_JOIN);
    $c->addJoin(EquipmentModelPeer::EQUIPMENT_CLASS_ID, EquipmentClassPeer::EQUIPMENT_CLASS_ID, Criteria::INNER_JOIN);
    $c->add(ExperimentEquipmentPeer::EXPERIMENT_ID, $experimentid);
    $c->add(EquipmentClassPeer::CLASS_NAME, $className);
    $c->addAscendingOrderByColumn(self::EQUIPMENT_ID );

    return self::doSelect($c);

  }
  
  public static function findByProject($p_iProjectId){
  	require_once 'lib/data/ExperimentEquipmentPeer.php';
    require_once 'lib/data/ExperimentPeer.php';
    require_once 'lib/data/EquipmentModelPeer.php';
    require_once 'lib/data/EquipmentClassPeer.php';

    $c = new Criteria();
    $c->addJoin(self::EQUIPMENT_ID, ExperimentEquipmentPeer::EQUIPMENT_ID, Criteria::INNER_JOIN);
    $c->addJoin(ExperimentEquipmentPeer::EXPERIMENT_ID, ExperimentPeer::EXPID, Criteria::INNER_JOIN);
    $c->addJoin(self::MODEL_ID, EquipmentModelPeer::ID, Criteria::INNER_JOIN);
    $c->addJoin(EquipmentModelPeer::EQUIPMENT_CLASS_ID, EquipmentClassPeer::EQUIPMENT_CLASS_ID, Criteria::INNER_JOIN);
    $c->add(ExperimentPeer::PROJID, $p_iProjectId);
    $c->add(ExperimentPeer::DELETED, 0);
    $c->add(self::DELETED, 0);
    $c->addAscendingOrderByColumn(self::EQUIPMENT_ID );

    return self::doSelect($c);
  }


} // EquipmentPeer
?>
